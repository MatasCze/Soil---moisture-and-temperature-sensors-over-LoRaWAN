
inczGlebaMoistTemp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08008c78  08008c78  00018c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009154  08009154  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009154  08009154  00019154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800915c  0800915c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001dc  08009340  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08009340  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ffc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270f  00000000  00000000  00033208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00035918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  000369c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029894  00000000  00000000  00037970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012220  00000000  00000000  00061204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104a41  00000000  00000000  00073424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177e65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  00177eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c5c 	.word	0x08008c5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008c5c 	.word	0x08008c5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	69b9      	ldr	r1, [r7, #24]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	fb03 f202 	mul.w	r2, r3, r2
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	4413      	add	r3, r2
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <__io_putchar>:

int __io_putchar(int ch)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000eec:	1d39      	adds	r1, r7, #4
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <__io_putchar+0x20>)
 8000ef6:	f004 fb0d 	bl	8005514 <HAL_UART_Transmit>
 return 1;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000280 	.word	0x20000280

08000f08 <set_baudrate>:

static void set_baudrate(uint32_t baudrate)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  huart3.Instance = USART3;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <set_baudrate+0x64>)
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <set_baudrate+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = baudrate;
 8000f16:	4a15      	ldr	r2, [pc, #84]	; (8000f6c <set_baudrate+0x64>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6053      	str	r3, [r2, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <set_baudrate+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <set_baudrate+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <set_baudrate+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <set_baudrate+0x64>)
 8000f30:	220c      	movs	r2, #12
 8000f32:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <set_baudrate+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <set_baudrate+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <set_baudrate+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <set_baudrate+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <set_baudrate+0x64>)
 8000f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38

  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <set_baudrate+0x64>)
 8000f56:	f004 fa87 	bl	8005468 <HAL_HalfDuplex_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <set_baudrate+0x5c>
  {
    Error_Handler();
 8000f60:	f000 fbd2 	bl	8001708 <Error_Handler>
  }
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000304 	.word	0x20000304
 8000f70:	40004800 	.word	0x40004800

08000f74 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xF0;
 8000f7a:	23f0      	movs	r3, #240	; 0xf0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	71bb      	strb	r3, [r7, #6]

  set_baudrate(9600);
 8000f82:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000f86:	f7ff ffbf 	bl	8000f08 <set_baudrate>
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8000f8a:	1df9      	adds	r1, r7, #7
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	2201      	movs	r2, #1
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <wire_reset+0x50>)
 8000f94:	f004 fabe 	bl	8005514 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8000f98:	1db9      	adds	r1, r7, #6
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <wire_reset+0x50>)
 8000fa2:	f004 fb4b 	bl	800563c <HAL_UART_Receive>
  set_baudrate(115200);
 8000fa6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000faa:	f7ff ffad 	bl	8000f08 <set_baudrate>

  if (data_in != 0xF0)
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	2bf0      	cmp	r3, #240	; 0xf0
 8000fb2:	d001      	beq.n	8000fb8 <wire_reset+0x44>
    return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e000      	b.n	8000fba <wire_reset+0x46>
  else
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000304 	.word	0x20000304

08000fc8 <read_bit>:

static int read_bit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xFF;
 8000fce:	23ff      	movs	r3, #255	; 0xff
 8000fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8000fd6:	1df9      	adds	r1, r7, #7
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4808      	ldr	r0, [pc, #32]	; (8001000 <read_bit+0x38>)
 8000fe0:	f004 fa98 	bl	8005514 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8000fe4:	1db9      	adds	r1, r7, #6
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	2201      	movs	r2, #1
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <read_bit+0x38>)
 8000fee:	f004 fb25 	bl	800563c <HAL_UART_Receive>

  return data_in & 0x01;
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000304 	.word	0x20000304

08001004 <wire_read>:

uint8_t wire_read(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	e00e      	b.n	8001032 <wire_read+0x2e>
    value >>= 1;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	085b      	lsrs	r3, r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800101a:	f7ff ffd5 	bl	8000fc8 <read_bit>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <wire_read+0x28>
      value |= 0x80;
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102a:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b07      	cmp	r3, #7
 8001036:	dded      	ble.n	8001014 <wire_read+0x10>
  }
  return value;
 8001038:	79fb      	ldrb	r3, [r7, #7]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <write_bit>:

static void write_bit(int value)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if (value) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00a      	beq.n	8001068 <write_bit+0x24>
      uint8_t data_out = 0xff;
 8001052:	23ff      	movs	r3, #255	; 0xff
 8001054:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001056:	f107 010f 	add.w	r1, r7, #15
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	2201      	movs	r2, #1
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <write_bit+0x40>)
 8001062:	f004 fa57 	bl	8005514 <HAL_UART_Transmit>
  } else {
      uint8_t data_out = 0x0;
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
  }
}
 8001066:	e009      	b.n	800107c <write_bit+0x38>
      uint8_t data_out = 0x0;
 8001068:	2300      	movs	r3, #0
 800106a:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 800106c:	f107 010e 	add.w	r1, r7, #14
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	2201      	movs	r2, #1
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <write_bit+0x40>)
 8001078:	f004 fa4c 	bl	8005514 <HAL_UART_Transmit>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000304 	.word	0x20000304

08001088 <wire_write>:

void wire_write(uint8_t byte)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e00b      	b.n	80010b0 <wire_write+0x28>
    write_bit(byte & 0x01);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffd0 	bl	8001044 <write_bit>
    byte >>= 1;
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	085b      	lsrs	r3, r3, #1
 80010a8:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	ddf0      	ble.n	8001098 <wire_write+0x10>
  }
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	460a      	mov	r2, r1
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	4613      	mov	r3, r2
 80010ce:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	e016      	b.n	8001104 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	4053      	eors	r3, r2
 80010dc:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80010e4:	7afb      	ldrb	r3, [r7, #11]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d004      	beq.n	80010f8 <byte_crc+0x38>
      crc ^= 0x8c;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80010f4:	43db      	mvns	r3, r3
 80010f6:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	085b      	lsrs	r3, r3, #1
 80010fc:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b07      	cmp	r3, #7
 8001108:	dde5      	ble.n	80010d6 <byte_crc+0x16>
  }
  return crc;
 800110a:	79fb      	ldrb	r3, [r7, #7]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e00d      	b.n	8001148 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	7afb      	ldrb	r3, [r7, #11]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffc1 	bl	80010c0 <byte_crc>
 800113e:	4603      	mov	r3, r0
 8001140:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbed      	blt.n	800112c <wire_crc+0x14>

    return crc;
 8001150:	7afb      	ldrb	r3, [r7, #11]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8001166:	f7ff ff05 	bl	8000f74 <wire_reset>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <send_cmd+0x1a>
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e01e      	b.n	80011b2 <send_cmd+0x58>

  if (!rom_code) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d103      	bne.n	8001182 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 800117a:	20cc      	movs	r0, #204	; 0xcc
 800117c:	f7ff ff84 	bl	8001088 <wire_write>
 8001180:	e012      	b.n	80011a8 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8001182:	2055      	movs	r0, #85	; 0x55
 8001184:	f7ff ff80 	bl	8001088 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e009      	b.n	80011a2 <send_cmd+0x48>
      wire_write(rom_code[i]);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff76 	bl	8001088 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	ddf2      	ble.n	800118e <send_cmd+0x34>
  }
  wire_write(cmd);
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff6c 	bl	8001088 <wire_write>
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 80011c2:	2144      	movs	r1, #68	; 0x44
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ffc8 	bl	800115a <send_cmd>
 80011ca:	4603      	mov	r3, r0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 80011de:	21be      	movs	r1, #190	; 0xbe
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ffba 	bl	800115a <send_cmd>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e01e      	b.n	800122e <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e009      	b.n	800120a <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	18d4      	adds	r4, r2, r3
 80011fc:	f7ff ff02 	bl	8001004 <wire_read>
 8001200:	4603      	mov	r3, r0
 8001202:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2b08      	cmp	r3, #8
 800120e:	ddf2      	ble.n	80011f6 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8001210:	2108      	movs	r1, #8
 8001212:	6838      	ldr	r0, [r7, #0]
 8001214:	f7ff ff80 	bl	8001118 <wire_crc>
 8001218:	4603      	mov	r3, r0
 800121a:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3308      	adds	r3, #8
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	7afa      	ldrb	r2, [r7, #11]
 8001224:	429a      	cmp	r2, r3
 8001226:	d101      	bne.n	800122c <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	e000      	b.n	800122e <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}
	...

08001238 <ds18b20_get_temp>:

float ds18b20_get_temp(const uint8_t* rom_code)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffc4 	bl	80011d4 <ds18b20_read_scratchpad>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <ds18b20_get_temp+0x20>
    return 85.0f;
 8001252:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001280 <ds18b20_get_temp+0x48>
 8001256:	e00b      	b.n	8001270 <ds18b20_get_temp+0x38>
 8001258:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 800125a:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 800125c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001268:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800126c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8001270:	eef0 7a47 	vmov.f32	s15, s14
 8001274:	eeb0 0a67 	vmov.f32	s0, s15
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	42aa0000 	.word	0x42aa0000

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t inputValueMoisture;
	uint16_t inputValueTemp;
	uint16_t percent;
	const uint16_t dry = 2490;
 800128a:	f640 13ba 	movw	r3, #2490	; 0x9ba
 800128e:	83fb      	strh	r3, [r7, #30]
	const uint16_t wet = 1531;
 8001290:	f240 53fb 	movw	r3, #1531	; 0x5fb
 8001294:	83bb      	strh	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001296:	f000 fcdc 	bl	8001c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 f8b3 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129e:	f000 fa0f 	bl	80016c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012a2:	f000 f90b 	bl	80014bc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80012a6:	f000 f9d7 	bl	8001658 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80012aa:	f000 f97d 	bl	80015a8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80012ae:	f000 f9a3 	bl	80015f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int connection_iter = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012b6:	217f      	movs	r1, #127	; 0x7f
 80012b8:	4847      	ldr	r0, [pc, #284]	; (80013d8 <main+0x154>)
 80012ba:	f001 ff8b 	bl	80031d4 <HAL_ADCEx_Calibration_Start>
  if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 3600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80012be:	2204      	movs	r2, #4
 80012c0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80012c4:	4845      	ldr	r0, [pc, #276]	; (80013dc <main+0x158>)
 80012c6:	f003 ffbd 	bl	8005244 <HAL_RTCEx_SetWakeUpTimer_IT>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <main+0x50>
   {
   Error_Handler();
 80012d0:	f000 fa1a 	bl	8001708 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ds18b20_start_measure(NULL);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff ff70 	bl	80011ba <ds18b20_start_measure>
	  HAL_Delay(750);
 80012da:	f240 20ee 	movw	r0, #750	; 0x2ee
 80012de:	f000 fd2d 	bl	8001d3c <HAL_Delay>

	  HAL_ADC_Start(&hadc1);
 80012e2:	483d      	ldr	r0, [pc, #244]	; (80013d8 <main+0x154>)
 80012e4:	f001 f8ae 	bl	8002444 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	483a      	ldr	r0, [pc, #232]	; (80013d8 <main+0x154>)
 80012ee:	f001 f963 	bl	80025b8 <HAL_ADC_PollForConversion>
	  inputValueMoisture = HAL_ADC_GetValue(&hadc1);
 80012f2:	4839      	ldr	r0, [pc, #228]	; (80013d8 <main+0x154>)
 80012f4:	f001 fa38 	bl	8002768 <HAL_ADC_GetValue>
 80012f8:	4603      	mov	r3, r0
 80012fa:	837b      	strh	r3, [r7, #26]
	  percent = map(inputValueMoisture, wet, dry, 100, 0);
 80012fc:	8b78      	ldrh	r0, [r7, #26]
 80012fe:	8bb9      	ldrh	r1, [r7, #28]
 8001300:	8bfa      	ldrh	r2, [r7, #30]
 8001302:	2300      	movs	r3, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	f7ff fdd0 	bl	8000eac <map>
 800130c:	4603      	mov	r3, r0
 800130e:	84fb      	strh	r3, [r7, #38]	; 0x26

	  float temperature = ds18b20_get_temp(NULL);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff ff91 	bl	8001238 <ds18b20_get_temp>
 8001316:	ed87 0a05 	vstr	s0, [r7, #20]
	  if(percent > 100){
 800131a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	d901      	bls.n	8001324 <main+0xa0>
		  percent = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	84fb      	strh	r3, [r7, #38]	; 0x26
	  }
	  //printf("Moisture of soil is %d %%, temperature is %.1f*C \n", percent, temp);


	  if(connection_iter < 1) {
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	2b00      	cmp	r3, #0
 8001328:	dc36      	bgt.n	8001398 <main+0x114>
	    		do {
	    			/* TX
	    				AT+ID=DevEui
	    			*/

	    			printf("AT+ID=DevEui\r\n");
 800132a:	482d      	ldr	r0, [pc, #180]	; (80013e0 <main+0x15c>)
 800132c:	f005 fbe2 	bl	8006af4 <puts>
	    			HAL_Delay(100);
 8001330:	2064      	movs	r0, #100	; 0x64
 8001332:	f000 fd03 	bl	8001d3c <HAL_Delay>
	    				+ID: DevEui, 2C:F7:F1:20:24:90:07:11
	    			*/
	    			/* TX
	    				AT+ID=AppEui
	    			*/
	    			printf("AT+ID=AppEui\r\n");
 8001336:	482b      	ldr	r0, [pc, #172]	; (80013e4 <main+0x160>)
 8001338:	f005 fbdc 	bl	8006af4 <puts>
	    			HAL_Delay(100);
 800133c:	2064      	movs	r0, #100	; 0x64
 800133e:	f000 fcfd 	bl	8001d3c <HAL_Delay>
	    				+ID: AppEui, 00:00:00:00:00:00:00:00
	    			*/
	    			/* TX
	    				AT+DR=EU868
	    			*/
	    			printf("AT+DR=EU868\r\n"); // frequency 868
 8001342:	4829      	ldr	r0, [pc, #164]	; (80013e8 <main+0x164>)
 8001344:	f005 fbd6 	bl	8006af4 <puts>
	    			HAL_Delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f000 fcf7 	bl	8001d3c <HAL_Delay>
	    				+DR: EU868
	    			*/
	    			/* Tx
	    				AT+CH=NUM,0-2
	    			*/
	    			printf("AT+CH=NUM,0-2\r\n"); // channel
 800134e:	4827      	ldr	r0, [pc, #156]	; (80013ec <main+0x168>)
 8001350:	f005 fbd0 	bl	8006af4 <puts>
	    			HAL_Delay(100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f000 fcf1 	bl	8001d3c <HAL_Delay>
	    				+CH: NUM, 0-2
	    			*/
	    			/* Tx
	    				AT+MODE=LWOTAA
	    			*/
	    			printf("AT+MODE=LWOTAA\r\n");
 800135a:	4825      	ldr	r0, [pc, #148]	; (80013f0 <main+0x16c>)
 800135c:	f005 fbca 	bl	8006af4 <puts>
	    			HAL_Delay(100);
 8001360:	2064      	movs	r0, #100	; 0x64
 8001362:	f000 fceb 	bl	8001d3c <HAL_Delay>
	    				+MODE: LWOTAA
	    			*/
	    			/* Tx
	    				AT+KEY=APPKEY
	    			*/
	    			printf("AT+KEY=APPKEY,\"402A1CF34012B797D09BF245931733D2\"\r\n");
 8001366:	4823      	ldr	r0, [pc, #140]	; (80013f4 <main+0x170>)
 8001368:	f005 fbc4 	bl	8006af4 <puts>
	    			HAL_Delay(100);
 800136c:	2064      	movs	r0, #100	; 0x64
 800136e:	f000 fce5 	bl	8001d3c <HAL_Delay>
	    				+KEY: APPKEY B71DED6CDA06912D9800C1031FBC5828
	    			*/
	    			/* Tx
	    				AT+ID
	    			*/
	    			printf("AT+ID\r\n");
 8001372:	4821      	ldr	r0, [pc, #132]	; (80013f8 <main+0x174>)
 8001374:	f005 fbbe 	bl	8006af4 <puts>
	    			HAL_Delay(100);
 8001378:	2064      	movs	r0, #100	; 0x64
 800137a:	f000 fcdf 	bl	8001d3c <HAL_Delay>
	    				+ID: AppEui, 00:00:00:00:00:00:00:00
	    			*/
	    			/* Tx
	    				AT+JOIN
	    			*/
	    			printf("AT+JOIN\r\n");
 800137e:	481f      	ldr	r0, [pc, #124]	; (80013fc <main+0x178>)
 8001380:	f005 fbb8 	bl	8006af4 <puts>
	    			HAL_Delay(10000);
 8001384:	f242 7010 	movw	r0, #10000	; 0x2710
 8001388:	f000 fcd8 	bl	8001d3c <HAL_Delay>
	    				+JOIN: Network joined
	    				+JOIN: NetID 000013 DevAddr 26:01:5F:66
	    				+JOIN: Done
	    			*/

	    			connection_iter++;
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	3301      	adds	r3, #1
 8001390:	623b      	str	r3, [r7, #32]

	    		}
	    		while (connection_iter < 1);
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	2b00      	cmp	r3, #0
 8001396:	ddc8      	ble.n	800132a <main+0xa6>
	    	}

	  int temp = 212; // adding variable from sensor
 8001398:	23d4      	movs	r3, #212	; 0xd4
 800139a:	613b      	str	r3, [r7, #16]
	  int humi = 805; // adding variable from sensor
 800139c:	f240 3325 	movw	r3, #805	; 0x325
 80013a0:	60fb      	str	r3, [r7, #12]
	  int soilhumi = percent;
 80013a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013a4:	60bb      	str	r3, [r7, #8]
	  int soiltemp = temperature * 10;
 80013a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b6:	ee17 3a90 	vmov	r3, s15
 80013ba:	607b      	str	r3, [r7, #4]
	  //int soilhumi = 805;
	  //int soiltemp = 222;

	    	//printf("AT+MSG=%f_%f\r\n", temp, humi);
	  printf("AT+MSG=%03d_%03d_%03d_%03d\r\n", temp, humi, soiltemp, soilhumi);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	6939      	ldr	r1, [r7, #16]
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <main+0x17c>)
 80013c8:	f005 fb0e 	bl	80069e8 <iprintf>

	  HAL_Delay(10);
 80013cc:	200a      	movs	r0, #10
 80013ce:	f000 fcb5 	bl	8001d3c <HAL_Delay>



	  HAL_PWR_EnterSTANDBYMode();
 80013d2:	f002 fadb 	bl	800398c <HAL_PWR_EnterSTANDBYMode>
  {
 80013d6:	e77d      	b.n	80012d4 <main+0x50>
 80013d8:	200001f8 	.word	0x200001f8
 80013dc:	2000025c 	.word	0x2000025c
 80013e0:	08008c78 	.word	0x08008c78
 80013e4:	08008c88 	.word	0x08008c88
 80013e8:	08008c98 	.word	0x08008c98
 80013ec:	08008ca8 	.word	0x08008ca8
 80013f0:	08008cb8 	.word	0x08008cb8
 80013f4:	08008cc8 	.word	0x08008cc8
 80013f8:	08008cfc 	.word	0x08008cfc
 80013fc:	08008d04 	.word	0x08008d04
 8001400:	08008d10 	.word	0x08008d10

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b096      	sub	sp, #88	; 0x58
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2244      	movs	r2, #68	; 0x44
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fe76 	bl	8006104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001426:	f44f 7000 	mov.w	r0, #512	; 0x200
 800142a:	f002 fad7 	bl	80039dc <HAL_PWREx_ControlVoltageScaling>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001434:	f000 f968 	bl	8001708 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001438:	f002 fa98 	bl	800396c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <SystemClock_Config+0xb4>)
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <SystemClock_Config+0xb4>)
 8001444:	f023 0318 	bic.w	r3, r3, #24
 8001448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800144c:	2316      	movs	r3, #22
 800144e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001458:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145a:	2310      	movs	r3, #16
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800145e:	2301      	movs	r3, #1
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001466:	2360      	movs	r3, #96	; 0x60
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800146a:	2300      	movs	r3, #0
 800146c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fb08 	bl	8003a88 <HAL_RCC_OscConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800147e:	f000 f943 	bl	8001708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001486:	2301      	movs	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800148a:	23a0      	movs	r3, #160	; 0xa0
 800148c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fed0 	bl	8004240 <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014a6:	f000 f92f 	bl	8001708 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014aa:	f003 fbd7 	bl	8004c5c <HAL_RCCEx_EnableMSIPLLMode>
}
 80014ae:	bf00      	nop
 80014b0:	3758      	adds	r7, #88	; 0x58
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <MX_ADC1_Init+0xe0>)
 80014e0:	4a2f      	ldr	r2, [pc, #188]	; (80015a0 <MX_ADC1_Init+0xe4>)
 80014e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014e4:	4b2d      	ldr	r3, [pc, #180]	; (800159c <MX_ADC1_Init+0xe0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ea:	4b2c      	ldr	r3, [pc, #176]	; (800159c <MX_ADC1_Init+0xe0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <MX_ADC1_Init+0xe0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <MX_ADC1_Init+0xe0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <MX_ADC1_Init+0xe0>)
 80014fe:	2204      	movs	r2, #4
 8001500:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <MX_ADC1_Init+0xe0>)
 8001504:	2200      	movs	r2, #0
 8001506:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <MX_ADC1_Init+0xe0>)
 800150a:	2200      	movs	r2, #0
 800150c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <MX_ADC1_Init+0xe0>)
 8001510:	2201      	movs	r2, #1
 8001512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_ADC1_Init+0xe0>)
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <MX_ADC1_Init+0xe0>)
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <MX_ADC1_Init+0xe0>)
 8001524:	2200      	movs	r2, #0
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_ADC1_Init+0xe0>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_ADC1_Init+0xe0>)
 8001532:	2200      	movs	r2, #0
 8001534:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_ADC1_Init+0xe0>)
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800153e:	4817      	ldr	r0, [pc, #92]	; (800159c <MX_ADC1_Init+0xe0>)
 8001540:	f000 fe2a 	bl	8002198 <HAL_ADC_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800154a:	f000 f8dd 	bl	8001708 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4810      	ldr	r0, [pc, #64]	; (800159c <MX_ADC1_Init+0xe0>)
 800155a:	f001 fe9b 	bl	8003294 <HAL_ADCEx_MultiModeConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001564:	f000 f8d0 	bl	8001708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_ADC1_Init+0xe8>)
 800156a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800156c:	2306      	movs	r3, #6
 800156e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001574:	237f      	movs	r3, #127	; 0x7f
 8001576:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001578:	2304      	movs	r3, #4
 800157a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_ADC1_Init+0xe0>)
 8001586:	f001 f8fd 	bl	8002784 <HAL_ADC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001590:	f000 f8ba 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200001f8 	.word	0x200001f8
 80015a0:	50040000 	.word	0x50040000
 80015a4:	04300002 	.word	0x04300002

080015a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_RTC_Init+0x48>)
 80015ae:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <MX_RTC_Init+0x4c>)
 80015b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_RTC_Init+0x48>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_RTC_Init+0x48>)
 80015ba:	227f      	movs	r2, #127	; 0x7f
 80015bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_RTC_Init+0x48>)
 80015c0:	22ff      	movs	r2, #255	; 0xff
 80015c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_RTC_Init+0x48>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_RTC_Init+0x48>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_RTC_Init+0x48>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_RTC_Init+0x48>)
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_RTC_Init+0x48>)
 80015de:	f003 fd1f 	bl	8005020 <HAL_RTC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80015e8:	f000 f88e 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000025c 	.word	0x2000025c
 80015f4:	40002800 	.word	0x40002800

080015f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_USART1_UART_Init+0x58>)
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <MX_USART1_UART_Init+0x5c>)
 8001600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001604:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800163c:	f003 fec6 	bl	80053cc <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001646:	f000 f85f 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000280 	.word	0x20000280
 8001654:	40013800 	.word	0x40013800

08001658 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <MX_USART3_UART_Init+0x64>)
 8001660:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 8001664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001668:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 8001696:	2210      	movs	r2, #16
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 800169c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_USART3_UART_Init+0x60>)
 80016a4:	f003 fee0 	bl	8005468 <HAL_HalfDuplex_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80016ae:	f000 f82b 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000304 	.word	0x20000304
 80016bc:	40004800 	.word	0x40004800

080016c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_GPIO_Init+0x44>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <MX_GPIO_Init+0x44>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_GPIO_Init+0x44>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_GPIO_Init+0x44>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <MX_GPIO_Init+0x44>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_GPIO_Init+0x44>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001710:	e7fe      	b.n	8001710 <Error_Handler+0x8>
	...

08001714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x44>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_MspInit+0x44>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6613      	str	r3, [r2, #96]	; 0x60
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_MspInit+0x44>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_MspInit+0x44>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_MspInit+0x44>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_MspInit+0x44>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0ac      	sub	sp, #176	; 0xb0
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2288      	movs	r2, #136	; 0x88
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fcc1 	bl	8006104 <memset>
  if(hadc->Instance==ADC1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a27      	ldr	r2, [pc, #156]	; (8001824 <HAL_ADC_MspInit+0xc8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d146      	bne.n	800181a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800178c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001790:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80017a2:	2310      	movs	r3, #16
 80017a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017a6:	2307      	movs	r3, #7
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017ae:	2302      	movs	r3, #2
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 ff63 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80017c8:	f7ff ff9e 	bl	8001708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_ADC_MspInit+0xcc>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d0:	4a15      	ldr	r2, [pc, #84]	; (8001828 <HAL_ADC_MspInit+0xcc>)
 80017d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_ADC_MspInit+0xcc>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_ADC_MspInit+0xcc>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_ADC_MspInit+0xcc>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f0:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_ADC_MspInit+0xcc>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001802:	230b      	movs	r3, #11
 8001804:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <HAL_ADC_MspInit+0xd0>)
 8001816:	f001 feff 	bl	8003618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	37b0      	adds	r7, #176	; 0xb0
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	50040000 	.word	0x50040000
 8001828:	40021000 	.word	0x40021000
 800182c:	48000800 	.word	0x48000800

08001830 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0a4      	sub	sp, #144	; 0x90
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	2288      	movs	r2, #136	; 0x88
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f004 fc5f 	bl	8006104 <memset>
  if(hrtc->Instance==RTC)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a14      	ldr	r2, [pc, #80]	; (800189c <HAL_RTC_MspInit+0x6c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d120      	bne.n	8001892 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	4618      	mov	r0, r3
 8001864:	f002 ff10 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800186e:	f7ff ff4b 	bl	8001708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RTC_MspInit+0x70>)
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001878:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <HAL_RTC_MspInit+0x70>)
 800187a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800187e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2003      	movs	r0, #3
 8001888:	f001 fe8f 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800188c:	2003      	movs	r0, #3
 800188e:	f001 fea8 	bl	80035e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3790      	adds	r7, #144	; 0x90
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40002800 	.word	0x40002800
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0ae      	sub	sp, #184	; 0xb8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	2288      	movs	r2, #136	; 0x88
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fc1d 	bl	8006104 <memset>
  if(huart->Instance==USART1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a42      	ldr	r2, [pc, #264]	; (80019d8 <HAL_UART_MspInit+0x134>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d13d      	bne.n	8001950 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018d8:	2300      	movs	r3, #0
 80018da:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fed1 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018ec:	f7ff ff0c 	bl	8001708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f0:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <HAL_UART_MspInit+0x138>)
 80018f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f4:	4a39      	ldr	r2, [pc, #228]	; (80019dc <HAL_UART_MspInit+0x138>)
 80018f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fa:	6613      	str	r3, [r2, #96]	; 0x60
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_UART_MspInit+0x138>)
 80018fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <HAL_UART_MspInit+0x138>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	4a33      	ldr	r2, [pc, #204]	; (80019dc <HAL_UART_MspInit+0x138>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_UART_MspInit+0x138>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001920:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001924:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800193a:	2307      	movs	r3, #7
 800193c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001944:	4619      	mov	r1, r3
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f001 fe65 	bl	8003618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800194e:	e03f      	b.n	80019d0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <HAL_UART_MspInit+0x13c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d13a      	bne.n	80019d0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800195a:	2304      	movs	r3, #4
 800195c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800195e:	2300      	movs	r3, #0
 8001960:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fe8e 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001972:	f7ff fec9 	bl	8001708 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_UART_MspInit+0x138>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	4a18      	ldr	r2, [pc, #96]	; (80019dc <HAL_UART_MspInit+0x138>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_UART_MspInit+0x138>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_UART_MspInit+0x138>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <HAL_UART_MspInit+0x138>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_UART_MspInit+0x138>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019a6:	2310      	movs	r3, #16
 80019a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ac:	2312      	movs	r3, #18
 80019ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019be:	2307      	movs	r3, #7
 80019c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <HAL_UART_MspInit+0x140>)
 80019cc:	f001 fe24 	bl	8003618 <HAL_GPIO_Init>
}
 80019d0:	bf00      	nop
 80019d2:	37b8      	adds	r7, #184	; 0xb8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40013800 	.word	0x40013800
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40004800 	.word	0x40004800
 80019e4:	48000800 	.word	0x48000800

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f962 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <RTC_WKUP_IRQHandler+0x10>)
 8001a42:	f003 fc93 	bl	800536c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000025c 	.word	0x2000025c

08001a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_kill>:

int _kill(int pid, int sig)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a6a:	f004 fb21 	bl	80060b0 <__errno>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2216      	movs	r2, #22
 8001a72:	601a      	str	r2, [r3, #0]
	return -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_exit>:

void _exit (int status)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ffe7 	bl	8001a60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a92:	e7fe      	b.n	8001a92 <_exit+0x12>

08001a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
	}

return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e009      	b.n	8001af4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f9fb 	bl	8000ee4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf1      	blt.n	8001ae0 <_write+0x12>
	}
	return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_close>:

int _close(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_isatty>:

int _isatty(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	return 1;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <_sbrk+0x5c>)
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <_sbrk+0x60>)
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <_sbrk+0x64>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <_sbrk+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d207      	bcs.n	8001bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba0:	f004 fa86 	bl	80060b0 <__errno>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e009      	b.n	8001bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <_sbrk+0x64>)
 8001bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20018000 	.word	0x20018000
 8001bd0:	00000400 	.word	0x00000400
 8001bd4:	20000388 	.word	0x20000388
 8001bd8:	200003a0 	.word	0x200003a0

08001bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <SystemInit+0x20>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <SystemInit+0x20>)
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff ffea 	bl	8001bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	; (8001c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <LoopForever+0xe>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	; (8001c4c <LoopForever+0x16>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f004 fa45 	bl	80060bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7ff fb27 	bl	8001284 <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c44:	08009164 	.word	0x08009164
  ldr r2, =_sbss
 8001c48:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c4c:	200003a0 	.word	0x200003a0

08001c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_2_IRQHandler>

08001c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f001 fc99 	bl	8003594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c62:	200f      	movs	r0, #15
 8001c64:	f000 f80e 	bl	8001c84 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	e001      	b.n	8001c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c74:	f7ff fd4e 	bl	8001714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_InitTick+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_InitTick+0x70>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_InitTick+0x6c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fca5 	bl	80035fe <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d809      	bhi.n	8001cd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f001 fc6f 	bl	80035aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_InitTick+0x74>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e007      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e004      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e001      	b.n	8001ce4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	2000038c 	.word	0x2000038c

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	2000038c 	.word	0x2000038c

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000008 	.word	0x20000008

08001d84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3360      	adds	r3, #96	; 0x60
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <LL_ADC_SetOffset+0x44>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	03fff000 	.word	0x03fff000

08001e34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3360      	adds	r3, #96	; 0x60
 8001e42:	461a      	mov	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3360      	adds	r3, #96	; 0x60
 8001e70:	461a      	mov	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3330      	adds	r3, #48	; 0x30
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	4413      	add	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	211f      	movs	r1, #31
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	401a      	ands	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	0e9b      	lsrs	r3, r3, #26
 8001ef4:	f003 011f 	and.w	r1, r3, #31
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	431a      	orrs	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f08:	bf00      	nop
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3314      	adds	r3, #20
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	0e5b      	lsrs	r3, r3, #25
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	0d1b      	lsrs	r3, r3, #20
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2107      	movs	r1, #7
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	401a      	ands	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	0d1b      	lsrs	r3, r3, #20
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f5e:	bf00      	nop
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0318 	and.w	r3, r3, #24
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f90:	40d9      	lsrs	r1, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	400b      	ands	r3, r1
 8001f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	0007ffff 	.word	0x0007ffff

08001fb4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ffc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6093      	str	r3, [r2, #8]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002024:	d101      	bne.n	800202a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800204c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002074:	d101      	bne.n	800207a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c4:	f043 0202 	orr.w	r2, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <LL_ADC_IsEnabled+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_ADC_IsEnabled+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d101      	bne.n	8002116 <LL_ADC_IsDisableOngoing+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_IsDisableOngoing+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002138:	f043 0204 	orr.w	r2, r3, #4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b04      	cmp	r3, #4
 800215e:	d101      	bne.n	8002164 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b08      	cmp	r3, #8
 8002184:	d101      	bne.n	800218a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e136      	b.n	8002420 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff facb 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff19 	bl	8002010 <LL_ADC_IsDeepPowerDownEnabled>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff feff 	bl	8001fec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff34 	bl	8002060 <LL_ADC_IsInternalRegulatorEnabled>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d115      	bne.n	800222a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff18 	bl	8002038 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002208:	4b87      	ldr	r3, [pc, #540]	; (8002428 <HAL_ADC_Init+0x290>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	4a87      	ldr	r2, [pc, #540]	; (800242c <HAL_ADC_Init+0x294>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	3301      	adds	r3, #1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800221c:	e002      	b.n	8002224 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3b01      	subs	r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f9      	bne.n	800221e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff16 	bl	8002060 <LL_ADC_IsInternalRegulatorEnabled>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10d      	bne.n	8002256 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f043 0210 	orr.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	f043 0201 	orr.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff ff76 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 8002260:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	f040 80cf 	bne.w	800240e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 80cb 	bne.w	800240e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002280:	f043 0202 	orr.w	r2, r3, #2
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff23 	bl	80020d8 <LL_ADC_IsEnabled>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d115      	bne.n	80022c4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002298:	4865      	ldr	r0, [pc, #404]	; (8002430 <HAL_ADC_Init+0x298>)
 800229a:	f7ff ff1d 	bl	80020d8 <LL_ADC_IsEnabled>
 800229e:	4604      	mov	r4, r0
 80022a0:	4864      	ldr	r0, [pc, #400]	; (8002434 <HAL_ADC_Init+0x29c>)
 80022a2:	f7ff ff19 	bl	80020d8 <LL_ADC_IsEnabled>
 80022a6:	4603      	mov	r3, r0
 80022a8:	431c      	orrs	r4, r3
 80022aa:	4863      	ldr	r0, [pc, #396]	; (8002438 <HAL_ADC_Init+0x2a0>)
 80022ac:	f7ff ff14 	bl	80020d8 <LL_ADC_IsEnabled>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4323      	orrs	r3, r4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4619      	mov	r1, r3
 80022be:	485f      	ldr	r0, [pc, #380]	; (800243c <HAL_ADC_Init+0x2a4>)
 80022c0:	f7ff fd60 	bl	8001d84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7e5b      	ldrb	r3, [r3, #25]
 80022c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d106      	bne.n	8002300 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	3b01      	subs	r3, #1
 80022f8:	045b      	lsls	r3, r3, #17
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_ADC_Init+0x2a8>)
 8002324:	4013      	ands	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	430b      	orrs	r3, r1
 800232e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff09 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 800233a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff16 	bl	8002172 <LL_ADC_INJ_IsConversionOngoing>
 8002346:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d13d      	bne.n	80023ca <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d13a      	bne.n	80023ca <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002358:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002360:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002370:	f023 0302 	bic.w	r3, r3, #2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	69b9      	ldr	r1, [r7, #24]
 800237a:	430b      	orrs	r3, r1
 800237c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002384:	2b01      	cmp	r3, #1
 8002386:	d118      	bne.n	80023ba <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002392:	f023 0304 	bic.w	r3, r3, #4
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023a4:	4311      	orrs	r1, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023aa:	430a      	orrs	r2, r1
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	611a      	str	r2, [r3, #16]
 80023b8:	e007      	b.n	80023ca <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10c      	bne.n	80023ec <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f023 010f 	bic.w	r1, r3, #15
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	1e5a      	subs	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
 80023ea:	e007      	b.n	80023fc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 020f 	bic.w	r2, r2, #15
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	f023 0303 	bic.w	r3, r3, #3
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
 800240c:	e007      	b.n	800241e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f043 0210 	orr.w	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800241e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3724      	adds	r7, #36	; 0x24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd90      	pop	{r4, r7, pc}
 8002428:	20000000 	.word	0x20000000
 800242c:	053e2d63 	.word	0x053e2d63
 8002430:	50040000 	.word	0x50040000
 8002434:	50040100 	.word	0x50040100
 8002438:	50040200 	.word	0x50040200
 800243c:	50040300 	.word	0x50040300
 8002440:	fff0c007 	.word	0xfff0c007

08002444 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800244c:	4857      	ldr	r0, [pc, #348]	; (80025ac <HAL_ADC_Start+0x168>)
 800244e:	f7ff fdb1 	bl	8001fb4 <LL_ADC_GetMultimode>
 8002452:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fe77 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 809c 	bne.w	800259e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_ADC_Start+0x30>
 8002470:	2302      	movs	r3, #2
 8002472:	e097      	b.n	80025a4 <HAL_ADC_Start+0x160>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fd71 	bl	8002f64 <ADC_Enable>
 8002482:	4603      	mov	r3, r0
 8002484:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 8083 	bne.w	8002594 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a42      	ldr	r2, [pc, #264]	; (80025b0 <HAL_ADC_Start+0x16c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d002      	beq.n	80024b2 <HAL_ADC_Start+0x6e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	e000      	b.n	80024b4 <HAL_ADC_Start+0x70>
 80024b2:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <HAL_ADC_Start+0x170>)
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d002      	beq.n	80024c2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024da:	d106      	bne.n	80024ea <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	f023 0206 	bic.w	r2, r3, #6
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	659a      	str	r2, [r3, #88]	; 0x58
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	221c      	movs	r2, #28
 80024f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2a      	ldr	r2, [pc, #168]	; (80025b0 <HAL_ADC_Start+0x16c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d002      	beq.n	8002510 <HAL_ADC_Start+0xcc>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	e000      	b.n	8002512 <HAL_ADC_Start+0xce>
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_ADC_Start+0x170>)
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	4293      	cmp	r3, r2
 8002518:	d008      	beq.n	800252c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d002      	beq.n	800252c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b09      	cmp	r3, #9
 800252a:	d114      	bne.n	8002556 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002542:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fde8 	bl	8002124 <LL_ADC_REG_StartConversion>
 8002554:	e025      	b.n	80025a2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <HAL_ADC_Start+0x16c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d002      	beq.n	8002572 <HAL_ADC_Start+0x12e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	e000      	b.n	8002574 <HAL_ADC_Start+0x130>
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_ADC_Start+0x170>)
 8002574:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00f      	beq.n	80025a2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800258a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
 8002592:	e006      	b.n	80025a2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800259c:	e001      	b.n	80025a2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800259e:	2302      	movs	r3, #2
 80025a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	50040300 	.word	0x50040300
 80025b0:	50040100 	.word	0x50040100
 80025b4:	50040000 	.word	0x50040000

080025b8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c2:	4866      	ldr	r0, [pc, #408]	; (800275c <HAL_ADC_PollForConversion+0x1a4>)
 80025c4:	f7ff fcf6 	bl	8001fb4 <LL_ADC_GetMultimode>
 80025c8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d102      	bne.n	80025d8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025d2:	2308      	movs	r3, #8
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e02a      	b.n	800262e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d002      	beq.n	80025ea <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b09      	cmp	r3, #9
 80025e8:	d111      	bne.n	800260e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f043 0220 	orr.w	r2, r3, #32
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0a4      	b.n	8002752 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002608:	2304      	movs	r3, #4
 800260a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800260c:	e00f      	b.n	800262e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800260e:	4853      	ldr	r0, [pc, #332]	; (800275c <HAL_ADC_PollForConversion+0x1a4>)
 8002610:	f7ff fcde 	bl	8001fd0 <LL_ADC_GetMultiDMATransfer>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e093      	b.n	8002752 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800262a:	2304      	movs	r3, #4
 800262c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800262e:	f7ff fb79 	bl	8001d24 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002634:	e021      	b.n	800267a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d01d      	beq.n	800267a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800263e:	f7ff fb71 	bl	8001d24 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d302      	bcc.n	8002654 <HAL_ADC_PollForConversion+0x9c>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d112      	bne.n	800267a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10b      	bne.n	800267a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f043 0204 	orr.w	r2, r3, #4
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e06b      	b.n	8002752 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0d6      	beq.n	8002636 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fbfc 	bl	8001e96 <LL_ADC_REG_IsTriggerSourceSWStart>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01c      	beq.n	80026de <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7e5b      	ldrb	r3, [r3, #25]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d118      	bne.n	80026de <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d111      	bne.n	80026de <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	f043 0201 	orr.w	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <HAL_ADC_PollForConversion+0x1a8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d002      	beq.n	80026ee <HAL_ADC_PollForConversion+0x136>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e000      	b.n	80026f0 <HAL_ADC_PollForConversion+0x138>
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_ADC_PollForConversion+0x1ac>)
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d008      	beq.n	800270a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d002      	beq.n	800270a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b09      	cmp	r3, #9
 8002708:	d104      	bne.n	8002714 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	e00c      	b.n	800272e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a11      	ldr	r2, [pc, #68]	; (8002760 <HAL_ADC_PollForConversion+0x1a8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d002      	beq.n	8002724 <HAL_ADC_PollForConversion+0x16c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	e000      	b.n	8002726 <HAL_ADC_PollForConversion+0x16e>
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_ADC_PollForConversion+0x1ac>)
 8002726:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d104      	bne.n	800273e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2208      	movs	r2, #8
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e008      	b.n	8002750 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d103      	bne.n	8002750 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	220c      	movs	r2, #12
 800274e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	50040300 	.word	0x50040300
 8002760:	50040100 	.word	0x50040100
 8002764:	50040000 	.word	0x50040000

08002768 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b0b6      	sub	sp, #216	; 0xd8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x22>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e3c7      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x7b2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fcca 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 83a8 	bne.w	8002f10 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d824      	bhi.n	8002812 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	3b02      	subs	r3, #2
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d81b      	bhi.n	800280a <HAL_ADC_ConfigChannel+0x86>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <HAL_ADC_ConfigChannel+0x54>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027f1 	.word	0x080027f1
 80027e0:	080027f9 	.word	0x080027f9
 80027e4:	08002801 	.word	0x08002801
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	220c      	movs	r2, #12
 80027ec:	605a      	str	r2, [r3, #4]
          break;
 80027ee:	e011      	b.n	8002814 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2212      	movs	r2, #18
 80027f4:	605a      	str	r2, [r3, #4]
          break;
 80027f6:	e00d      	b.n	8002814 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2218      	movs	r2, #24
 80027fc:	605a      	str	r2, [r3, #4]
          break;
 80027fe:	e009      	b.n	8002814 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002806:	605a      	str	r2, [r3, #4]
          break;
 8002808:	e004      	b.n	8002814 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2206      	movs	r2, #6
 800280e:	605a      	str	r2, [r3, #4]
          break;
 8002810:	e000      	b.n	8002814 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002812:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	f7ff fb4b 	bl	8001ebc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fc8e 	bl	800214c <LL_ADC_REG_IsConversionOngoing>
 8002830:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fc9a 	bl	8002172 <LL_ADC_INJ_IsConversionOngoing>
 800283e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002842:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 81a6 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800284c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 81a1 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	461a      	mov	r2, r3
 8002864:	f7ff fb56 	bl	8001f14 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	08db      	lsrs	r3, r3, #3
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d00a      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6919      	ldr	r1, [r3, #16]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800289a:	f7ff faa7 	bl	8001dec <LL_ADC_SetOffset>
 800289e:	e17b      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fac4 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10a      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x148>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fab9 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	f003 021f 	and.w	r2, r3, #31
 80028ca:	e01e      	b.n	800290a <HAL_ADC_ConfigChannel+0x186>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff faae 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e004      	b.n	8002908 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80028fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d105      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x19e>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	e018      	b.n	8002954 <HAL_ADC_ConfigChannel+0x1d0>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800293a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800293e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002946:	2320      	movs	r3, #32
 8002948:	e004      	b.n	8002954 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800294a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002954:	429a      	cmp	r2, r3
 8002956:	d106      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fa7d 	bl	8001e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2101      	movs	r1, #1
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fa61 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x20e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fa56 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002988:	4603      	mov	r3, r0
 800298a:	0e9b      	lsrs	r3, r3, #26
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	e01e      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x24c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2101      	movs	r1, #1
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fa4b 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80029b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80029b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80029c0:	2320      	movs	r3, #32
 80029c2:	e004      	b.n	80029ce <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80029c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x264>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	e018      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x296>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	e004      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d106      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	2101      	movs	r1, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fa1a 	bl	8001e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2102      	movs	r1, #2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f9fe 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x2d4>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2102      	movs	r1, #2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f9f3 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	f003 021f 	and.w	r2, r3, #31
 8002a56:	e01e      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x312>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f9e8 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002a86:	2320      	movs	r3, #32
 8002a88:	e004      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x32a>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	e016      	b.n	8002adc <HAL_ADC_ConfigChannel+0x358>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e004      	b.n	8002adc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002ad2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d106      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f9b9 	bl	8001e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2103      	movs	r1, #3
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff f99d 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x396>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2103      	movs	r1, #3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff f992 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	0e9b      	lsrs	r3, r3, #26
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	e017      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x3c6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2103      	movs	r1, #3
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff f987 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b34:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e003      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x3de>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0e9b      	lsrs	r3, r3, #26
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	e011      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x402>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b72:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	e003      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d106      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2103      	movs	r1, #3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f964 	bl	8001e60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fa9b 	bl	80020d8 <LL_ADC_IsEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 813f 	bne.w	8002e28 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f7ff f9d8 	bl	8001f6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a8e      	ldr	r2, [pc, #568]	; (8002dfc <HAL_ADC_ConfigChannel+0x678>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	f040 8130 	bne.w	8002e28 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x46c>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2b09      	cmp	r3, #9
 8002be6:	bf94      	ite	ls
 8002be8:	2301      	movls	r3, #1
 8002bea:	2300      	movhi	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e019      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x4a0>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c00:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2b09      	cmp	r3, #9
 8002c1c:	bf94      	ite	ls
 8002c1e:	2301      	movls	r3, #1
 8002c20:	2300      	movhi	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d079      	beq.n	8002d1c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x4c0>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	069b      	lsls	r3, r3, #26
 8002c3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c42:	e015      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x4ec>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c54:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	e003      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	3301      	adds	r3, #1
 8002c6a:	069b      	lsls	r3, r3, #26
 8002c6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x50c>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	3301      	adds	r3, #1
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	e017      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x53c>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e003      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	ea42 0103 	orr.w	r1, r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x562>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0e9b      	lsrs	r3, r3, #26
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	051b      	lsls	r3, r3, #20
 8002ce4:	e018      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x594>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002cfe:	2320      	movs	r3, #32
 8002d00:	e003      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f003 021f 	and.w	r2, r3, #31
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	e080      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d107      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x5b4>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	3301      	adds	r3, #1
 8002d30:	069b      	lsls	r3, r3, #26
 8002d32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d36:	e015      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x5e0>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002d50:	2320      	movs	r3, #32
 8002d52:	e003      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	069b      	lsls	r3, r3, #26
 8002d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x600>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	e017      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x630>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	61fb      	str	r3, [r7, #28]
  return result;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e003      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	ea42 0103 	orr.w	r1, r2, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10d      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x65c>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0e9b      	lsrs	r3, r3, #26
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b1e      	subs	r3, #30
 8002dd8:	051b      	lsls	r3, r3, #20
 8002dda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dde:	e01d      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x698>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	613b      	str	r3, [r7, #16]
  return result;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	e005      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x684>
 8002dfc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f003 021f 	and.w	r2, r3, #31
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	3b1e      	subs	r3, #30
 8002e16:	051b      	lsls	r3, r3, #20
 8002e18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	6892      	ldr	r2, [r2, #8]
 8002e22:	4619      	mov	r1, r3
 8002e24:	f7ff f876 	bl	8001f14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b44      	ldr	r3, [pc, #272]	; (8002f40 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d07a      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e34:	4843      	ldr	r0, [pc, #268]	; (8002f44 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e36:	f7fe ffcb 	bl	8001dd0 <LL_ADC_GetCommonPathInternalCh>
 8002e3a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a41      	ldr	r2, [pc, #260]	; (8002f48 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d12c      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d126      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a3c      	ldr	r2, [pc, #240]	; (8002f4c <HAL_ADC_ConfigChannel+0x7c8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_ADC_ConfigChannel+0x6e4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3b      	ldr	r2, [pc, #236]	; (8002f50 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d15d      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e70:	4619      	mov	r1, r3
 8002e72:	4834      	ldr	r0, [pc, #208]	; (8002f44 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e74:	f7fe ff99 	bl	8001daa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e78:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	4a36      	ldr	r2, [pc, #216]	; (8002f58 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e92:	e002      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f9      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ea0:	e040      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2d      	ldr	r2, [pc, #180]	; (8002f5c <HAL_ADC_ConfigChannel+0x7d8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d118      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x75a>
 8002eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d112      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a23      	ldr	r2, [pc, #140]	; (8002f4c <HAL_ADC_ConfigChannel+0x7c8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x748>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d12d      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	481b      	ldr	r0, [pc, #108]	; (8002f44 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ed8:	f7fe ff67 	bl	8001daa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002edc:	e024      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1f      	ldr	r2, [pc, #124]	; (8002f60 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d120      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d11a      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <HAL_ADC_ConfigChannel+0x7c8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d115      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002efe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f06:	4619      	mov	r1, r3
 8002f08:	480e      	ldr	r0, [pc, #56]	; (8002f44 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f0a:	f7fe ff4e 	bl	8001daa <LL_ADC_SetCommonPathInternalCh>
 8002f0e:	e00c      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f22:	e002      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f32:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	37d8      	adds	r7, #216	; 0xd8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	80080000 	.word	0x80080000
 8002f44:	50040300 	.word	0x50040300
 8002f48:	c7520000 	.word	0xc7520000
 8002f4c:	50040000 	.word	0x50040000
 8002f50:	50040200 	.word	0x50040200
 8002f54:	20000000 	.word	0x20000000
 8002f58:	053e2d63 	.word	0x053e2d63
 8002f5c:	cb840000 	.word	0xcb840000
 8002f60:	80000001 	.word	0x80000001

08002f64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff f8af 	bl	80020d8 <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d169      	bne.n	8003054 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <ADC_Enable+0xfc>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e055      	b.n	8003056 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff f86a 	bl	8002088 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fb4:	482b      	ldr	r0, [pc, #172]	; (8003064 <ADC_Enable+0x100>)
 8002fb6:	f7fe ff0b 	bl	8001dd0 <LL_ADC_GetCommonPathInternalCh>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <ADC_Enable+0x104>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	099b      	lsrs	r3, r3, #6
 8002fca:	4a28      	ldr	r2, [pc, #160]	; (800306c <ADC_Enable+0x108>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002fde:	e002      	b.n	8002fe6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f9      	bne.n	8002fe0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fec:	f7fe fe9a 	bl	8001d24 <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ff2:	e028      	b.n	8003046 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff f86d 	bl	80020d8 <LL_ADC_IsEnabled>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff f83d 	bl	8002088 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800300e:	f7fe fe89 	bl	8001d24 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d914      	bls.n	8003046 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d00d      	beq.n	8003046 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	f043 0210 	orr.w	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e007      	b.n	8003056 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d1cf      	bne.n	8002ff4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	8000003f 	.word	0x8000003f
 8003064:	50040300 	.word	0x50040300
 8003068:	20000000 	.word	0x20000000
 800306c:	053e2d63 	.word	0x053e2d63

08003070 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff f83e 	bl	80020fe <LL_ADC_IsDisableOngoing>
 8003082:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f825 	bl	80020d8 <LL_ADC_IsEnabled>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d047      	beq.n	8003124 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d144      	bne.n	8003124 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 030d 	and.w	r3, r3, #13
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d10c      	bne.n	80030c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe ffff 	bl	80020b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2203      	movs	r2, #3
 80030b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030ba:	f7fe fe33 	bl	8001d24 <HAL_GetTick>
 80030be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030c0:	e029      	b.n	8003116 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f043 0210 	orr.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e023      	b.n	8003126 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030de:	f7fe fe21 	bl	8001d24 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d914      	bls.n	8003116 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f043 0210 	orr.w	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e007      	b.n	8003126 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1dc      	bne.n	80030de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <LL_ADC_IsEnabled>:
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <LL_ADC_IsEnabled+0x18>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <LL_ADC_IsEnabled+0x1a>
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_ADC_StartCalibration>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003166:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003170:	4313      	orrs	r3, r2
 8003172:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	609a      	str	r2, [r3, #8]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_ADC_IsCalibrationOnGoing>:
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800319a:	d101      	bne.n	80031a0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <LL_ADC_REG_IsConversionOngoing>:
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d101      	bne.n	80031c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e04d      	b.n	800328c <HAL_ADCEx_Calibration_Start+0xb8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff39 	bl	8003070 <ADC_Disable>
 80031fe:	4603      	mov	r3, r0
 8003200:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d136      	bne.n	8003276 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003210:	f023 0302 	bic.w	r3, r3, #2
 8003214:	f043 0202 	orr.w	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6839      	ldr	r1, [r7, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ff96 	bl	8003154 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003228:	e014      	b.n	8003254 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	3301      	adds	r3, #1
 800322e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003236:	d30d      	bcc.n	8003254 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f023 0312 	bic.w	r3, r3, #18
 8003240:	f043 0210 	orr.w	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e01b      	b.n	800328c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff94 	bl	8003186 <LL_ADC_IsCalibrationOnGoing>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e2      	bne.n	800322a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f023 0303 	bic.w	r3, r3, #3
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
 8003274:	e005      	b.n	8003282 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f043 0210 	orr.w	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b09f      	sub	sp, #124	; 0x7c
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e093      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032ba:	2300      	movs	r3, #0
 80032bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032be:	2300      	movs	r3, #0
 80032c0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a47      	ldr	r2, [pc, #284]	; (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d102      	bne.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032cc:	4b46      	ldr	r3, [pc, #280]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	e001      	b.n	80032d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e072      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ff59 	bl	80031ae <LL_ADC_REG_IsConversionOngoing>
 80032fc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff ff53 	bl	80031ae <LL_ADC_REG_IsConversionOngoing>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d154      	bne.n	80033b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800330e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003310:	2b00      	cmp	r3, #0
 8003312:	d151      	bne.n	80033b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003316:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d02c      	beq.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003332:	035b      	lsls	r3, r3, #13
 8003334:	430b      	orrs	r3, r1
 8003336:	431a      	orrs	r2, r3
 8003338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800333c:	4829      	ldr	r0, [pc, #164]	; (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800333e:	f7ff fef6 	bl	800312e <LL_ADC_IsEnabled>
 8003342:	4604      	mov	r4, r0
 8003344:	4828      	ldr	r0, [pc, #160]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003346:	f7ff fef2 	bl	800312e <LL_ADC_IsEnabled>
 800334a:	4603      	mov	r3, r0
 800334c:	431c      	orrs	r4, r3
 800334e:	4828      	ldr	r0, [pc, #160]	; (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003350:	f7ff feed 	bl	800312e <LL_ADC_IsEnabled>
 8003354:	4603      	mov	r3, r0
 8003356:	4323      	orrs	r3, r4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d137      	bne.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800335c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003364:	f023 030f 	bic.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	6811      	ldr	r1, [r2, #0]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	6892      	ldr	r2, [r2, #8]
 8003370:	430a      	orrs	r2, r1
 8003372:	431a      	orrs	r2, r3
 8003374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003376:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003378:	e028      	b.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800337a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003384:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003386:	4817      	ldr	r0, [pc, #92]	; (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003388:	f7ff fed1 	bl	800312e <LL_ADC_IsEnabled>
 800338c:	4604      	mov	r4, r0
 800338e:	4816      	ldr	r0, [pc, #88]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003390:	f7ff fecd 	bl	800312e <LL_ADC_IsEnabled>
 8003394:	4603      	mov	r3, r0
 8003396:	431c      	orrs	r4, r3
 8003398:	4815      	ldr	r0, [pc, #84]	; (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800339a:	f7ff fec8 	bl	800312e <LL_ADC_IsEnabled>
 800339e:	4603      	mov	r3, r0
 80033a0:	4323      	orrs	r3, r4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d112      	bne.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033ae:	f023 030f 	bic.w	r3, r3, #15
 80033b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033b6:	e009      	b.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033ca:	e000      	b.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80033da:	4618      	mov	r0, r3
 80033dc:	377c      	adds	r7, #124	; 0x7c
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	bf00      	nop
 80033e4:	50040000 	.word	0x50040000
 80033e8:	50040100 	.word	0x50040100
 80033ec:	50040300 	.word	0x50040300
 80033f0:	50040200 	.word	0x50040200

080033f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800341c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003426:	4a04      	ldr	r2, [pc, #16]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	60d3      	str	r3, [r2, #12]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <__NVIC_EnableIRQ+0x38>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003560:	d301      	bcc.n	8003566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003562:	2301      	movs	r3, #1
 8003564:	e00f      	b.n	8003586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <SysTick_Config+0x40>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356e:	210f      	movs	r1, #15
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	f7ff ff8e 	bl	8003494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <SysTick_Config+0x40>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <SysTick_Config+0x40>)
 8003580:	2207      	movs	r2, #7
 8003582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	e000e010 	.word	0xe000e010

08003594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff29 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035bc:	f7ff ff3e 	bl	800343c <__NVIC_GetPriorityGrouping>
 80035c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f7ff ff8e 	bl	80034e8 <NVIC_EncodePriority>
 80035cc:	4602      	mov	r2, r0
 80035ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff5d 	bl	8003494 <__NVIC_SetPriority>
}
 80035da:	bf00      	nop
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff31 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ffa2 	bl	8003550 <SysTick_Config>
 800360c:	4603      	mov	r3, r0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003626:	e17f      	b.n	8003928 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	2101      	movs	r1, #1
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	4013      	ands	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8171 	beq.w	8003922 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d005      	beq.n	8003658 <HAL_GPIO_Init+0x40>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d130      	bne.n	80036ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800368e:	2201      	movs	r2, #1
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f003 0201 	and.w	r2, r3, #1
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d118      	bne.n	80036f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80036cc:	2201      	movs	r2, #1
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	08db      	lsrs	r3, r3, #3
 80036e2:	f003 0201 	and.w	r2, r3, #1
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	2b03      	cmp	r3, #3
 8003702:	d017      	beq.n	8003734 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	2203      	movs	r2, #3
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d123      	bne.n	8003788 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	08da      	lsrs	r2, r3, #3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3208      	adds	r2, #8
 8003748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	220f      	movs	r2, #15
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	08da      	lsrs	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3208      	adds	r2, #8
 8003782:	6939      	ldr	r1, [r7, #16]
 8003784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0203 	and.w	r2, r3, #3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80ac 	beq.w	8003922 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ca:	4b5f      	ldr	r3, [pc, #380]	; (8003948 <HAL_GPIO_Init+0x330>)
 80037cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ce:	4a5e      	ldr	r2, [pc, #376]	; (8003948 <HAL_GPIO_Init+0x330>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6613      	str	r3, [r2, #96]	; 0x60
 80037d6:	4b5c      	ldr	r3, [pc, #368]	; (8003948 <HAL_GPIO_Init+0x330>)
 80037d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037e2:	4a5a      	ldr	r2, [pc, #360]	; (800394c <HAL_GPIO_Init+0x334>)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	3302      	adds	r3, #2
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	220f      	movs	r2, #15
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4013      	ands	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800380c:	d025      	beq.n	800385a <HAL_GPIO_Init+0x242>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4f      	ldr	r2, [pc, #316]	; (8003950 <HAL_GPIO_Init+0x338>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01f      	beq.n	8003856 <HAL_GPIO_Init+0x23e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4e      	ldr	r2, [pc, #312]	; (8003954 <HAL_GPIO_Init+0x33c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d019      	beq.n	8003852 <HAL_GPIO_Init+0x23a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4d      	ldr	r2, [pc, #308]	; (8003958 <HAL_GPIO_Init+0x340>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_GPIO_Init+0x236>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4c      	ldr	r2, [pc, #304]	; (800395c <HAL_GPIO_Init+0x344>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00d      	beq.n	800384a <HAL_GPIO_Init+0x232>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4b      	ldr	r2, [pc, #300]	; (8003960 <HAL_GPIO_Init+0x348>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d007      	beq.n	8003846 <HAL_GPIO_Init+0x22e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4a      	ldr	r2, [pc, #296]	; (8003964 <HAL_GPIO_Init+0x34c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_GPIO_Init+0x22a>
 800383e:	2306      	movs	r3, #6
 8003840:	e00c      	b.n	800385c <HAL_GPIO_Init+0x244>
 8003842:	2307      	movs	r3, #7
 8003844:	e00a      	b.n	800385c <HAL_GPIO_Init+0x244>
 8003846:	2305      	movs	r3, #5
 8003848:	e008      	b.n	800385c <HAL_GPIO_Init+0x244>
 800384a:	2304      	movs	r3, #4
 800384c:	e006      	b.n	800385c <HAL_GPIO_Init+0x244>
 800384e:	2303      	movs	r3, #3
 8003850:	e004      	b.n	800385c <HAL_GPIO_Init+0x244>
 8003852:	2302      	movs	r3, #2
 8003854:	e002      	b.n	800385c <HAL_GPIO_Init+0x244>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_GPIO_Init+0x244>
 800385a:	2300      	movs	r3, #0
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	f002 0203 	and.w	r2, r2, #3
 8003862:	0092      	lsls	r2, r2, #2
 8003864:	4093      	lsls	r3, r2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800386c:	4937      	ldr	r1, [pc, #220]	; (800394c <HAL_GPIO_Init+0x334>)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	3302      	adds	r3, #2
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800387a:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <HAL_GPIO_Init+0x350>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800389e:	4a32      	ldr	r2, [pc, #200]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038a4:	4b30      	ldr	r3, [pc, #192]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c8:	4a27      	ldr	r2, [pc, #156]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038f2:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	43db      	mvns	r3, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800391c:	4a12      	ldr	r2, [pc, #72]	; (8003968 <HAL_GPIO_Init+0x350>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	3301      	adds	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	f47f ae78 	bne.w	8003628 <HAL_GPIO_Init+0x10>
  }
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40010000 	.word	0x40010000
 8003950:	48000400 	.word	0x48000400
 8003954:	48000800 	.word	0x48000800
 8003958:	48000c00 	.word	0x48000c00
 800395c:	48001000 	.word	0x48001000
 8003960:	48001400 	.word	0x48001400
 8003964:	48001800 	.word	0x48001800
 8003968:	40010400 	.word	0x40010400

0800396c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a04      	ldr	r2, [pc, #16]	; (8003988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40007000 	.word	0x40007000

0800398c <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 0307 	bic.w	r3, r3, #7
 8003998:	4a07      	ldr	r2, [pc, #28]	; (80039b8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800399a:	f043 0303 	orr.w	r3, r3, #3
 800399e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_PWR_EnterSTANDBYMode+0x30>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	4a05      	ldr	r2, [pc, #20]	; (80039bc <HAL_PWR_EnterSTANDBYMode+0x30>)
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80039ac:	bf30      	wfi
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40007000 	.word	0x40007000
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40007000 	.word	0x40007000

080039dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ea:	d130      	bne.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ec:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f8:	d038      	beq.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a02:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2232      	movs	r2, #50	; 0x32
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	0c9b      	lsrs	r3, r3, #18
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a20:	e002      	b.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a34:	d102      	bne.n	8003a3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f2      	bne.n	8003a22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a48:	d110      	bne.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e00f      	b.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5a:	d007      	beq.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a5c:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a64:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	20000000 	.word	0x20000000
 8003a84:	431bde83 	.word	0x431bde83

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e3ca      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9a:	4b97      	ldr	r3, [pc, #604]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa4:	4b94      	ldr	r3, [pc, #592]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80e4 	beq.w	8003c84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4a>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	f040 808b 	bne.w	8003be0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 8087 	bne.w	8003be0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ad2:	4b89      	ldr	r3, [pc, #548]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_RCC_OscConfig+0x62>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e3a2      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	4b82      	ldr	r3, [pc, #520]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <HAL_RCC_OscConfig+0x7c>
 8003afa:	4b7f      	ldr	r3, [pc, #508]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b02:	e005      	b.n	8003b10 <HAL_RCC_OscConfig+0x88>
 8003b04:	4b7c      	ldr	r3, [pc, #496]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d223      	bcs.n	8003b5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fd55 	bl	80045c8 <RCC_SetFlashLatencyFromMSIRange>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e383      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b28:	4b73      	ldr	r3, [pc, #460]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a72      	ldr	r2, [pc, #456]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	f043 0308 	orr.w	r3, r3, #8
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b70      	ldr	r3, [pc, #448]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	496d      	ldr	r1, [pc, #436]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b46:	4b6c      	ldr	r3, [pc, #432]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	4968      	ldr	r1, [pc, #416]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
 8003b5a:	e025      	b.n	8003ba8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b5c:	4b66      	ldr	r3, [pc, #408]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a65      	ldr	r2, [pc, #404]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b62:	f043 0308 	orr.w	r3, r3, #8
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b63      	ldr	r3, [pc, #396]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4960      	ldr	r1, [pc, #384]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b7a:	4b5f      	ldr	r3, [pc, #380]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	495b      	ldr	r1, [pc, #364]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fd15 	bl	80045c8 <RCC_SetFlashLatencyFromMSIRange>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e343      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba8:	f000 fc4a 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b52      	ldr	r3, [pc, #328]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	4950      	ldr	r1, [pc, #320]	; (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc4:	4a4e      	ldr	r2, [pc, #312]	; (8003d00 <HAL_RCC_OscConfig+0x278>)
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bc8:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <HAL_RCC_OscConfig+0x27c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe f859 	bl	8001c84 <HAL_InitTick>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d052      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	e327      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d032      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003be8:	4b43      	ldr	r3, [pc, #268]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a42      	ldr	r2, [pc, #264]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe f896 	bl	8001d24 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bfc:	f7fe f892 	bl	8001d24 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e310      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c0e:	4b3a      	ldr	r3, [pc, #232]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c1a:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a36      	ldr	r2, [pc, #216]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c20:	f043 0308 	orr.w	r3, r3, #8
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4931      	ldr	r1, [pc, #196]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c38:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	492c      	ldr	r1, [pc, #176]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
 8003c4c:	e01a      	b.n	8003c84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c5a:	f7fe f863 	bl	8001d24 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c62:	f7fe f85f 	bl	8001d24 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e2dd      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c74:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x1da>
 8003c80:	e000      	b.n	8003c84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d074      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d005      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x21a>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d10e      	bne.n	8003cba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca2:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d064      	beq.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d160      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e2ba      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x24a>
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	e026      	b.n	8003d20 <HAL_RCC_OscConfig+0x298>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cda:	d115      	bne.n	8003d08 <HAL_RCC_OscConfig+0x280>
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a02      	ldr	r2, [pc, #8]	; (8003cf8 <HAL_RCC_OscConfig+0x270>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e014      	b.n	8003d20 <HAL_RCC_OscConfig+0x298>
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	08008d30 	.word	0x08008d30
 8003d00:	20000000 	.word	0x20000000
 8003d04:	20000004 	.word	0x20000004
 8003d08:	4ba0      	ldr	r3, [pc, #640]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a9f      	ldr	r2, [pc, #636]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	4b9d      	ldr	r3, [pc, #628]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a9c      	ldr	r2, [pc, #624]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d013      	beq.n	8003d50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fd fffc 	bl	8001d24 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fd fff8 	bl	8001d24 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e276      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d42:	4b92      	ldr	r3, [pc, #584]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x2a8>
 8003d4e:	e014      	b.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd ffe8 	bl	8001d24 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fd ffe4 	bl	8001d24 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e262      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d6a:	4b88      	ldr	r3, [pc, #544]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x2d0>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d060      	beq.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x310>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d119      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d116      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d98:	4b7c      	ldr	r3, [pc, #496]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_OscConfig+0x328>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e23f      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b76      	ldr	r3, [pc, #472]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	4973      	ldr	r1, [pc, #460]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc4:	e040      	b.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d023      	beq.n	8003e16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dce:	4b6f      	ldr	r3, [pc, #444]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6e      	ldr	r2, [pc, #440]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7fd ffa3 	bl	8001d24 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fd ff9f 	bl	8001d24 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e21d      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003df4:	4b65      	ldr	r3, [pc, #404]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	495f      	ldr	r1, [pc, #380]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
 8003e14:	e018      	b.n	8003e48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e16:	4b5d      	ldr	r3, [pc, #372]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a5c      	ldr	r2, [pc, #368]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7fd ff7f 	bl	8001d24 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2a:	f7fd ff7b 	bl	8001d24 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e1f9      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e3c:	4b53      	ldr	r3, [pc, #332]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d03c      	beq.n	8003ece <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01c      	beq.n	8003e96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5c:	4b4b      	ldr	r3, [pc, #300]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e62:	4a4a      	ldr	r2, [pc, #296]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fd ff5a 	bl	8001d24 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fd ff56 	bl	8001d24 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e1d4      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e86:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <HAL_RCC_OscConfig+0x3ec>
 8003e94:	e01b      	b.n	8003ece <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e96:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9c:	4a3b      	ldr	r2, [pc, #236]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd ff3d 	bl	8001d24 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eae:	f7fd ff39 	bl	8001d24 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1b7      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ec0:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1ef      	bne.n	8003eae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80a6 	beq.w	8004028 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ee0:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10d      	bne.n	8003f08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	4a26      	ldr	r2, [pc, #152]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f04:	2301      	movs	r3, #1
 8003f06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d118      	bne.n	8003f46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f14:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f20:	f7fd ff00 	bl	8001d24 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7fd fefc 	bl	8001d24 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e17a      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_RCC_OscConfig+0x508>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d108      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4d8>
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f5e:	e029      	b.n	8003fb4 <HAL_RCC_OscConfig+0x52c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d115      	bne.n	8003f94 <HAL_RCC_OscConfig+0x50c>
 8003f68:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f70:	f043 0304 	orr.w	r3, r3, #4
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	4a03      	ldr	r2, [pc, #12]	; (8003f8c <HAL_RCC_OscConfig+0x504>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f88:	e014      	b.n	8003fb4 <HAL_RCC_OscConfig+0x52c>
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
 8003f94:	4b9c      	ldr	r3, [pc, #624]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	4a9b      	ldr	r2, [pc, #620]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fa4:	4b98      	ldr	r3, [pc, #608]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	4a97      	ldr	r2, [pc, #604]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8003fac:	f023 0304 	bic.w	r3, r3, #4
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d016      	beq.n	8003fea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fd feb2 	bl	8001d24 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7fd feae 	bl	8001d24 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e12a      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fda:	4b8b      	ldr	r3, [pc, #556]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0ed      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x53c>
 8003fe8:	e015      	b.n	8004016 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fea:	f7fd fe9b 	bl	8001d24 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff2:	f7fd fe97 	bl	8001d24 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004000:	4293      	cmp	r3, r2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e113      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004008:	4b7f      	ldr	r3, [pc, #508]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1ed      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004016:	7ffb      	ldrb	r3, [r7, #31]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d105      	bne.n	8004028 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401c:	4b7a      	ldr	r3, [pc, #488]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	4a79      	ldr	r2, [pc, #484]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8004022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004026:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80fe 	beq.w	800422e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	2b02      	cmp	r3, #2
 8004038:	f040 80d0 	bne.w	80041dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800403c:	4b72      	ldr	r3, [pc, #456]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0203 	and.w	r2, r3, #3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	429a      	cmp	r2, r3
 800404e:	d130      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	3b01      	subs	r3, #1
 800405c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d127      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d11f      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800407c:	2a07      	cmp	r2, #7
 800407e:	bf14      	ite	ne
 8004080:	2201      	movne	r2, #1
 8004082:	2200      	moveq	r2, #0
 8004084:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004086:	4293      	cmp	r3, r2
 8004088:	d113      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	3b01      	subs	r3, #1
 8004098:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d109      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d06e      	beq.n	8004190 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	d069      	beq.n	800418c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040b8:	4b53      	ldr	r3, [pc, #332]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0ad      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040d4:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a4b      	ldr	r2, [pc, #300]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80040da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040e0:	f7fd fe20 	bl	8001d24 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd fe1c 	bl	8001d24 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e09a      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040fa:	4b43      	ldr	r3, [pc, #268]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004106:	4b40      	ldr	r3, [pc, #256]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	4b40      	ldr	r3, [pc, #256]	; (800420c <HAL_RCC_OscConfig+0x784>)
 800410c:	4013      	ands	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004116:	3a01      	subs	r2, #1
 8004118:	0112      	lsls	r2, r2, #4
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004120:	0212      	lsls	r2, r2, #8
 8004122:	4311      	orrs	r1, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004128:	0852      	lsrs	r2, r2, #1
 800412a:	3a01      	subs	r2, #1
 800412c:	0552      	lsls	r2, r2, #21
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004134:	0852      	lsrs	r2, r2, #1
 8004136:	3a01      	subs	r2, #1
 8004138:	0652      	lsls	r2, r2, #25
 800413a:	4311      	orrs	r1, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004140:	0912      	lsrs	r2, r2, #4
 8004142:	0452      	lsls	r2, r2, #17
 8004144:	430a      	orrs	r2, r1
 8004146:	4930      	ldr	r1, [pc, #192]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8004148:	4313      	orrs	r3, r2
 800414a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800414c:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2d      	ldr	r2, [pc, #180]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004158:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 800415e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004162:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004164:	f7fd fdde 	bl	8001d24 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416c:	f7fd fdda 	bl	8001d24 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e058      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800417e:	4b22      	ldr	r3, [pc, #136]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800418a:	e050      	b.n	800422e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e04f      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d148      	bne.n	800422e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a19      	ldr	r2, [pc, #100]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80041a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041a8:	4b17      	ldr	r3, [pc, #92]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a16      	ldr	r2, [pc, #88]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041b4:	f7fd fdb6 	bl	8001d24 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fd fdb2 	bl	8001d24 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e030      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ce:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x734>
 80041da:	e028      	b.n	800422e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d023      	beq.n	800422a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <HAL_RCC_OscConfig+0x780>)
 80041e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fd fd99 	bl	8001d24 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f4:	e00c      	b.n	8004210 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f6:	f7fd fd95 	bl	8001d24 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d905      	bls.n	8004210 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e013      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
 8004208:	40021000 	.word	0x40021000
 800420c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_RCC_OscConfig+0x7b0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1ec      	bne.n	80041f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_RCC_OscConfig+0x7b0>)
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	4905      	ldr	r1, [pc, #20]	; (8004238 <HAL_RCC_OscConfig+0x7b0>)
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_RCC_OscConfig+0x7b4>)
 8004224:	4013      	ands	r3, r2
 8004226:	60cb      	str	r3, [r1, #12]
 8004228:	e001      	b.n	800422e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	feeefffc 	.word	0xfeeefffc

08004240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0e7      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b75      	ldr	r3, [pc, #468]	; (800442c <HAL_RCC_ClockConfig+0x1ec>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d910      	bls.n	8004284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b72      	ldr	r3, [pc, #456]	; (800442c <HAL_RCC_ClockConfig+0x1ec>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	4970      	ldr	r1, [pc, #448]	; (800442c <HAL_RCC_ClockConfig+0x1ec>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b6e      	ldr	r3, [pc, #440]	; (800442c <HAL_RCC_ClockConfig+0x1ec>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0cf      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	4b66      	ldr	r3, [pc, #408]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429c:	429a      	cmp	r2, r3
 800429e:	d908      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b63      	ldr	r3, [pc, #396]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4960      	ldr	r1, [pc, #384]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d04c      	beq.n	8004358 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c6:	4b5a      	ldr	r3, [pc, #360]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d121      	bne.n	8004316 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0a6      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042de:	4b54      	ldr	r3, [pc, #336]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d115      	bne.n	8004316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e09a      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042f6:	4b4e      	ldr	r3, [pc, #312]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e08e      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004306:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e086      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004316:	4b46      	ldr	r3, [pc, #280]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 0203 	bic.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4943      	ldr	r1, [pc, #268]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004328:	f7fd fcfc 	bl	8001d24 <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	e00a      	b.n	8004346 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004330:	f7fd fcf8 	bl	8001d24 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e06e      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 020c 	and.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	429a      	cmp	r2, r3
 8004356:	d1eb      	bne.n	8004330 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d010      	beq.n	8004386 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	4b31      	ldr	r3, [pc, #196]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004370:	429a      	cmp	r2, r3
 8004372:	d208      	bcs.n	8004386 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	492b      	ldr	r1, [pc, #172]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004386:	4b29      	ldr	r3, [pc, #164]	; (800442c <HAL_RCC_ClockConfig+0x1ec>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d210      	bcs.n	80043b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <HAL_RCC_ClockConfig+0x1ec>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f023 0207 	bic.w	r2, r3, #7
 800439c:	4923      	ldr	r1, [pc, #140]	; (800442c <HAL_RCC_ClockConfig+0x1ec>)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a4:	4b21      	ldr	r3, [pc, #132]	; (800442c <HAL_RCC_ClockConfig+0x1ec>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e036      	b.n	8004424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c2:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	4918      	ldr	r1, [pc, #96]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d009      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043e0:	4b13      	ldr	r3, [pc, #76]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4910      	ldr	r1, [pc, #64]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043f4:	f000 f824 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b0d      	ldr	r3, [pc, #52]	; (8004430 <HAL_RCC_ClockConfig+0x1f0>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	490b      	ldr	r1, [pc, #44]	; (8004434 <HAL_RCC_ClockConfig+0x1f4>)
 8004406:	5ccb      	ldrb	r3, [r1, r3]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	4a09      	ldr	r2, [pc, #36]	; (8004438 <HAL_RCC_ClockConfig+0x1f8>)
 8004412:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_RCC_ClockConfig+0x1fc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fd fc33 	bl	8001c84 <HAL_InitTick>
 800441e:	4603      	mov	r3, r0
 8004420:	72fb      	strb	r3, [r7, #11]

  return status;
 8004422:	7afb      	ldrb	r3, [r7, #11]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40022000 	.word	0x40022000
 8004430:	40021000 	.word	0x40021000
 8004434:	08008d30 	.word	0x08008d30
 8004438:	20000000 	.word	0x20000000
 800443c:	20000004 	.word	0x20000004

08004440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	b089      	sub	sp, #36	; 0x24
 8004444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444e:	4b3e      	ldr	r3, [pc, #248]	; (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004458:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x34>
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d121      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d11e      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004474:	4b34      	ldr	r3, [pc, #208]	; (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004480:	4b31      	ldr	r3, [pc, #196]	; (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	e005      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004490:	4b2d      	ldr	r3, [pc, #180]	; (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800449c:	4a2b      	ldr	r2, [pc, #172]	; (800454c <HAL_RCC_GetSysClockFreq+0x10c>)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10d      	bne.n	80044c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044b0:	e00a      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d102      	bne.n	80044be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044b8:	4b25      	ldr	r3, [pc, #148]	; (8004550 <HAL_RCC_GetSysClockFreq+0x110>)
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	e004      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044c4:	4b23      	ldr	r3, [pc, #140]	; (8004554 <HAL_RCC_GetSysClockFreq+0x114>)
 80044c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d134      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ce:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d003      	beq.n	80044e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d003      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0xac>
 80044e4:	e005      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044e6:	4b1a      	ldr	r3, [pc, #104]	; (8004550 <HAL_RCC_GetSysClockFreq+0x110>)
 80044e8:	617b      	str	r3, [r7, #20]
      break;
 80044ea:	e005      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044ec:	4b19      	ldr	r3, [pc, #100]	; (8004554 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ee:	617b      	str	r3, [r7, #20]
      break;
 80044f0:	e002      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	617b      	str	r3, [r7, #20]
      break;
 80044f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f8:	4b13      	ldr	r3, [pc, #76]	; (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	3301      	adds	r3, #1
 8004504:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	fb03 f202 	mul.w	r2, r3, r2
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <HAL_RCC_GetSysClockFreq+0x108>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	0e5b      	lsrs	r3, r3, #25
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	3301      	adds	r3, #1
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	fbb2 f3f3 	udiv	r3, r2, r3
 8004536:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004538:	69bb      	ldr	r3, [r7, #24]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3724      	adds	r7, #36	; 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	08008d48 	.word	0x08008d48
 8004550:	00f42400 	.word	0x00f42400
 8004554:	007a1200 	.word	0x007a1200

08004558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b03      	ldr	r3, [pc, #12]	; (800456c <HAL_RCC_GetHCLKFreq+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000000 	.word	0x20000000

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004574:	f7ff fff0 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4904      	ldr	r1, [pc, #16]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000
 8004598:	08008d40 	.word	0x08008d40

0800459c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045a0:	f7ff ffda 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0adb      	lsrs	r3, r3, #11
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4904      	ldr	r1, [pc, #16]	; (80045c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	08008d40 	.word	0x08008d40

080045c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045d0:	2300      	movs	r3, #0
 80045d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045e0:	f7ff f9ee 	bl	80039c0 <HAL_PWREx_GetVoltageRange>
 80045e4:	6178      	str	r0, [r7, #20]
 80045e6:	e014      	b.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045e8:	4b25      	ldr	r3, [pc, #148]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	4a24      	ldr	r2, [pc, #144]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f2:	6593      	str	r3, [r2, #88]	; 0x58
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004600:	f7ff f9de 	bl	80039c0 <HAL_PWREx_GetVoltageRange>
 8004604:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460a:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800460c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004610:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004618:	d10b      	bne.n	8004632 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b80      	cmp	r3, #128	; 0x80
 800461e:	d919      	bls.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2ba0      	cmp	r3, #160	; 0xa0
 8004624:	d902      	bls.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004626:	2302      	movs	r3, #2
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	e013      	b.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800462c:	2301      	movs	r3, #1
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	e010      	b.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b80      	cmp	r3, #128	; 0x80
 8004636:	d902      	bls.n	800463e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004638:	2303      	movs	r3, #3
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	e00a      	b.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b80      	cmp	r3, #128	; 0x80
 8004642:	d102      	bne.n	800464a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004644:	2302      	movs	r3, #2
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	e004      	b.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b70      	cmp	r3, #112	; 0x70
 800464e:	d101      	bne.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004650:	2301      	movs	r3, #1
 8004652:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f023 0207 	bic.w	r2, r3, #7
 800465c:	4909      	ldr	r1, [pc, #36]	; (8004684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004664:	4b07      	ldr	r3, [pc, #28]	; (8004684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	429a      	cmp	r2, r3
 8004670:	d001      	beq.n	8004676 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	40022000 	.word	0x40022000

08004688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004690:	2300      	movs	r3, #0
 8004692:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004694:	2300      	movs	r3, #0
 8004696:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d041      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046ac:	d02a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046b2:	d824      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046b8:	d008      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046be:	d81e      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c8:	d010      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046ca:	e018      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046cc:	4b86      	ldr	r3, [pc, #536]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a85      	ldr	r2, [pc, #532]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046d8:	e015      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	2100      	movs	r1, #0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 facb 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ea:	e00c      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3320      	adds	r3, #32
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fbb6 	bl	8004e64 <RCCEx_PLLSAI2_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046fc:	e003      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	74fb      	strb	r3, [r7, #19]
      break;
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800470c:	4b76      	ldr	r3, [pc, #472]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800471a:	4973      	ldr	r1, [pc, #460]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004722:	e001      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d041      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004738:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800473c:	d02a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800473e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004742:	d824      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004748:	d008      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800474a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800474e:	d81e      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004758:	d010      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800475a:	e018      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800475c:	4b62      	ldr	r3, [pc, #392]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	4a61      	ldr	r2, [pc, #388]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004766:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004768:	e015      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	2100      	movs	r1, #0
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fa83 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 8004776:	4603      	mov	r3, r0
 8004778:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800477a:	e00c      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3320      	adds	r3, #32
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fb6e 	bl	8004e64 <RCCEx_PLLSAI2_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800478c:	e003      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	74fb      	strb	r3, [r7, #19]
      break;
 8004792:	e000      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800479c:	4b52      	ldr	r3, [pc, #328]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047aa:	494f      	ldr	r1, [pc, #316]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047b2:	e001      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80a0 	beq.w	8004906 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047ca:	4b47      	ldr	r3, [pc, #284]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e0:	4b41      	ldr	r3, [pc, #260]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	4a40      	ldr	r2, [pc, #256]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ea:	6593      	str	r3, [r2, #88]	; 0x58
 80047ec:	4b3e      	ldr	r3, [pc, #248]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f8:	2301      	movs	r3, #1
 80047fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047fc:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a3a      	ldr	r2, [pc, #232]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004806:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004808:	f7fd fa8c 	bl	8001d24 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800480e:	e009      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004810:	f7fd fa88 	bl	8001d24 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d902      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	74fb      	strb	r3, [r7, #19]
        break;
 8004822:	e005      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004824:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ef      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d15c      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004836:	4b2c      	ldr	r3, [pc, #176]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004840:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01f      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	429a      	cmp	r2, r3
 8004852:	d019      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004860:	4b21      	ldr	r3, [pc, #132]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	4a20      	ldr	r2, [pc, #128]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004870:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d016      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fd fa47 	bl	8001d24 <HAL_GetTick>
 8004896:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004898:	e00b      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fd fa43 	bl	8001d24 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d902      	bls.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	74fb      	strb	r3, [r7, #19]
            break;
 80048b0:	e006      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ec      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d6:	4904      	ldr	r1, [pc, #16]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048de:	e009      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	74bb      	strb	r3, [r7, #18]
 80048e4:	e006      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f4:	7c7b      	ldrb	r3, [r7, #17]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fa:	4b9e      	ldr	r3, [pc, #632]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	4a9d      	ldr	r2, [pc, #628]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004904:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004912:	4b98      	ldr	r3, [pc, #608]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f023 0203 	bic.w	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	4994      	ldr	r1, [pc, #592]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004934:	4b8f      	ldr	r3, [pc, #572]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f023 020c 	bic.w	r2, r3, #12
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004942:	498c      	ldr	r1, [pc, #560]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004956:	4b87      	ldr	r3, [pc, #540]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	4983      	ldr	r1, [pc, #524]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004978:	4b7e      	ldr	r3, [pc, #504]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	497b      	ldr	r1, [pc, #492]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800499a:	4b76      	ldr	r3, [pc, #472]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a8:	4972      	ldr	r1, [pc, #456]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049bc:	4b6d      	ldr	r3, [pc, #436]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	496a      	ldr	r1, [pc, #424]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049de:	4b65      	ldr	r3, [pc, #404]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ec:	4961      	ldr	r1, [pc, #388]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a00:	4b5c      	ldr	r3, [pc, #368]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0e:	4959      	ldr	r1, [pc, #356]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a22:	4b54      	ldr	r3, [pc, #336]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	4950      	ldr	r1, [pc, #320]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a44:	4b4b      	ldr	r3, [pc, #300]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	4948      	ldr	r1, [pc, #288]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a66:	4b43      	ldr	r3, [pc, #268]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	493f      	ldr	r1, [pc, #252]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d028      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a88:	4b3a      	ldr	r3, [pc, #232]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a96:	4937      	ldr	r1, [pc, #220]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]
 8004ab4:	e011      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004abe:	d10c      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f8d8 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d028      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ae6:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	491f      	ldr	r1, [pc, #124]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b04:	d106      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b06:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b10:	60d3      	str	r3, [r2, #12]
 8004b12:	e011      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2101      	movs	r1, #1
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f8a9 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b2e:	7cfb      	ldrb	r3, [r7, #19]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b34:	7cfb      	ldrb	r3, [r7, #19]
 8004b36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d02b      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	4908      	ldr	r1, [pc, #32]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b62:	d109      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a02      	ldr	r2, [pc, #8]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6e:	60d3      	str	r3, [r2, #12]
 8004b70:	e014      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	2101      	movs	r1, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f877 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02f      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ba8:	4b2b      	ldr	r3, [pc, #172]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb6:	4928      	ldr	r1, [pc, #160]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bc6:	d10d      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f854 	bl	8004c7c <RCCEx_PLLSAI1_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d014      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bde:	7cfb      	ldrb	r3, [r7, #19]
 8004be0:	74bb      	strb	r3, [r7, #18]
 8004be2:	e011      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3320      	adds	r3, #32
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f935 	bl	8004e64 <RCCEx_PLLSAI2_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c14:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c22:	490d      	ldr	r1, [pc, #52]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00b      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c36:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c46:	4904      	ldr	r1, [pc, #16]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40021000 	.word	0x40021000

08004c5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c66:	f043 0304 	orr.w	r3, r3, #4
 8004c6a:	6013      	str	r3, [r2, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000

08004c7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c8a:	4b75      	ldr	r3, [pc, #468]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d018      	beq.n	8004cc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c96:	4b72      	ldr	r3, [pc, #456]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 0203 	and.w	r2, r3, #3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d10d      	bne.n	8004cc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
       ||
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cae:	4b6c      	ldr	r3, [pc, #432]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	091b      	lsrs	r3, r3, #4
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
       ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d047      	beq.n	8004d52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
 8004cc6:	e044      	b.n	8004d52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d018      	beq.n	8004d02 <RCCEx_PLLSAI1_Config+0x86>
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d825      	bhi.n	8004d20 <RCCEx_PLLSAI1_Config+0xa4>
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d002      	beq.n	8004cde <RCCEx_PLLSAI1_Config+0x62>
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d009      	beq.n	8004cf0 <RCCEx_PLLSAI1_Config+0x74>
 8004cdc:	e020      	b.n	8004d20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cde:	4b60      	ldr	r3, [pc, #384]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11d      	bne.n	8004d26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cee:	e01a      	b.n	8004d26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cf0:	4b5b      	ldr	r3, [pc, #364]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d116      	bne.n	8004d2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d00:	e013      	b.n	8004d2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d02:	4b57      	ldr	r3, [pc, #348]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d0e:	4b54      	ldr	r3, [pc, #336]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d1e:	e006      	b.n	8004d2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      break;
 8004d24:	e004      	b.n	8004d30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d26:	bf00      	nop
 8004d28:	e002      	b.n	8004d30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e000      	b.n	8004d30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10d      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d36:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6819      	ldr	r1, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	4944      	ldr	r1, [pc, #272]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d17d      	bne.n	8004e54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d58:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a40      	ldr	r2, [pc, #256]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d64:	f7fc ffde 	bl	8001d24 <HAL_GetTick>
 8004d68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d6a:	e009      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d6c:	f7fc ffda 	bl	8001d24 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d902      	bls.n	8004d80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d7e:	e005      	b.n	8004d8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d80:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1ef      	bne.n	8004d6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d160      	bne.n	8004e54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d111      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d98:	4b31      	ldr	r3, [pc, #196]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6892      	ldr	r2, [r2, #8]
 8004da8:	0211      	lsls	r1, r2, #8
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68d2      	ldr	r2, [r2, #12]
 8004dae:	0912      	lsrs	r2, r2, #4
 8004db0:	0452      	lsls	r2, r2, #17
 8004db2:	430a      	orrs	r2, r1
 8004db4:	492a      	ldr	r1, [pc, #168]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	610b      	str	r3, [r1, #16]
 8004dba:	e027      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d112      	bne.n	8004de8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dc2:	4b27      	ldr	r3, [pc, #156]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004dca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6892      	ldr	r2, [r2, #8]
 8004dd2:	0211      	lsls	r1, r2, #8
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6912      	ldr	r2, [r2, #16]
 8004dd8:	0852      	lsrs	r2, r2, #1
 8004dda:	3a01      	subs	r2, #1
 8004ddc:	0552      	lsls	r2, r2, #21
 8004dde:	430a      	orrs	r2, r1
 8004de0:	491f      	ldr	r1, [pc, #124]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	610b      	str	r3, [r1, #16]
 8004de6:	e011      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004de8:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004df0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6892      	ldr	r2, [r2, #8]
 8004df8:	0211      	lsls	r1, r2, #8
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6952      	ldr	r2, [r2, #20]
 8004dfe:	0852      	lsrs	r2, r2, #1
 8004e00:	3a01      	subs	r2, #1
 8004e02:	0652      	lsls	r2, r2, #25
 8004e04:	430a      	orrs	r2, r1
 8004e06:	4916      	ldr	r1, [pc, #88]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e18:	f7fc ff84 	bl	8001d24 <HAL_GetTick>
 8004e1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e1e:	e009      	b.n	8004e34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e20:	f7fc ff80 	bl	8001d24 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d902      	bls.n	8004e34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	73fb      	strb	r3, [r7, #15]
          break;
 8004e32:	e005      	b.n	8004e40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ef      	beq.n	8004e20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	4904      	ldr	r1, [pc, #16]	; (8004e60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000

08004e64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e72:	4b6a      	ldr	r3, [pc, #424]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d018      	beq.n	8004eb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e7e:	4b67      	ldr	r3, [pc, #412]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0203 	and.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d10d      	bne.n	8004eaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
       ||
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e96:	4b61      	ldr	r3, [pc, #388]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d047      	beq.n	8004f3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
 8004eae:	e044      	b.n	8004f3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d018      	beq.n	8004eea <RCCEx_PLLSAI2_Config+0x86>
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d825      	bhi.n	8004f08 <RCCEx_PLLSAI2_Config+0xa4>
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d002      	beq.n	8004ec6 <RCCEx_PLLSAI2_Config+0x62>
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d009      	beq.n	8004ed8 <RCCEx_PLLSAI2_Config+0x74>
 8004ec4:	e020      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ec6:	4b55      	ldr	r3, [pc, #340]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d11d      	bne.n	8004f0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed6:	e01a      	b.n	8004f0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ed8:	4b50      	ldr	r3, [pc, #320]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d116      	bne.n	8004f12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee8:	e013      	b.n	8004f12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eea:	4b4c      	ldr	r3, [pc, #304]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10f      	bne.n	8004f16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ef6:	4b49      	ldr	r3, [pc, #292]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f06:	e006      	b.n	8004f16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f0c:	e004      	b.n	8004f18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e002      	b.n	8004f18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f16:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10d      	bne.n	8004f3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f1e:	4b3f      	ldr	r3, [pc, #252]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6819      	ldr	r1, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	430b      	orrs	r3, r1
 8004f34:	4939      	ldr	r1, [pc, #228]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d167      	bne.n	8005010 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f40:	4b36      	ldr	r3, [pc, #216]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a35      	ldr	r2, [pc, #212]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4c:	f7fc feea 	bl	8001d24 <HAL_GetTick>
 8004f50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f52:	e009      	b.n	8004f68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f54:	f7fc fee6 	bl	8001d24 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d902      	bls.n	8004f68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	73fb      	strb	r3, [r7, #15]
        break;
 8004f66:	e005      	b.n	8004f74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f68:	4b2c      	ldr	r3, [pc, #176]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ef      	bne.n	8004f54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d14a      	bne.n	8005010 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d111      	bne.n	8004fa4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f80:	4b26      	ldr	r3, [pc, #152]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6892      	ldr	r2, [r2, #8]
 8004f90:	0211      	lsls	r1, r2, #8
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68d2      	ldr	r2, [r2, #12]
 8004f96:	0912      	lsrs	r2, r2, #4
 8004f98:	0452      	lsls	r2, r2, #17
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	491f      	ldr	r1, [pc, #124]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	614b      	str	r3, [r1, #20]
 8004fa2:	e011      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fa4:	4b1d      	ldr	r3, [pc, #116]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6892      	ldr	r2, [r2, #8]
 8004fb4:	0211      	lsls	r1, r2, #8
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6912      	ldr	r2, [r2, #16]
 8004fba:	0852      	lsrs	r2, r2, #1
 8004fbc:	3a01      	subs	r2, #1
 8004fbe:	0652      	lsls	r2, r2, #25
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	4916      	ldr	r1, [pc, #88]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fc8:	4b14      	ldr	r3, [pc, #80]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a13      	ldr	r2, [pc, #76]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fc fea6 	bl	8001d24 <HAL_GetTick>
 8004fd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fda:	e009      	b.n	8004ff0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fdc:	f7fc fea2 	bl	8001d24 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d902      	bls.n	8004ff0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	73fb      	strb	r3, [r7, #15]
          break;
 8004fee:	e005      	b.n	8004ffc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ef      	beq.n	8004fdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	4904      	ldr	r1, [pc, #16]	; (800501c <RCCEx_PLLSAI2_Config+0x1b8>)
 800500c:	4313      	orrs	r3, r2
 800500e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000

08005020 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d06c      	beq.n	800510c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fc fbf2 	bl	8001830 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	22ca      	movs	r2, #202	; 0xca
 800505a:	625a      	str	r2, [r3, #36]	; 0x24
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2253      	movs	r2, #83	; 0x53
 8005062:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f87c 	bl	8005162 <RTC_EnterInitMode>
 800506a:	4603      	mov	r3, r0
 800506c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d14b      	bne.n	800510c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005086:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6899      	ldr	r1, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68d2      	ldr	r2, [r2, #12]
 80050ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6919      	ldr	r1, [r3, #16]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	041a      	lsls	r2, r3, #16
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f87f 	bl	80051c8 <RTC_ExitInitMode>
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11b      	bne.n	800510c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0203 	bic.w	r2, r2, #3
 80050e2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	22ff      	movs	r2, #255	; 0xff
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800512c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800512e:	f7fc fdf9 	bl	8001d24 <HAL_GetTick>
 8005132:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005134:	e009      	b.n	800514a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005136:	f7fc fdf5 	bl	8001d24 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005144:	d901      	bls.n	800514a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e007      	b.n	800515a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ee      	beq.n	8005136 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d120      	bne.n	80051be <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f04f 32ff 	mov.w	r2, #4294967295
 8005184:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005186:	f7fc fdcd 	bl	8001d24 <HAL_GetTick>
 800518a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800518c:	e00d      	b.n	80051aa <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800518e:	f7fc fdc9 	bl	8001d24 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519c:	d905      	bls.n	80051aa <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2203      	movs	r2, #3
 80051a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d102      	bne.n	80051be <RTC_EnterInitMode+0x5c>
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d1e7      	bne.n	800518e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80051d4:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <RTC_ExitInitMode+0x78>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4a19      	ldr	r2, [pc, #100]	; (8005240 <RTC_ExitInitMode+0x78>)
 80051da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051de:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80051e0:	4b17      	ldr	r3, [pc, #92]	; (8005240 <RTC_ExitInitMode+0x78>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10c      	bne.n	8005206 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff ff92 	bl	8005116 <HAL_RTC_WaitForSynchro>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01e      	beq.n	8005236 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2203      	movs	r2, #3
 80051fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	73fb      	strb	r3, [r7, #15]
 8005204:	e017      	b.n	8005236 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005206:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <RTC_ExitInitMode+0x78>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	4a0d      	ldr	r2, [pc, #52]	; (8005240 <RTC_ExitInitMode+0x78>)
 800520c:	f023 0320 	bic.w	r3, r3, #32
 8005210:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff ff7f 	bl	8005116 <HAL_RTC_WaitForSynchro>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2203      	movs	r2, #3
 8005222:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <RTC_ExitInitMode+0x78>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	4a04      	ldr	r2, [pc, #16]	; (8005240 <RTC_ExitInitMode+0x78>)
 8005230:	f043 0320 	orr.w	r3, r3, #32
 8005234:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005236:	7bfb      	ldrb	r3, [r7, #15]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40002800 	.word	0x40002800

08005244 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800525a:	2302      	movs	r3, #2
 800525c:	e07f      	b.n	800535e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	22ca      	movs	r2, #202	; 0xca
 8005274:	625a      	str	r2, [r3, #36]	; 0x24
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2253      	movs	r2, #83	; 0x53
 800527c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800529e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d120      	bne.n	80052f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80052ae:	f7fc fd39 	bl	8001d24 <HAL_GetTick>
 80052b2:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80052b4:	e015      	b.n	80052e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052b6:	f7fc fd35 	bl	8001d24 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052c4:	d90d      	bls.n	80052e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	22ff      	movs	r2, #255	; 0xff
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2203      	movs	r2, #3
 80052d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e03d      	b.n	800535e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0e2      	beq.n	80052b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f023 0107 	bic.w	r1, r3, #7
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	430a      	orrs	r2, r1
 800530a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800530c:	4b16      	ldr	r3, [pc, #88]	; (8005368 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a15      	ldr	r2, [pc, #84]	; (8005368 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005316:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005318:	4b13      	ldr	r3, [pc, #76]	; (8005368 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a12      	ldr	r2, [pc, #72]	; (8005368 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800531e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005322:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005332:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005342:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	22ff      	movs	r2, #255	; 0xff
 800534a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40010400 	.word	0x40010400

0800536c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005376:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800537a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00b      	beq.n	80053a2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	b2da      	uxtb	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800539a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f80b 	bl	80053b8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40010400 	.word	0x40010400

080053b8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e040      	b.n	8005460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fc fa58 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	; 0x24
 80053f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9e8 	bl	80057e0 <UART_SetConfig>
 8005410:	4603      	mov	r3, r0
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e022      	b.n	8005460 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fc94 	bl	8005d50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fd1b 	bl	8005e94 <UART_CheckIdleState>
 800545e:	4603      	mov	r3, r0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e048      	b.n	800550c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fc fa0a 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	; 0x24
 8005494:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f99a 	bl	80057e0 <UART_SetConfig>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e02a      	b.n	800550c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fc46 	bl	8005d50 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80054e2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0208 	orr.w	r2, r2, #8
 80054f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fcc5 	bl	8005e94 <UART_CheckIdleState>
 800550a:	4603      	mov	r3, r0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005528:	2b20      	cmp	r3, #32
 800552a:	f040 8082 	bne.w	8005632 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_UART_Transmit+0x26>
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e07a      	b.n	8005634 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_UART_Transmit+0x38>
 8005548:	2302      	movs	r3, #2
 800554a:	e073      	b.n	8005634 <HAL_UART_Transmit+0x120>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2221      	movs	r2, #33	; 0x21
 8005560:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005562:	f7fc fbdf 	bl	8001d24 <HAL_GetTick>
 8005566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	88fa      	ldrh	r2, [r7, #6]
 8005574:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005580:	d108      	bne.n	8005594 <HAL_UART_Transmit+0x80>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d104      	bne.n	8005594 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	e003      	b.n	800559c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005598:	2300      	movs	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80055a4:	e02d      	b.n	8005602 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2200      	movs	r2, #0
 80055ae:	2180      	movs	r1, #128	; 0x80
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fcb8 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e039      	b.n	8005634 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10b      	bne.n	80055de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	881a      	ldrh	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d2:	b292      	uxth	r2, r2
 80055d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	3302      	adds	r3, #2
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	e008      	b.n	80055f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	781a      	ldrb	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	b292      	uxth	r2, r2
 80055e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	3301      	adds	r3, #1
 80055ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1cb      	bne.n	80055a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2200      	movs	r2, #0
 8005616:	2140      	movs	r1, #64	; 0x40
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 fc84 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e005      	b.n	8005634 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	e000      	b.n	8005634 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005632:	2302      	movs	r3, #2
  }
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08a      	sub	sp, #40	; 0x28
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005650:	2b20      	cmp	r3, #32
 8005652:	f040 80bf 	bne.w	80057d4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_UART_Receive+0x26>
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e0b7      	b.n	80057d6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_UART_Receive+0x38>
 8005670:	2302      	movs	r3, #2
 8005672:	e0b0      	b.n	80057d6 <HAL_UART_Receive+0x19a>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2222      	movs	r2, #34	; 0x22
 8005688:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005690:	f7fc fb48 	bl	8001d24 <HAL_GetTick>
 8005694:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	88fa      	ldrh	r2, [r7, #6]
 800569a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	88fa      	ldrh	r2, [r7, #6]
 80056a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ae:	d10e      	bne.n	80056ce <HAL_UART_Receive+0x92>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d105      	bne.n	80056c4 <HAL_UART_Receive+0x88>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056c2:	e02d      	b.n	8005720 <HAL_UART_Receive+0xe4>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	22ff      	movs	r2, #255	; 0xff
 80056c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056cc:	e028      	b.n	8005720 <HAL_UART_Receive+0xe4>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10d      	bne.n	80056f2 <HAL_UART_Receive+0xb6>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d104      	bne.n	80056e8 <HAL_UART_Receive+0xac>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	22ff      	movs	r2, #255	; 0xff
 80056e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056e6:	e01b      	b.n	8005720 <HAL_UART_Receive+0xe4>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	227f      	movs	r2, #127	; 0x7f
 80056ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056f0:	e016      	b.n	8005720 <HAL_UART_Receive+0xe4>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056fa:	d10d      	bne.n	8005718 <HAL_UART_Receive+0xdc>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_UART_Receive+0xd2>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	227f      	movs	r2, #127	; 0x7f
 8005708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800570c:	e008      	b.n	8005720 <HAL_UART_Receive+0xe4>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	223f      	movs	r2, #63	; 0x3f
 8005712:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005716:	e003      	b.n	8005720 <HAL_UART_Receive+0xe4>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005726:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005730:	d108      	bne.n	8005744 <HAL_UART_Receive+0x108>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	e003      	b.n	800574c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005754:	e033      	b.n	80057be <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2200      	movs	r2, #0
 800575e:	2120      	movs	r1, #32
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fbe0 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e032      	b.n	80057d6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10c      	bne.n	8005790 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800577c:	b29a      	uxth	r2, r3
 800577e:	8a7b      	ldrh	r3, [r7, #18]
 8005780:	4013      	ands	r3, r2
 8005782:	b29a      	uxth	r2, r3
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	3302      	adds	r3, #2
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	e00d      	b.n	80057ac <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005796:	b29b      	uxth	r3, r3
 8005798:	b2da      	uxtb	r2, r3
 800579a:	8a7b      	ldrh	r3, [r7, #18]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	4013      	ands	r3, r2
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	3301      	adds	r3, #1
 80057aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1c5      	bne.n	8005756 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e4:	b08a      	sub	sp, #40	; 0x28
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	431a      	orrs	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	431a      	orrs	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	4313      	orrs	r3, r2
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4ba4      	ldr	r3, [pc, #656]	; (8005aa0 <UART_SetConfig+0x2c0>)
 8005810:	4013      	ands	r3, r2
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005818:	430b      	orrs	r3, r1
 800581a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a99      	ldr	r2, [pc, #612]	; (8005aa4 <UART_SetConfig+0x2c4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005848:	4313      	orrs	r3, r2
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	430a      	orrs	r2, r1
 800585e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a90      	ldr	r2, [pc, #576]	; (8005aa8 <UART_SetConfig+0x2c8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d126      	bne.n	80058b8 <UART_SetConfig+0xd8>
 800586a:	4b90      	ldr	r3, [pc, #576]	; (8005aac <UART_SetConfig+0x2cc>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	2b03      	cmp	r3, #3
 8005876:	d81b      	bhi.n	80058b0 <UART_SetConfig+0xd0>
 8005878:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <UART_SetConfig+0xa0>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	08005891 	.word	0x08005891
 8005884:	080058a1 	.word	0x080058a1
 8005888:	08005899 	.word	0x08005899
 800588c:	080058a9 	.word	0x080058a9
 8005890:	2301      	movs	r3, #1
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005896:	e116      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005898:	2302      	movs	r3, #2
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589e:	e112      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 80058a0:	2304      	movs	r3, #4
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a6:	e10e      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 80058a8:	2308      	movs	r3, #8
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ae:	e10a      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 80058b0:	2310      	movs	r3, #16
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b6:	e106      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a7c      	ldr	r2, [pc, #496]	; (8005ab0 <UART_SetConfig+0x2d0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d138      	bne.n	8005934 <UART_SetConfig+0x154>
 80058c2:	4b7a      	ldr	r3, [pc, #488]	; (8005aac <UART_SetConfig+0x2cc>)
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c8:	f003 030c 	and.w	r3, r3, #12
 80058cc:	2b0c      	cmp	r3, #12
 80058ce:	d82d      	bhi.n	800592c <UART_SetConfig+0x14c>
 80058d0:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <UART_SetConfig+0xf8>)
 80058d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d6:	bf00      	nop
 80058d8:	0800590d 	.word	0x0800590d
 80058dc:	0800592d 	.word	0x0800592d
 80058e0:	0800592d 	.word	0x0800592d
 80058e4:	0800592d 	.word	0x0800592d
 80058e8:	0800591d 	.word	0x0800591d
 80058ec:	0800592d 	.word	0x0800592d
 80058f0:	0800592d 	.word	0x0800592d
 80058f4:	0800592d 	.word	0x0800592d
 80058f8:	08005915 	.word	0x08005915
 80058fc:	0800592d 	.word	0x0800592d
 8005900:	0800592d 	.word	0x0800592d
 8005904:	0800592d 	.word	0x0800592d
 8005908:	08005925 	.word	0x08005925
 800590c:	2300      	movs	r3, #0
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005912:	e0d8      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005914:	2302      	movs	r3, #2
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591a:	e0d4      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 800591c:	2304      	movs	r3, #4
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005922:	e0d0      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005924:	2308      	movs	r3, #8
 8005926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800592a:	e0cc      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 800592c:	2310      	movs	r3, #16
 800592e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005932:	e0c8      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a5e      	ldr	r2, [pc, #376]	; (8005ab4 <UART_SetConfig+0x2d4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d125      	bne.n	800598a <UART_SetConfig+0x1aa>
 800593e:	4b5b      	ldr	r3, [pc, #364]	; (8005aac <UART_SetConfig+0x2cc>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005944:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005948:	2b30      	cmp	r3, #48	; 0x30
 800594a:	d016      	beq.n	800597a <UART_SetConfig+0x19a>
 800594c:	2b30      	cmp	r3, #48	; 0x30
 800594e:	d818      	bhi.n	8005982 <UART_SetConfig+0x1a2>
 8005950:	2b20      	cmp	r3, #32
 8005952:	d00a      	beq.n	800596a <UART_SetConfig+0x18a>
 8005954:	2b20      	cmp	r3, #32
 8005956:	d814      	bhi.n	8005982 <UART_SetConfig+0x1a2>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <UART_SetConfig+0x182>
 800595c:	2b10      	cmp	r3, #16
 800595e:	d008      	beq.n	8005972 <UART_SetConfig+0x192>
 8005960:	e00f      	b.n	8005982 <UART_SetConfig+0x1a2>
 8005962:	2300      	movs	r3, #0
 8005964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005968:	e0ad      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 800596a:	2302      	movs	r3, #2
 800596c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005970:	e0a9      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005972:	2304      	movs	r3, #4
 8005974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005978:	e0a5      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 800597a:	2308      	movs	r3, #8
 800597c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005980:	e0a1      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005982:	2310      	movs	r3, #16
 8005984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005988:	e09d      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a4a      	ldr	r2, [pc, #296]	; (8005ab8 <UART_SetConfig+0x2d8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d125      	bne.n	80059e0 <UART_SetConfig+0x200>
 8005994:	4b45      	ldr	r3, [pc, #276]	; (8005aac <UART_SetConfig+0x2cc>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800599e:	2bc0      	cmp	r3, #192	; 0xc0
 80059a0:	d016      	beq.n	80059d0 <UART_SetConfig+0x1f0>
 80059a2:	2bc0      	cmp	r3, #192	; 0xc0
 80059a4:	d818      	bhi.n	80059d8 <UART_SetConfig+0x1f8>
 80059a6:	2b80      	cmp	r3, #128	; 0x80
 80059a8:	d00a      	beq.n	80059c0 <UART_SetConfig+0x1e0>
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d814      	bhi.n	80059d8 <UART_SetConfig+0x1f8>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <UART_SetConfig+0x1d8>
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d008      	beq.n	80059c8 <UART_SetConfig+0x1e8>
 80059b6:	e00f      	b.n	80059d8 <UART_SetConfig+0x1f8>
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059be:	e082      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 80059c0:	2302      	movs	r3, #2
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c6:	e07e      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 80059c8:	2304      	movs	r3, #4
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e07a      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 80059d0:	2308      	movs	r3, #8
 80059d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d6:	e076      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 80059d8:	2310      	movs	r3, #16
 80059da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059de:	e072      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a35      	ldr	r2, [pc, #212]	; (8005abc <UART_SetConfig+0x2dc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d12a      	bne.n	8005a40 <UART_SetConfig+0x260>
 80059ea:	4b30      	ldr	r3, [pc, #192]	; (8005aac <UART_SetConfig+0x2cc>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f8:	d01a      	beq.n	8005a30 <UART_SetConfig+0x250>
 80059fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059fe:	d81b      	bhi.n	8005a38 <UART_SetConfig+0x258>
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a04:	d00c      	beq.n	8005a20 <UART_SetConfig+0x240>
 8005a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0a:	d815      	bhi.n	8005a38 <UART_SetConfig+0x258>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <UART_SetConfig+0x238>
 8005a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a14:	d008      	beq.n	8005a28 <UART_SetConfig+0x248>
 8005a16:	e00f      	b.n	8005a38 <UART_SetConfig+0x258>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1e:	e052      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005a20:	2302      	movs	r3, #2
 8005a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a26:	e04e      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2e:	e04a      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005a30:	2308      	movs	r3, #8
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a36:	e046      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005a38:	2310      	movs	r3, #16
 8005a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a3e:	e042      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a17      	ldr	r2, [pc, #92]	; (8005aa4 <UART_SetConfig+0x2c4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d13a      	bne.n	8005ac0 <UART_SetConfig+0x2e0>
 8005a4a:	4b18      	ldr	r3, [pc, #96]	; (8005aac <UART_SetConfig+0x2cc>)
 8005a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a58:	d01a      	beq.n	8005a90 <UART_SetConfig+0x2b0>
 8005a5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a5e:	d81b      	bhi.n	8005a98 <UART_SetConfig+0x2b8>
 8005a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a64:	d00c      	beq.n	8005a80 <UART_SetConfig+0x2a0>
 8005a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6a:	d815      	bhi.n	8005a98 <UART_SetConfig+0x2b8>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <UART_SetConfig+0x298>
 8005a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a74:	d008      	beq.n	8005a88 <UART_SetConfig+0x2a8>
 8005a76:	e00f      	b.n	8005a98 <UART_SetConfig+0x2b8>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7e:	e022      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005a80:	2302      	movs	r3, #2
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a86:	e01e      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8e:	e01a      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005a90:	2308      	movs	r3, #8
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a96:	e016      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9e:	e012      	b.n	8005ac6 <UART_SetConfig+0x2e6>
 8005aa0:	efff69f3 	.word	0xefff69f3
 8005aa4:	40008000 	.word	0x40008000
 8005aa8:	40013800 	.word	0x40013800
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	40004400 	.word	0x40004400
 8005ab4:	40004800 	.word	0x40004800
 8005ab8:	40004c00 	.word	0x40004c00
 8005abc:	40005000 	.word	0x40005000
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a9f      	ldr	r2, [pc, #636]	; (8005d48 <UART_SetConfig+0x568>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d17a      	bne.n	8005bc6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d824      	bhi.n	8005b22 <UART_SetConfig+0x342>
 8005ad8:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <UART_SetConfig+0x300>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005b05 	.word	0x08005b05
 8005ae4:	08005b23 	.word	0x08005b23
 8005ae8:	08005b0d 	.word	0x08005b0d
 8005aec:	08005b23 	.word	0x08005b23
 8005af0:	08005b13 	.word	0x08005b13
 8005af4:	08005b23 	.word	0x08005b23
 8005af8:	08005b23 	.word	0x08005b23
 8005afc:	08005b23 	.word	0x08005b23
 8005b00:	08005b1b 	.word	0x08005b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b04:	f7fe fd34 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8005b08:	61f8      	str	r0, [r7, #28]
        break;
 8005b0a:	e010      	b.n	8005b2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b0c:	4b8f      	ldr	r3, [pc, #572]	; (8005d4c <UART_SetConfig+0x56c>)
 8005b0e:	61fb      	str	r3, [r7, #28]
        break;
 8005b10:	e00d      	b.n	8005b2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b12:	f7fe fc95 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8005b16:	61f8      	str	r0, [r7, #28]
        break;
 8005b18:	e009      	b.n	8005b2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1e:	61fb      	str	r3, [r7, #28]
        break;
 8005b20:	e005      	b.n	8005b2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80fb 	beq.w	8005d2c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	4413      	add	r3, r2
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d305      	bcc.n	8005b52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d903      	bls.n	8005b5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b58:	e0e8      	b.n	8005d2c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	461c      	mov	r4, r3
 8005b60:	4615      	mov	r5, r2
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	022b      	lsls	r3, r5, #8
 8005b6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b70:	0222      	lsls	r2, r4, #8
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	6849      	ldr	r1, [r1, #4]
 8005b76:	0849      	lsrs	r1, r1, #1
 8005b78:	2000      	movs	r0, #0
 8005b7a:	4688      	mov	r8, r1
 8005b7c:	4681      	mov	r9, r0
 8005b7e:	eb12 0a08 	adds.w	sl, r2, r8
 8005b82:	eb43 0b09 	adc.w	fp, r3, r9
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	603b      	str	r3, [r7, #0]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b94:	4650      	mov	r0, sl
 8005b96:	4659      	mov	r1, fp
 8005b98:	f7fb f806 	bl	8000ba8 <__aeabi_uldivmod>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005baa:	d308      	bcc.n	8005bbe <UART_SetConfig+0x3de>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb2:	d204      	bcs.n	8005bbe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	60da      	str	r2, [r3, #12]
 8005bbc:	e0b6      	b.n	8005d2c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bc4:	e0b2      	b.n	8005d2c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bce:	d15e      	bne.n	8005c8e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d828      	bhi.n	8005c2a <UART_SetConfig+0x44a>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x400>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c0d 	.word	0x08005c0d
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	08005c2b 	.word	0x08005c2b
 8005bf0:	08005c1b 	.word	0x08005c1b
 8005bf4:	08005c2b 	.word	0x08005c2b
 8005bf8:	08005c2b 	.word	0x08005c2b
 8005bfc:	08005c2b 	.word	0x08005c2b
 8005c00:	08005c23 	.word	0x08005c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c04:	f7fe fcb4 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8005c08:	61f8      	str	r0, [r7, #28]
        break;
 8005c0a:	e014      	b.n	8005c36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0c:	f7fe fcc6 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8005c10:	61f8      	str	r0, [r7, #28]
        break;
 8005c12:	e010      	b.n	8005c36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c14:	4b4d      	ldr	r3, [pc, #308]	; (8005d4c <UART_SetConfig+0x56c>)
 8005c16:	61fb      	str	r3, [r7, #28]
        break;
 8005c18:	e00d      	b.n	8005c36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1a:	f7fe fc11 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8005c1e:	61f8      	str	r0, [r7, #28]
        break;
 8005c20:	e009      	b.n	8005c36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c26:	61fb      	str	r3, [r7, #28]
        break;
 8005c28:	e005      	b.n	8005c36 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d077      	beq.n	8005d2c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	005a      	lsls	r2, r3, #1
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	2b0f      	cmp	r3, #15
 8005c56:	d916      	bls.n	8005c86 <UART_SetConfig+0x4a6>
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5e:	d212      	bcs.n	8005c86 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f023 030f 	bic.w	r3, r3, #15
 8005c68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	8afb      	ldrh	r3, [r7, #22]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	8afa      	ldrh	r2, [r7, #22]
 8005c82:	60da      	str	r2, [r3, #12]
 8005c84:	e052      	b.n	8005d2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c8c:	e04e      	b.n	8005d2c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c92:	2b08      	cmp	r3, #8
 8005c94:	d827      	bhi.n	8005ce6 <UART_SetConfig+0x506>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0x4bc>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cc9 	.word	0x08005cc9
 8005ca4:	08005cd1 	.word	0x08005cd1
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005cd7 	.word	0x08005cd7
 8005cb0:	08005ce7 	.word	0x08005ce7
 8005cb4:	08005ce7 	.word	0x08005ce7
 8005cb8:	08005ce7 	.word	0x08005ce7
 8005cbc:	08005cdf 	.word	0x08005cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc0:	f7fe fc56 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8005cc4:	61f8      	str	r0, [r7, #28]
        break;
 8005cc6:	e014      	b.n	8005cf2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc8:	f7fe fc68 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8005ccc:	61f8      	str	r0, [r7, #28]
        break;
 8005cce:	e010      	b.n	8005cf2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b1e      	ldr	r3, [pc, #120]	; (8005d4c <UART_SetConfig+0x56c>)
 8005cd2:	61fb      	str	r3, [r7, #28]
        break;
 8005cd4:	e00d      	b.n	8005cf2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7fe fbb3 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8005cda:	61f8      	str	r0, [r7, #28]
        break;
 8005cdc:	e009      	b.n	8005cf2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce2:	61fb      	str	r3, [r7, #28]
        break;
 8005ce4:	e005      	b.n	8005cf2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cf0:	bf00      	nop
    }

    if (pclk != 0U)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d019      	beq.n	8005d2c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	085a      	lsrs	r2, r3, #1
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	441a      	add	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	2b0f      	cmp	r3, #15
 8005d10:	d909      	bls.n	8005d26 <UART_SetConfig+0x546>
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d18:	d205      	bcs.n	8005d26 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60da      	str	r2, [r3, #12]
 8005d24:	e002      	b.n	8005d2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3728      	adds	r7, #40	; 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d46:	bf00      	nop
 8005d48:	40008000 	.word	0x40008000
 8005d4c:	00f42400 	.word	0x00f42400

08005d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01a      	beq.n	8005e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4e:	d10a      	bne.n	8005e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
  }
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ea4:	f7fb ff3e 	bl	8001d24 <HAL_GetTick>
 8005ea8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d10e      	bne.n	8005ed6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f82d 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e023      	b.n	8005f1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d10e      	bne.n	8005f02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f817 	bl	8005f26 <UART_WaitOnFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e00d      	b.n	8005f1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b09c      	sub	sp, #112	; 0x70
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	4613      	mov	r3, r2
 8005f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f36:	e0a5      	b.n	8006084 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3e:	f000 80a1 	beq.w	8006084 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f42:	f7fb feef 	bl	8001d24 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d13e      	bne.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f78:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e6      	bne.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005faa:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e5      	bne.n	8005f8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e067      	b.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d04f      	beq.n	8006084 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff2:	d147      	bne.n	8006084 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ffc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601c:	637b      	str	r3, [r7, #52]	; 0x34
 800601e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	613b      	str	r3, [r7, #16]
   return(result);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	66bb      	str	r3, [r7, #104]	; 0x68
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006050:	623a      	str	r2, [r7, #32]
 8006052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	69f9      	ldr	r1, [r7, #28]
 8006056:	6a3a      	ldr	r2, [r7, #32]
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	61bb      	str	r3, [r7, #24]
   return(result);
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e5      	bne.n	8006030 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e010      	b.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69da      	ldr	r2, [r3, #28]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	429a      	cmp	r2, r3
 80060a0:	f43f af4a 	beq.w	8005f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3770      	adds	r7, #112	; 0x70
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <__errno>:
 80060b0:	4b01      	ldr	r3, [pc, #4]	; (80060b8 <__errno+0x8>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	2000000c 	.word	0x2000000c

080060bc <__libc_init_array>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	4d0d      	ldr	r5, [pc, #52]	; (80060f4 <__libc_init_array+0x38>)
 80060c0:	4c0d      	ldr	r4, [pc, #52]	; (80060f8 <__libc_init_array+0x3c>)
 80060c2:	1b64      	subs	r4, r4, r5
 80060c4:	10a4      	asrs	r4, r4, #2
 80060c6:	2600      	movs	r6, #0
 80060c8:	42a6      	cmp	r6, r4
 80060ca:	d109      	bne.n	80060e0 <__libc_init_array+0x24>
 80060cc:	4d0b      	ldr	r5, [pc, #44]	; (80060fc <__libc_init_array+0x40>)
 80060ce:	4c0c      	ldr	r4, [pc, #48]	; (8006100 <__libc_init_array+0x44>)
 80060d0:	f002 fdc4 	bl	8008c5c <_init>
 80060d4:	1b64      	subs	r4, r4, r5
 80060d6:	10a4      	asrs	r4, r4, #2
 80060d8:	2600      	movs	r6, #0
 80060da:	42a6      	cmp	r6, r4
 80060dc:	d105      	bne.n	80060ea <__libc_init_array+0x2e>
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e4:	4798      	blx	r3
 80060e6:	3601      	adds	r6, #1
 80060e8:	e7ee      	b.n	80060c8 <__libc_init_array+0xc>
 80060ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ee:	4798      	blx	r3
 80060f0:	3601      	adds	r6, #1
 80060f2:	e7f2      	b.n	80060da <__libc_init_array+0x1e>
 80060f4:	0800915c 	.word	0x0800915c
 80060f8:	0800915c 	.word	0x0800915c
 80060fc:	0800915c 	.word	0x0800915c
 8006100:	08009160 	.word	0x08009160

08006104 <memset>:
 8006104:	4402      	add	r2, r0
 8006106:	4603      	mov	r3, r0
 8006108:	4293      	cmp	r3, r2
 800610a:	d100      	bne.n	800610e <memset+0xa>
 800610c:	4770      	bx	lr
 800610e:	f803 1b01 	strb.w	r1, [r3], #1
 8006112:	e7f9      	b.n	8006108 <memset+0x4>

08006114 <__cvt>:
 8006114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006118:	ec55 4b10 	vmov	r4, r5, d0
 800611c:	2d00      	cmp	r5, #0
 800611e:	460e      	mov	r6, r1
 8006120:	4619      	mov	r1, r3
 8006122:	462b      	mov	r3, r5
 8006124:	bfbb      	ittet	lt
 8006126:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800612a:	461d      	movlt	r5, r3
 800612c:	2300      	movge	r3, #0
 800612e:	232d      	movlt	r3, #45	; 0x2d
 8006130:	700b      	strb	r3, [r1, #0]
 8006132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006134:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006138:	4691      	mov	r9, r2
 800613a:	f023 0820 	bic.w	r8, r3, #32
 800613e:	bfbc      	itt	lt
 8006140:	4622      	movlt	r2, r4
 8006142:	4614      	movlt	r4, r2
 8006144:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006148:	d005      	beq.n	8006156 <__cvt+0x42>
 800614a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800614e:	d100      	bne.n	8006152 <__cvt+0x3e>
 8006150:	3601      	adds	r6, #1
 8006152:	2102      	movs	r1, #2
 8006154:	e000      	b.n	8006158 <__cvt+0x44>
 8006156:	2103      	movs	r1, #3
 8006158:	ab03      	add	r3, sp, #12
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	ab02      	add	r3, sp, #8
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	ec45 4b10 	vmov	d0, r4, r5
 8006164:	4653      	mov	r3, sl
 8006166:	4632      	mov	r2, r6
 8006168:	f000 fe1a 	bl	8006da0 <_dtoa_r>
 800616c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006170:	4607      	mov	r7, r0
 8006172:	d102      	bne.n	800617a <__cvt+0x66>
 8006174:	f019 0f01 	tst.w	r9, #1
 8006178:	d022      	beq.n	80061c0 <__cvt+0xac>
 800617a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800617e:	eb07 0906 	add.w	r9, r7, r6
 8006182:	d110      	bne.n	80061a6 <__cvt+0x92>
 8006184:	783b      	ldrb	r3, [r7, #0]
 8006186:	2b30      	cmp	r3, #48	; 0x30
 8006188:	d10a      	bne.n	80061a0 <__cvt+0x8c>
 800618a:	2200      	movs	r2, #0
 800618c:	2300      	movs	r3, #0
 800618e:	4620      	mov	r0, r4
 8006190:	4629      	mov	r1, r5
 8006192:	f7fa fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 8006196:	b918      	cbnz	r0, 80061a0 <__cvt+0x8c>
 8006198:	f1c6 0601 	rsb	r6, r6, #1
 800619c:	f8ca 6000 	str.w	r6, [sl]
 80061a0:	f8da 3000 	ldr.w	r3, [sl]
 80061a4:	4499      	add	r9, r3
 80061a6:	2200      	movs	r2, #0
 80061a8:	2300      	movs	r3, #0
 80061aa:	4620      	mov	r0, r4
 80061ac:	4629      	mov	r1, r5
 80061ae:	f7fa fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80061b2:	b108      	cbz	r0, 80061b8 <__cvt+0xa4>
 80061b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061b8:	2230      	movs	r2, #48	; 0x30
 80061ba:	9b03      	ldr	r3, [sp, #12]
 80061bc:	454b      	cmp	r3, r9
 80061be:	d307      	bcc.n	80061d0 <__cvt+0xbc>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061c4:	1bdb      	subs	r3, r3, r7
 80061c6:	4638      	mov	r0, r7
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	b004      	add	sp, #16
 80061cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d0:	1c59      	adds	r1, r3, #1
 80061d2:	9103      	str	r1, [sp, #12]
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	e7f0      	b.n	80061ba <__cvt+0xa6>

080061d8 <__exponent>:
 80061d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061da:	4603      	mov	r3, r0
 80061dc:	2900      	cmp	r1, #0
 80061de:	bfb8      	it	lt
 80061e0:	4249      	neglt	r1, r1
 80061e2:	f803 2b02 	strb.w	r2, [r3], #2
 80061e6:	bfb4      	ite	lt
 80061e8:	222d      	movlt	r2, #45	; 0x2d
 80061ea:	222b      	movge	r2, #43	; 0x2b
 80061ec:	2909      	cmp	r1, #9
 80061ee:	7042      	strb	r2, [r0, #1]
 80061f0:	dd2a      	ble.n	8006248 <__exponent+0x70>
 80061f2:	f10d 0407 	add.w	r4, sp, #7
 80061f6:	46a4      	mov	ip, r4
 80061f8:	270a      	movs	r7, #10
 80061fa:	46a6      	mov	lr, r4
 80061fc:	460a      	mov	r2, r1
 80061fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8006202:	fb07 1516 	mls	r5, r7, r6, r1
 8006206:	3530      	adds	r5, #48	; 0x30
 8006208:	2a63      	cmp	r2, #99	; 0x63
 800620a:	f104 34ff 	add.w	r4, r4, #4294967295
 800620e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006212:	4631      	mov	r1, r6
 8006214:	dcf1      	bgt.n	80061fa <__exponent+0x22>
 8006216:	3130      	adds	r1, #48	; 0x30
 8006218:	f1ae 0502 	sub.w	r5, lr, #2
 800621c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006220:	1c44      	adds	r4, r0, #1
 8006222:	4629      	mov	r1, r5
 8006224:	4561      	cmp	r1, ip
 8006226:	d30a      	bcc.n	800623e <__exponent+0x66>
 8006228:	f10d 0209 	add.w	r2, sp, #9
 800622c:	eba2 020e 	sub.w	r2, r2, lr
 8006230:	4565      	cmp	r5, ip
 8006232:	bf88      	it	hi
 8006234:	2200      	movhi	r2, #0
 8006236:	4413      	add	r3, r2
 8006238:	1a18      	subs	r0, r3, r0
 800623a:	b003      	add	sp, #12
 800623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800623e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006242:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006246:	e7ed      	b.n	8006224 <__exponent+0x4c>
 8006248:	2330      	movs	r3, #48	; 0x30
 800624a:	3130      	adds	r1, #48	; 0x30
 800624c:	7083      	strb	r3, [r0, #2]
 800624e:	70c1      	strb	r1, [r0, #3]
 8006250:	1d03      	adds	r3, r0, #4
 8006252:	e7f1      	b.n	8006238 <__exponent+0x60>

08006254 <_printf_float>:
 8006254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006258:	ed2d 8b02 	vpush	{d8}
 800625c:	b08d      	sub	sp, #52	; 0x34
 800625e:	460c      	mov	r4, r1
 8006260:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006264:	4616      	mov	r6, r2
 8006266:	461f      	mov	r7, r3
 8006268:	4605      	mov	r5, r0
 800626a:	f001 fd3f 	bl	8007cec <_localeconv_r>
 800626e:	f8d0 a000 	ldr.w	sl, [r0]
 8006272:	4650      	mov	r0, sl
 8006274:	f7f9 ffac 	bl	80001d0 <strlen>
 8006278:	2300      	movs	r3, #0
 800627a:	930a      	str	r3, [sp, #40]	; 0x28
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	9305      	str	r3, [sp, #20]
 8006280:	f8d8 3000 	ldr.w	r3, [r8]
 8006284:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006288:	3307      	adds	r3, #7
 800628a:	f023 0307 	bic.w	r3, r3, #7
 800628e:	f103 0208 	add.w	r2, r3, #8
 8006292:	f8c8 2000 	str.w	r2, [r8]
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800629e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80062a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062a6:	9307      	str	r3, [sp, #28]
 80062a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80062ac:	ee08 0a10 	vmov	s16, r0
 80062b0:	4b9f      	ldr	r3, [pc, #636]	; (8006530 <_printf_float+0x2dc>)
 80062b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ba:	f7fa fc37 	bl	8000b2c <__aeabi_dcmpun>
 80062be:	bb88      	cbnz	r0, 8006324 <_printf_float+0xd0>
 80062c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062c4:	4b9a      	ldr	r3, [pc, #616]	; (8006530 <_printf_float+0x2dc>)
 80062c6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ca:	f7fa fc11 	bl	8000af0 <__aeabi_dcmple>
 80062ce:	bb48      	cbnz	r0, 8006324 <_printf_float+0xd0>
 80062d0:	2200      	movs	r2, #0
 80062d2:	2300      	movs	r3, #0
 80062d4:	4640      	mov	r0, r8
 80062d6:	4649      	mov	r1, r9
 80062d8:	f7fa fc00 	bl	8000adc <__aeabi_dcmplt>
 80062dc:	b110      	cbz	r0, 80062e4 <_printf_float+0x90>
 80062de:	232d      	movs	r3, #45	; 0x2d
 80062e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e4:	4b93      	ldr	r3, [pc, #588]	; (8006534 <_printf_float+0x2e0>)
 80062e6:	4894      	ldr	r0, [pc, #592]	; (8006538 <_printf_float+0x2e4>)
 80062e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80062ec:	bf94      	ite	ls
 80062ee:	4698      	movls	r8, r3
 80062f0:	4680      	movhi	r8, r0
 80062f2:	2303      	movs	r3, #3
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	9b05      	ldr	r3, [sp, #20]
 80062f8:	f023 0204 	bic.w	r2, r3, #4
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	f04f 0900 	mov.w	r9, #0
 8006302:	9700      	str	r7, [sp, #0]
 8006304:	4633      	mov	r3, r6
 8006306:	aa0b      	add	r2, sp, #44	; 0x2c
 8006308:	4621      	mov	r1, r4
 800630a:	4628      	mov	r0, r5
 800630c:	f000 f9d8 	bl	80066c0 <_printf_common>
 8006310:	3001      	adds	r0, #1
 8006312:	f040 8090 	bne.w	8006436 <_printf_float+0x1e2>
 8006316:	f04f 30ff 	mov.w	r0, #4294967295
 800631a:	b00d      	add	sp, #52	; 0x34
 800631c:	ecbd 8b02 	vpop	{d8}
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	f7fa fbfe 	bl	8000b2c <__aeabi_dcmpun>
 8006330:	b140      	cbz	r0, 8006344 <_printf_float+0xf0>
 8006332:	464b      	mov	r3, r9
 8006334:	2b00      	cmp	r3, #0
 8006336:	bfbc      	itt	lt
 8006338:	232d      	movlt	r3, #45	; 0x2d
 800633a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800633e:	487f      	ldr	r0, [pc, #508]	; (800653c <_printf_float+0x2e8>)
 8006340:	4b7f      	ldr	r3, [pc, #508]	; (8006540 <_printf_float+0x2ec>)
 8006342:	e7d1      	b.n	80062e8 <_printf_float+0x94>
 8006344:	6863      	ldr	r3, [r4, #4]
 8006346:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800634a:	9206      	str	r2, [sp, #24]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	d13f      	bne.n	80063d0 <_printf_float+0x17c>
 8006350:	2306      	movs	r3, #6
 8006352:	6063      	str	r3, [r4, #4]
 8006354:	9b05      	ldr	r3, [sp, #20]
 8006356:	6861      	ldr	r1, [r4, #4]
 8006358:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800635c:	2300      	movs	r3, #0
 800635e:	9303      	str	r3, [sp, #12]
 8006360:	ab0a      	add	r3, sp, #40	; 0x28
 8006362:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006366:	ab09      	add	r3, sp, #36	; 0x24
 8006368:	ec49 8b10 	vmov	d0, r8, r9
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	6022      	str	r2, [r4, #0]
 8006370:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006374:	4628      	mov	r0, r5
 8006376:	f7ff fecd 	bl	8006114 <__cvt>
 800637a:	9b06      	ldr	r3, [sp, #24]
 800637c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800637e:	2b47      	cmp	r3, #71	; 0x47
 8006380:	4680      	mov	r8, r0
 8006382:	d108      	bne.n	8006396 <_printf_float+0x142>
 8006384:	1cc8      	adds	r0, r1, #3
 8006386:	db02      	blt.n	800638e <_printf_float+0x13a>
 8006388:	6863      	ldr	r3, [r4, #4]
 800638a:	4299      	cmp	r1, r3
 800638c:	dd41      	ble.n	8006412 <_printf_float+0x1be>
 800638e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006392:	fa5f fb8b 	uxtb.w	fp, fp
 8006396:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800639a:	d820      	bhi.n	80063de <_printf_float+0x18a>
 800639c:	3901      	subs	r1, #1
 800639e:	465a      	mov	r2, fp
 80063a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063a4:	9109      	str	r1, [sp, #36]	; 0x24
 80063a6:	f7ff ff17 	bl	80061d8 <__exponent>
 80063aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ac:	1813      	adds	r3, r2, r0
 80063ae:	2a01      	cmp	r2, #1
 80063b0:	4681      	mov	r9, r0
 80063b2:	6123      	str	r3, [r4, #16]
 80063b4:	dc02      	bgt.n	80063bc <_printf_float+0x168>
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	07d2      	lsls	r2, r2, #31
 80063ba:	d501      	bpl.n	80063c0 <_printf_float+0x16c>
 80063bc:	3301      	adds	r3, #1
 80063be:	6123      	str	r3, [r4, #16]
 80063c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d09c      	beq.n	8006302 <_printf_float+0xae>
 80063c8:	232d      	movs	r3, #45	; 0x2d
 80063ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ce:	e798      	b.n	8006302 <_printf_float+0xae>
 80063d0:	9a06      	ldr	r2, [sp, #24]
 80063d2:	2a47      	cmp	r2, #71	; 0x47
 80063d4:	d1be      	bne.n	8006354 <_printf_float+0x100>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1bc      	bne.n	8006354 <_printf_float+0x100>
 80063da:	2301      	movs	r3, #1
 80063dc:	e7b9      	b.n	8006352 <_printf_float+0xfe>
 80063de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80063e2:	d118      	bne.n	8006416 <_printf_float+0x1c2>
 80063e4:	2900      	cmp	r1, #0
 80063e6:	6863      	ldr	r3, [r4, #4]
 80063e8:	dd0b      	ble.n	8006402 <_printf_float+0x1ae>
 80063ea:	6121      	str	r1, [r4, #16]
 80063ec:	b913      	cbnz	r3, 80063f4 <_printf_float+0x1a0>
 80063ee:	6822      	ldr	r2, [r4, #0]
 80063f0:	07d0      	lsls	r0, r2, #31
 80063f2:	d502      	bpl.n	80063fa <_printf_float+0x1a6>
 80063f4:	3301      	adds	r3, #1
 80063f6:	440b      	add	r3, r1
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80063fc:	f04f 0900 	mov.w	r9, #0
 8006400:	e7de      	b.n	80063c0 <_printf_float+0x16c>
 8006402:	b913      	cbnz	r3, 800640a <_printf_float+0x1b6>
 8006404:	6822      	ldr	r2, [r4, #0]
 8006406:	07d2      	lsls	r2, r2, #31
 8006408:	d501      	bpl.n	800640e <_printf_float+0x1ba>
 800640a:	3302      	adds	r3, #2
 800640c:	e7f4      	b.n	80063f8 <_printf_float+0x1a4>
 800640e:	2301      	movs	r3, #1
 8006410:	e7f2      	b.n	80063f8 <_printf_float+0x1a4>
 8006412:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006418:	4299      	cmp	r1, r3
 800641a:	db05      	blt.n	8006428 <_printf_float+0x1d4>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	6121      	str	r1, [r4, #16]
 8006420:	07d8      	lsls	r0, r3, #31
 8006422:	d5ea      	bpl.n	80063fa <_printf_float+0x1a6>
 8006424:	1c4b      	adds	r3, r1, #1
 8006426:	e7e7      	b.n	80063f8 <_printf_float+0x1a4>
 8006428:	2900      	cmp	r1, #0
 800642a:	bfd4      	ite	le
 800642c:	f1c1 0202 	rsble	r2, r1, #2
 8006430:	2201      	movgt	r2, #1
 8006432:	4413      	add	r3, r2
 8006434:	e7e0      	b.n	80063f8 <_printf_float+0x1a4>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	055a      	lsls	r2, r3, #21
 800643a:	d407      	bmi.n	800644c <_printf_float+0x1f8>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	4642      	mov	r2, r8
 8006440:	4631      	mov	r1, r6
 8006442:	4628      	mov	r0, r5
 8006444:	47b8      	blx	r7
 8006446:	3001      	adds	r0, #1
 8006448:	d12c      	bne.n	80064a4 <_printf_float+0x250>
 800644a:	e764      	b.n	8006316 <_printf_float+0xc2>
 800644c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006450:	f240 80e0 	bls.w	8006614 <_printf_float+0x3c0>
 8006454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006458:	2200      	movs	r2, #0
 800645a:	2300      	movs	r3, #0
 800645c:	f7fa fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 8006460:	2800      	cmp	r0, #0
 8006462:	d034      	beq.n	80064ce <_printf_float+0x27a>
 8006464:	4a37      	ldr	r2, [pc, #220]	; (8006544 <_printf_float+0x2f0>)
 8006466:	2301      	movs	r3, #1
 8006468:	4631      	mov	r1, r6
 800646a:	4628      	mov	r0, r5
 800646c:	47b8      	blx	r7
 800646e:	3001      	adds	r0, #1
 8006470:	f43f af51 	beq.w	8006316 <_printf_float+0xc2>
 8006474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006478:	429a      	cmp	r2, r3
 800647a:	db02      	blt.n	8006482 <_printf_float+0x22e>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	07d8      	lsls	r0, r3, #31
 8006480:	d510      	bpl.n	80064a4 <_printf_float+0x250>
 8006482:	ee18 3a10 	vmov	r3, s16
 8006486:	4652      	mov	r2, sl
 8006488:	4631      	mov	r1, r6
 800648a:	4628      	mov	r0, r5
 800648c:	47b8      	blx	r7
 800648e:	3001      	adds	r0, #1
 8006490:	f43f af41 	beq.w	8006316 <_printf_float+0xc2>
 8006494:	f04f 0800 	mov.w	r8, #0
 8006498:	f104 091a 	add.w	r9, r4, #26
 800649c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649e:	3b01      	subs	r3, #1
 80064a0:	4543      	cmp	r3, r8
 80064a2:	dc09      	bgt.n	80064b8 <_printf_float+0x264>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	079b      	lsls	r3, r3, #30
 80064a8:	f100 8105 	bmi.w	80066b6 <_printf_float+0x462>
 80064ac:	68e0      	ldr	r0, [r4, #12]
 80064ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064b0:	4298      	cmp	r0, r3
 80064b2:	bfb8      	it	lt
 80064b4:	4618      	movlt	r0, r3
 80064b6:	e730      	b.n	800631a <_printf_float+0xc6>
 80064b8:	2301      	movs	r3, #1
 80064ba:	464a      	mov	r2, r9
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	f43f af27 	beq.w	8006316 <_printf_float+0xc2>
 80064c8:	f108 0801 	add.w	r8, r8, #1
 80064cc:	e7e6      	b.n	800649c <_printf_float+0x248>
 80064ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	dc39      	bgt.n	8006548 <_printf_float+0x2f4>
 80064d4:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <_printf_float+0x2f0>)
 80064d6:	2301      	movs	r3, #1
 80064d8:	4631      	mov	r1, r6
 80064da:	4628      	mov	r0, r5
 80064dc:	47b8      	blx	r7
 80064de:	3001      	adds	r0, #1
 80064e0:	f43f af19 	beq.w	8006316 <_printf_float+0xc2>
 80064e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064e8:	4313      	orrs	r3, r2
 80064ea:	d102      	bne.n	80064f2 <_printf_float+0x29e>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	07d9      	lsls	r1, r3, #31
 80064f0:	d5d8      	bpl.n	80064a4 <_printf_float+0x250>
 80064f2:	ee18 3a10 	vmov	r3, s16
 80064f6:	4652      	mov	r2, sl
 80064f8:	4631      	mov	r1, r6
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	f43f af09 	beq.w	8006316 <_printf_float+0xc2>
 8006504:	f04f 0900 	mov.w	r9, #0
 8006508:	f104 0a1a 	add.w	sl, r4, #26
 800650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650e:	425b      	negs	r3, r3
 8006510:	454b      	cmp	r3, r9
 8006512:	dc01      	bgt.n	8006518 <_printf_float+0x2c4>
 8006514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006516:	e792      	b.n	800643e <_printf_float+0x1ea>
 8006518:	2301      	movs	r3, #1
 800651a:	4652      	mov	r2, sl
 800651c:	4631      	mov	r1, r6
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	f43f aef7 	beq.w	8006316 <_printf_float+0xc2>
 8006528:	f109 0901 	add.w	r9, r9, #1
 800652c:	e7ee      	b.n	800650c <_printf_float+0x2b8>
 800652e:	bf00      	nop
 8006530:	7fefffff 	.word	0x7fefffff
 8006534:	08008d7c 	.word	0x08008d7c
 8006538:	08008d80 	.word	0x08008d80
 800653c:	08008d88 	.word	0x08008d88
 8006540:	08008d84 	.word	0x08008d84
 8006544:	08008d8c 	.word	0x08008d8c
 8006548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800654a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800654c:	429a      	cmp	r2, r3
 800654e:	bfa8      	it	ge
 8006550:	461a      	movge	r2, r3
 8006552:	2a00      	cmp	r2, #0
 8006554:	4691      	mov	r9, r2
 8006556:	dc37      	bgt.n	80065c8 <_printf_float+0x374>
 8006558:	f04f 0b00 	mov.w	fp, #0
 800655c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006560:	f104 021a 	add.w	r2, r4, #26
 8006564:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006566:	9305      	str	r3, [sp, #20]
 8006568:	eba3 0309 	sub.w	r3, r3, r9
 800656c:	455b      	cmp	r3, fp
 800656e:	dc33      	bgt.n	80065d8 <_printf_float+0x384>
 8006570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006574:	429a      	cmp	r2, r3
 8006576:	db3b      	blt.n	80065f0 <_printf_float+0x39c>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	07da      	lsls	r2, r3, #31
 800657c:	d438      	bmi.n	80065f0 <_printf_float+0x39c>
 800657e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006580:	9a05      	ldr	r2, [sp, #20]
 8006582:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006584:	1a9a      	subs	r2, r3, r2
 8006586:	eba3 0901 	sub.w	r9, r3, r1
 800658a:	4591      	cmp	r9, r2
 800658c:	bfa8      	it	ge
 800658e:	4691      	movge	r9, r2
 8006590:	f1b9 0f00 	cmp.w	r9, #0
 8006594:	dc35      	bgt.n	8006602 <_printf_float+0x3ae>
 8006596:	f04f 0800 	mov.w	r8, #0
 800659a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800659e:	f104 0a1a 	add.w	sl, r4, #26
 80065a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	eba3 0309 	sub.w	r3, r3, r9
 80065ac:	4543      	cmp	r3, r8
 80065ae:	f77f af79 	ble.w	80064a4 <_printf_float+0x250>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4652      	mov	r2, sl
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	f43f aeaa 	beq.w	8006316 <_printf_float+0xc2>
 80065c2:	f108 0801 	add.w	r8, r8, #1
 80065c6:	e7ec      	b.n	80065a2 <_printf_float+0x34e>
 80065c8:	4613      	mov	r3, r2
 80065ca:	4631      	mov	r1, r6
 80065cc:	4642      	mov	r2, r8
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	d1c0      	bne.n	8006558 <_printf_float+0x304>
 80065d6:	e69e      	b.n	8006316 <_printf_float+0xc2>
 80065d8:	2301      	movs	r3, #1
 80065da:	4631      	mov	r1, r6
 80065dc:	4628      	mov	r0, r5
 80065de:	9205      	str	r2, [sp, #20]
 80065e0:	47b8      	blx	r7
 80065e2:	3001      	adds	r0, #1
 80065e4:	f43f ae97 	beq.w	8006316 <_printf_float+0xc2>
 80065e8:	9a05      	ldr	r2, [sp, #20]
 80065ea:	f10b 0b01 	add.w	fp, fp, #1
 80065ee:	e7b9      	b.n	8006564 <_printf_float+0x310>
 80065f0:	ee18 3a10 	vmov	r3, s16
 80065f4:	4652      	mov	r2, sl
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	d1be      	bne.n	800657e <_printf_float+0x32a>
 8006600:	e689      	b.n	8006316 <_printf_float+0xc2>
 8006602:	9a05      	ldr	r2, [sp, #20]
 8006604:	464b      	mov	r3, r9
 8006606:	4442      	add	r2, r8
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	d1c1      	bne.n	8006596 <_printf_float+0x342>
 8006612:	e680      	b.n	8006316 <_printf_float+0xc2>
 8006614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006616:	2a01      	cmp	r2, #1
 8006618:	dc01      	bgt.n	800661e <_printf_float+0x3ca>
 800661a:	07db      	lsls	r3, r3, #31
 800661c:	d538      	bpl.n	8006690 <_printf_float+0x43c>
 800661e:	2301      	movs	r3, #1
 8006620:	4642      	mov	r2, r8
 8006622:	4631      	mov	r1, r6
 8006624:	4628      	mov	r0, r5
 8006626:	47b8      	blx	r7
 8006628:	3001      	adds	r0, #1
 800662a:	f43f ae74 	beq.w	8006316 <_printf_float+0xc2>
 800662e:	ee18 3a10 	vmov	r3, s16
 8006632:	4652      	mov	r2, sl
 8006634:	4631      	mov	r1, r6
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	f43f ae6b 	beq.w	8006316 <_printf_float+0xc2>
 8006640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006644:	2200      	movs	r2, #0
 8006646:	2300      	movs	r3, #0
 8006648:	f7fa fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800664c:	b9d8      	cbnz	r0, 8006686 <_printf_float+0x432>
 800664e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006650:	f108 0201 	add.w	r2, r8, #1
 8006654:	3b01      	subs	r3, #1
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	d10e      	bne.n	800667e <_printf_float+0x42a>
 8006660:	e659      	b.n	8006316 <_printf_float+0xc2>
 8006662:	2301      	movs	r3, #1
 8006664:	4652      	mov	r2, sl
 8006666:	4631      	mov	r1, r6
 8006668:	4628      	mov	r0, r5
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	f43f ae52 	beq.w	8006316 <_printf_float+0xc2>
 8006672:	f108 0801 	add.w	r8, r8, #1
 8006676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006678:	3b01      	subs	r3, #1
 800667a:	4543      	cmp	r3, r8
 800667c:	dcf1      	bgt.n	8006662 <_printf_float+0x40e>
 800667e:	464b      	mov	r3, r9
 8006680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006684:	e6dc      	b.n	8006440 <_printf_float+0x1ec>
 8006686:	f04f 0800 	mov.w	r8, #0
 800668a:	f104 0a1a 	add.w	sl, r4, #26
 800668e:	e7f2      	b.n	8006676 <_printf_float+0x422>
 8006690:	2301      	movs	r3, #1
 8006692:	4642      	mov	r2, r8
 8006694:	e7df      	b.n	8006656 <_printf_float+0x402>
 8006696:	2301      	movs	r3, #1
 8006698:	464a      	mov	r2, r9
 800669a:	4631      	mov	r1, r6
 800669c:	4628      	mov	r0, r5
 800669e:	47b8      	blx	r7
 80066a0:	3001      	adds	r0, #1
 80066a2:	f43f ae38 	beq.w	8006316 <_printf_float+0xc2>
 80066a6:	f108 0801 	add.w	r8, r8, #1
 80066aa:	68e3      	ldr	r3, [r4, #12]
 80066ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ae:	1a5b      	subs	r3, r3, r1
 80066b0:	4543      	cmp	r3, r8
 80066b2:	dcf0      	bgt.n	8006696 <_printf_float+0x442>
 80066b4:	e6fa      	b.n	80064ac <_printf_float+0x258>
 80066b6:	f04f 0800 	mov.w	r8, #0
 80066ba:	f104 0919 	add.w	r9, r4, #25
 80066be:	e7f4      	b.n	80066aa <_printf_float+0x456>

080066c0 <_printf_common>:
 80066c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c4:	4616      	mov	r6, r2
 80066c6:	4699      	mov	r9, r3
 80066c8:	688a      	ldr	r2, [r1, #8]
 80066ca:	690b      	ldr	r3, [r1, #16]
 80066cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066d0:	4293      	cmp	r3, r2
 80066d2:	bfb8      	it	lt
 80066d4:	4613      	movlt	r3, r2
 80066d6:	6033      	str	r3, [r6, #0]
 80066d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066dc:	4607      	mov	r7, r0
 80066de:	460c      	mov	r4, r1
 80066e0:	b10a      	cbz	r2, 80066e6 <_printf_common+0x26>
 80066e2:	3301      	adds	r3, #1
 80066e4:	6033      	str	r3, [r6, #0]
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	0699      	lsls	r1, r3, #26
 80066ea:	bf42      	ittt	mi
 80066ec:	6833      	ldrmi	r3, [r6, #0]
 80066ee:	3302      	addmi	r3, #2
 80066f0:	6033      	strmi	r3, [r6, #0]
 80066f2:	6825      	ldr	r5, [r4, #0]
 80066f4:	f015 0506 	ands.w	r5, r5, #6
 80066f8:	d106      	bne.n	8006708 <_printf_common+0x48>
 80066fa:	f104 0a19 	add.w	sl, r4, #25
 80066fe:	68e3      	ldr	r3, [r4, #12]
 8006700:	6832      	ldr	r2, [r6, #0]
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	42ab      	cmp	r3, r5
 8006706:	dc26      	bgt.n	8006756 <_printf_common+0x96>
 8006708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800670c:	1e13      	subs	r3, r2, #0
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	bf18      	it	ne
 8006712:	2301      	movne	r3, #1
 8006714:	0692      	lsls	r2, r2, #26
 8006716:	d42b      	bmi.n	8006770 <_printf_common+0xb0>
 8006718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800671c:	4649      	mov	r1, r9
 800671e:	4638      	mov	r0, r7
 8006720:	47c0      	blx	r8
 8006722:	3001      	adds	r0, #1
 8006724:	d01e      	beq.n	8006764 <_printf_common+0xa4>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	68e5      	ldr	r5, [r4, #12]
 800672a:	6832      	ldr	r2, [r6, #0]
 800672c:	f003 0306 	and.w	r3, r3, #6
 8006730:	2b04      	cmp	r3, #4
 8006732:	bf08      	it	eq
 8006734:	1aad      	subeq	r5, r5, r2
 8006736:	68a3      	ldr	r3, [r4, #8]
 8006738:	6922      	ldr	r2, [r4, #16]
 800673a:	bf0c      	ite	eq
 800673c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006740:	2500      	movne	r5, #0
 8006742:	4293      	cmp	r3, r2
 8006744:	bfc4      	itt	gt
 8006746:	1a9b      	subgt	r3, r3, r2
 8006748:	18ed      	addgt	r5, r5, r3
 800674a:	2600      	movs	r6, #0
 800674c:	341a      	adds	r4, #26
 800674e:	42b5      	cmp	r5, r6
 8006750:	d11a      	bne.n	8006788 <_printf_common+0xc8>
 8006752:	2000      	movs	r0, #0
 8006754:	e008      	b.n	8006768 <_printf_common+0xa8>
 8006756:	2301      	movs	r3, #1
 8006758:	4652      	mov	r2, sl
 800675a:	4649      	mov	r1, r9
 800675c:	4638      	mov	r0, r7
 800675e:	47c0      	blx	r8
 8006760:	3001      	adds	r0, #1
 8006762:	d103      	bne.n	800676c <_printf_common+0xac>
 8006764:	f04f 30ff 	mov.w	r0, #4294967295
 8006768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676c:	3501      	adds	r5, #1
 800676e:	e7c6      	b.n	80066fe <_printf_common+0x3e>
 8006770:	18e1      	adds	r1, r4, r3
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	2030      	movs	r0, #48	; 0x30
 8006776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800677a:	4422      	add	r2, r4
 800677c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006784:	3302      	adds	r3, #2
 8006786:	e7c7      	b.n	8006718 <_printf_common+0x58>
 8006788:	2301      	movs	r3, #1
 800678a:	4622      	mov	r2, r4
 800678c:	4649      	mov	r1, r9
 800678e:	4638      	mov	r0, r7
 8006790:	47c0      	blx	r8
 8006792:	3001      	adds	r0, #1
 8006794:	d0e6      	beq.n	8006764 <_printf_common+0xa4>
 8006796:	3601      	adds	r6, #1
 8006798:	e7d9      	b.n	800674e <_printf_common+0x8e>
	...

0800679c <_printf_i>:
 800679c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	7e0f      	ldrb	r7, [r1, #24]
 80067a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067a4:	2f78      	cmp	r7, #120	; 0x78
 80067a6:	4691      	mov	r9, r2
 80067a8:	4680      	mov	r8, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	469a      	mov	sl, r3
 80067ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067b2:	d807      	bhi.n	80067c4 <_printf_i+0x28>
 80067b4:	2f62      	cmp	r7, #98	; 0x62
 80067b6:	d80a      	bhi.n	80067ce <_printf_i+0x32>
 80067b8:	2f00      	cmp	r7, #0
 80067ba:	f000 80d8 	beq.w	800696e <_printf_i+0x1d2>
 80067be:	2f58      	cmp	r7, #88	; 0x58
 80067c0:	f000 80a3 	beq.w	800690a <_printf_i+0x16e>
 80067c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067cc:	e03a      	b.n	8006844 <_printf_i+0xa8>
 80067ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067d2:	2b15      	cmp	r3, #21
 80067d4:	d8f6      	bhi.n	80067c4 <_printf_i+0x28>
 80067d6:	a101      	add	r1, pc, #4	; (adr r1, 80067dc <_printf_i+0x40>)
 80067d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067dc:	08006835 	.word	0x08006835
 80067e0:	08006849 	.word	0x08006849
 80067e4:	080067c5 	.word	0x080067c5
 80067e8:	080067c5 	.word	0x080067c5
 80067ec:	080067c5 	.word	0x080067c5
 80067f0:	080067c5 	.word	0x080067c5
 80067f4:	08006849 	.word	0x08006849
 80067f8:	080067c5 	.word	0x080067c5
 80067fc:	080067c5 	.word	0x080067c5
 8006800:	080067c5 	.word	0x080067c5
 8006804:	080067c5 	.word	0x080067c5
 8006808:	08006955 	.word	0x08006955
 800680c:	08006879 	.word	0x08006879
 8006810:	08006937 	.word	0x08006937
 8006814:	080067c5 	.word	0x080067c5
 8006818:	080067c5 	.word	0x080067c5
 800681c:	08006977 	.word	0x08006977
 8006820:	080067c5 	.word	0x080067c5
 8006824:	08006879 	.word	0x08006879
 8006828:	080067c5 	.word	0x080067c5
 800682c:	080067c5 	.word	0x080067c5
 8006830:	0800693f 	.word	0x0800693f
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	1d1a      	adds	r2, r3, #4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	602a      	str	r2, [r5, #0]
 800683c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006844:	2301      	movs	r3, #1
 8006846:	e0a3      	b.n	8006990 <_printf_i+0x1f4>
 8006848:	6820      	ldr	r0, [r4, #0]
 800684a:	6829      	ldr	r1, [r5, #0]
 800684c:	0606      	lsls	r6, r0, #24
 800684e:	f101 0304 	add.w	r3, r1, #4
 8006852:	d50a      	bpl.n	800686a <_printf_i+0xce>
 8006854:	680e      	ldr	r6, [r1, #0]
 8006856:	602b      	str	r3, [r5, #0]
 8006858:	2e00      	cmp	r6, #0
 800685a:	da03      	bge.n	8006864 <_printf_i+0xc8>
 800685c:	232d      	movs	r3, #45	; 0x2d
 800685e:	4276      	negs	r6, r6
 8006860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006864:	485e      	ldr	r0, [pc, #376]	; (80069e0 <_printf_i+0x244>)
 8006866:	230a      	movs	r3, #10
 8006868:	e019      	b.n	800689e <_printf_i+0x102>
 800686a:	680e      	ldr	r6, [r1, #0]
 800686c:	602b      	str	r3, [r5, #0]
 800686e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006872:	bf18      	it	ne
 8006874:	b236      	sxthne	r6, r6
 8006876:	e7ef      	b.n	8006858 <_printf_i+0xbc>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	6820      	ldr	r0, [r4, #0]
 800687c:	1d19      	adds	r1, r3, #4
 800687e:	6029      	str	r1, [r5, #0]
 8006880:	0601      	lsls	r1, r0, #24
 8006882:	d501      	bpl.n	8006888 <_printf_i+0xec>
 8006884:	681e      	ldr	r6, [r3, #0]
 8006886:	e002      	b.n	800688e <_printf_i+0xf2>
 8006888:	0646      	lsls	r6, r0, #25
 800688a:	d5fb      	bpl.n	8006884 <_printf_i+0xe8>
 800688c:	881e      	ldrh	r6, [r3, #0]
 800688e:	4854      	ldr	r0, [pc, #336]	; (80069e0 <_printf_i+0x244>)
 8006890:	2f6f      	cmp	r7, #111	; 0x6f
 8006892:	bf0c      	ite	eq
 8006894:	2308      	moveq	r3, #8
 8006896:	230a      	movne	r3, #10
 8006898:	2100      	movs	r1, #0
 800689a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800689e:	6865      	ldr	r5, [r4, #4]
 80068a0:	60a5      	str	r5, [r4, #8]
 80068a2:	2d00      	cmp	r5, #0
 80068a4:	bfa2      	ittt	ge
 80068a6:	6821      	ldrge	r1, [r4, #0]
 80068a8:	f021 0104 	bicge.w	r1, r1, #4
 80068ac:	6021      	strge	r1, [r4, #0]
 80068ae:	b90e      	cbnz	r6, 80068b4 <_printf_i+0x118>
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	d04d      	beq.n	8006950 <_printf_i+0x1b4>
 80068b4:	4615      	mov	r5, r2
 80068b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80068ba:	fb03 6711 	mls	r7, r3, r1, r6
 80068be:	5dc7      	ldrb	r7, [r0, r7]
 80068c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068c4:	4637      	mov	r7, r6
 80068c6:	42bb      	cmp	r3, r7
 80068c8:	460e      	mov	r6, r1
 80068ca:	d9f4      	bls.n	80068b6 <_printf_i+0x11a>
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d10b      	bne.n	80068e8 <_printf_i+0x14c>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	07de      	lsls	r6, r3, #31
 80068d4:	d508      	bpl.n	80068e8 <_printf_i+0x14c>
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	6861      	ldr	r1, [r4, #4]
 80068da:	4299      	cmp	r1, r3
 80068dc:	bfde      	ittt	le
 80068de:	2330      	movle	r3, #48	; 0x30
 80068e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068e8:	1b52      	subs	r2, r2, r5
 80068ea:	6122      	str	r2, [r4, #16]
 80068ec:	f8cd a000 	str.w	sl, [sp]
 80068f0:	464b      	mov	r3, r9
 80068f2:	aa03      	add	r2, sp, #12
 80068f4:	4621      	mov	r1, r4
 80068f6:	4640      	mov	r0, r8
 80068f8:	f7ff fee2 	bl	80066c0 <_printf_common>
 80068fc:	3001      	adds	r0, #1
 80068fe:	d14c      	bne.n	800699a <_printf_i+0x1fe>
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	b004      	add	sp, #16
 8006906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690a:	4835      	ldr	r0, [pc, #212]	; (80069e0 <_printf_i+0x244>)
 800690c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006910:	6829      	ldr	r1, [r5, #0]
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	f851 6b04 	ldr.w	r6, [r1], #4
 8006918:	6029      	str	r1, [r5, #0]
 800691a:	061d      	lsls	r5, r3, #24
 800691c:	d514      	bpl.n	8006948 <_printf_i+0x1ac>
 800691e:	07df      	lsls	r7, r3, #31
 8006920:	bf44      	itt	mi
 8006922:	f043 0320 	orrmi.w	r3, r3, #32
 8006926:	6023      	strmi	r3, [r4, #0]
 8006928:	b91e      	cbnz	r6, 8006932 <_printf_i+0x196>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	f023 0320 	bic.w	r3, r3, #32
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	2310      	movs	r3, #16
 8006934:	e7b0      	b.n	8006898 <_printf_i+0xfc>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	f043 0320 	orr.w	r3, r3, #32
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	2378      	movs	r3, #120	; 0x78
 8006940:	4828      	ldr	r0, [pc, #160]	; (80069e4 <_printf_i+0x248>)
 8006942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006946:	e7e3      	b.n	8006910 <_printf_i+0x174>
 8006948:	0659      	lsls	r1, r3, #25
 800694a:	bf48      	it	mi
 800694c:	b2b6      	uxthmi	r6, r6
 800694e:	e7e6      	b.n	800691e <_printf_i+0x182>
 8006950:	4615      	mov	r5, r2
 8006952:	e7bb      	b.n	80068cc <_printf_i+0x130>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	6826      	ldr	r6, [r4, #0]
 8006958:	6961      	ldr	r1, [r4, #20]
 800695a:	1d18      	adds	r0, r3, #4
 800695c:	6028      	str	r0, [r5, #0]
 800695e:	0635      	lsls	r5, r6, #24
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	d501      	bpl.n	8006968 <_printf_i+0x1cc>
 8006964:	6019      	str	r1, [r3, #0]
 8006966:	e002      	b.n	800696e <_printf_i+0x1d2>
 8006968:	0670      	lsls	r0, r6, #25
 800696a:	d5fb      	bpl.n	8006964 <_printf_i+0x1c8>
 800696c:	8019      	strh	r1, [r3, #0]
 800696e:	2300      	movs	r3, #0
 8006970:	6123      	str	r3, [r4, #16]
 8006972:	4615      	mov	r5, r2
 8006974:	e7ba      	b.n	80068ec <_printf_i+0x150>
 8006976:	682b      	ldr	r3, [r5, #0]
 8006978:	1d1a      	adds	r2, r3, #4
 800697a:	602a      	str	r2, [r5, #0]
 800697c:	681d      	ldr	r5, [r3, #0]
 800697e:	6862      	ldr	r2, [r4, #4]
 8006980:	2100      	movs	r1, #0
 8006982:	4628      	mov	r0, r5
 8006984:	f7f9 fc2c 	bl	80001e0 <memchr>
 8006988:	b108      	cbz	r0, 800698e <_printf_i+0x1f2>
 800698a:	1b40      	subs	r0, r0, r5
 800698c:	6060      	str	r0, [r4, #4]
 800698e:	6863      	ldr	r3, [r4, #4]
 8006990:	6123      	str	r3, [r4, #16]
 8006992:	2300      	movs	r3, #0
 8006994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006998:	e7a8      	b.n	80068ec <_printf_i+0x150>
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	462a      	mov	r2, r5
 800699e:	4649      	mov	r1, r9
 80069a0:	4640      	mov	r0, r8
 80069a2:	47d0      	blx	sl
 80069a4:	3001      	adds	r0, #1
 80069a6:	d0ab      	beq.n	8006900 <_printf_i+0x164>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	079b      	lsls	r3, r3, #30
 80069ac:	d413      	bmi.n	80069d6 <_printf_i+0x23a>
 80069ae:	68e0      	ldr	r0, [r4, #12]
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	4298      	cmp	r0, r3
 80069b4:	bfb8      	it	lt
 80069b6:	4618      	movlt	r0, r3
 80069b8:	e7a4      	b.n	8006904 <_printf_i+0x168>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4632      	mov	r2, r6
 80069be:	4649      	mov	r1, r9
 80069c0:	4640      	mov	r0, r8
 80069c2:	47d0      	blx	sl
 80069c4:	3001      	adds	r0, #1
 80069c6:	d09b      	beq.n	8006900 <_printf_i+0x164>
 80069c8:	3501      	adds	r5, #1
 80069ca:	68e3      	ldr	r3, [r4, #12]
 80069cc:	9903      	ldr	r1, [sp, #12]
 80069ce:	1a5b      	subs	r3, r3, r1
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	dcf2      	bgt.n	80069ba <_printf_i+0x21e>
 80069d4:	e7eb      	b.n	80069ae <_printf_i+0x212>
 80069d6:	2500      	movs	r5, #0
 80069d8:	f104 0619 	add.w	r6, r4, #25
 80069dc:	e7f5      	b.n	80069ca <_printf_i+0x22e>
 80069de:	bf00      	nop
 80069e0:	08008d8e 	.word	0x08008d8e
 80069e4:	08008d9f 	.word	0x08008d9f

080069e8 <iprintf>:
 80069e8:	b40f      	push	{r0, r1, r2, r3}
 80069ea:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <iprintf+0x2c>)
 80069ec:	b513      	push	{r0, r1, r4, lr}
 80069ee:	681c      	ldr	r4, [r3, #0]
 80069f0:	b124      	cbz	r4, 80069fc <iprintf+0x14>
 80069f2:	69a3      	ldr	r3, [r4, #24]
 80069f4:	b913      	cbnz	r3, 80069fc <iprintf+0x14>
 80069f6:	4620      	mov	r0, r4
 80069f8:	f001 f8da 	bl	8007bb0 <__sinit>
 80069fc:	ab05      	add	r3, sp, #20
 80069fe:	9a04      	ldr	r2, [sp, #16]
 8006a00:	68a1      	ldr	r1, [r4, #8]
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	4620      	mov	r0, r4
 8006a06:	f001 fe97 	bl	8008738 <_vfiprintf_r>
 8006a0a:	b002      	add	sp, #8
 8006a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a10:	b004      	add	sp, #16
 8006a12:	4770      	bx	lr
 8006a14:	2000000c 	.word	0x2000000c

08006a18 <_puts_r>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	460e      	mov	r6, r1
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	b118      	cbz	r0, 8006a28 <_puts_r+0x10>
 8006a20:	6983      	ldr	r3, [r0, #24]
 8006a22:	b90b      	cbnz	r3, 8006a28 <_puts_r+0x10>
 8006a24:	f001 f8c4 	bl	8007bb0 <__sinit>
 8006a28:	69ab      	ldr	r3, [r5, #24]
 8006a2a:	68ac      	ldr	r4, [r5, #8]
 8006a2c:	b913      	cbnz	r3, 8006a34 <_puts_r+0x1c>
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f001 f8be 	bl	8007bb0 <__sinit>
 8006a34:	4b2c      	ldr	r3, [pc, #176]	; (8006ae8 <_puts_r+0xd0>)
 8006a36:	429c      	cmp	r4, r3
 8006a38:	d120      	bne.n	8006a7c <_puts_r+0x64>
 8006a3a:	686c      	ldr	r4, [r5, #4]
 8006a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a3e:	07db      	lsls	r3, r3, #31
 8006a40:	d405      	bmi.n	8006a4e <_puts_r+0x36>
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	0598      	lsls	r0, r3, #22
 8006a46:	d402      	bmi.n	8006a4e <_puts_r+0x36>
 8006a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a4a:	f001 f954 	bl	8007cf6 <__retarget_lock_acquire_recursive>
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	0719      	lsls	r1, r3, #28
 8006a52:	d51d      	bpl.n	8006a90 <_puts_r+0x78>
 8006a54:	6923      	ldr	r3, [r4, #16]
 8006a56:	b1db      	cbz	r3, 8006a90 <_puts_r+0x78>
 8006a58:	3e01      	subs	r6, #1
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a60:	3b01      	subs	r3, #1
 8006a62:	60a3      	str	r3, [r4, #8]
 8006a64:	bb39      	cbnz	r1, 8006ab6 <_puts_r+0x9e>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	da38      	bge.n	8006adc <_puts_r+0xc4>
 8006a6a:	4622      	mov	r2, r4
 8006a6c:	210a      	movs	r1, #10
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 f848 	bl	8006b04 <__swbuf_r>
 8006a74:	3001      	adds	r0, #1
 8006a76:	d011      	beq.n	8006a9c <_puts_r+0x84>
 8006a78:	250a      	movs	r5, #10
 8006a7a:	e011      	b.n	8006aa0 <_puts_r+0x88>
 8006a7c:	4b1b      	ldr	r3, [pc, #108]	; (8006aec <_puts_r+0xd4>)
 8006a7e:	429c      	cmp	r4, r3
 8006a80:	d101      	bne.n	8006a86 <_puts_r+0x6e>
 8006a82:	68ac      	ldr	r4, [r5, #8]
 8006a84:	e7da      	b.n	8006a3c <_puts_r+0x24>
 8006a86:	4b1a      	ldr	r3, [pc, #104]	; (8006af0 <_puts_r+0xd8>)
 8006a88:	429c      	cmp	r4, r3
 8006a8a:	bf08      	it	eq
 8006a8c:	68ec      	ldreq	r4, [r5, #12]
 8006a8e:	e7d5      	b.n	8006a3c <_puts_r+0x24>
 8006a90:	4621      	mov	r1, r4
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f888 	bl	8006ba8 <__swsetup_r>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d0dd      	beq.n	8006a58 <_puts_r+0x40>
 8006a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8006aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aa2:	07da      	lsls	r2, r3, #31
 8006aa4:	d405      	bmi.n	8006ab2 <_puts_r+0x9a>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	059b      	lsls	r3, r3, #22
 8006aaa:	d402      	bmi.n	8006ab2 <_puts_r+0x9a>
 8006aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aae:	f001 f923 	bl	8007cf8 <__retarget_lock_release_recursive>
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	bd70      	pop	{r4, r5, r6, pc}
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	da04      	bge.n	8006ac4 <_puts_r+0xac>
 8006aba:	69a2      	ldr	r2, [r4, #24]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	dc06      	bgt.n	8006ace <_puts_r+0xb6>
 8006ac0:	290a      	cmp	r1, #10
 8006ac2:	d004      	beq.n	8006ace <_puts_r+0xb6>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	6022      	str	r2, [r4, #0]
 8006aca:	7019      	strb	r1, [r3, #0]
 8006acc:	e7c5      	b.n	8006a5a <_puts_r+0x42>
 8006ace:	4622      	mov	r2, r4
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f000 f817 	bl	8006b04 <__swbuf_r>
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d1bf      	bne.n	8006a5a <_puts_r+0x42>
 8006ada:	e7df      	b.n	8006a9c <_puts_r+0x84>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	250a      	movs	r5, #10
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	6022      	str	r2, [r4, #0]
 8006ae4:	701d      	strb	r5, [r3, #0]
 8006ae6:	e7db      	b.n	8006aa0 <_puts_r+0x88>
 8006ae8:	08008e60 	.word	0x08008e60
 8006aec:	08008e80 	.word	0x08008e80
 8006af0:	08008e40 	.word	0x08008e40

08006af4 <puts>:
 8006af4:	4b02      	ldr	r3, [pc, #8]	; (8006b00 <puts+0xc>)
 8006af6:	4601      	mov	r1, r0
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	f7ff bf8d 	b.w	8006a18 <_puts_r>
 8006afe:	bf00      	nop
 8006b00:	2000000c 	.word	0x2000000c

08006b04 <__swbuf_r>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	460e      	mov	r6, r1
 8006b08:	4614      	mov	r4, r2
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	b118      	cbz	r0, 8006b16 <__swbuf_r+0x12>
 8006b0e:	6983      	ldr	r3, [r0, #24]
 8006b10:	b90b      	cbnz	r3, 8006b16 <__swbuf_r+0x12>
 8006b12:	f001 f84d 	bl	8007bb0 <__sinit>
 8006b16:	4b21      	ldr	r3, [pc, #132]	; (8006b9c <__swbuf_r+0x98>)
 8006b18:	429c      	cmp	r4, r3
 8006b1a:	d12b      	bne.n	8006b74 <__swbuf_r+0x70>
 8006b1c:	686c      	ldr	r4, [r5, #4]
 8006b1e:	69a3      	ldr	r3, [r4, #24]
 8006b20:	60a3      	str	r3, [r4, #8]
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	071a      	lsls	r2, r3, #28
 8006b26:	d52f      	bpl.n	8006b88 <__swbuf_r+0x84>
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	b36b      	cbz	r3, 8006b88 <__swbuf_r+0x84>
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	6820      	ldr	r0, [r4, #0]
 8006b30:	1ac0      	subs	r0, r0, r3
 8006b32:	6963      	ldr	r3, [r4, #20]
 8006b34:	b2f6      	uxtb	r6, r6
 8006b36:	4283      	cmp	r3, r0
 8006b38:	4637      	mov	r7, r6
 8006b3a:	dc04      	bgt.n	8006b46 <__swbuf_r+0x42>
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f000 ffa2 	bl	8007a88 <_fflush_r>
 8006b44:	bb30      	cbnz	r0, 8006b94 <__swbuf_r+0x90>
 8006b46:	68a3      	ldr	r3, [r4, #8]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	60a3      	str	r3, [r4, #8]
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	6022      	str	r2, [r4, #0]
 8006b52:	701e      	strb	r6, [r3, #0]
 8006b54:	6963      	ldr	r3, [r4, #20]
 8006b56:	3001      	adds	r0, #1
 8006b58:	4283      	cmp	r3, r0
 8006b5a:	d004      	beq.n	8006b66 <__swbuf_r+0x62>
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	07db      	lsls	r3, r3, #31
 8006b60:	d506      	bpl.n	8006b70 <__swbuf_r+0x6c>
 8006b62:	2e0a      	cmp	r6, #10
 8006b64:	d104      	bne.n	8006b70 <__swbuf_r+0x6c>
 8006b66:	4621      	mov	r1, r4
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f000 ff8d 	bl	8007a88 <_fflush_r>
 8006b6e:	b988      	cbnz	r0, 8006b94 <__swbuf_r+0x90>
 8006b70:	4638      	mov	r0, r7
 8006b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b74:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <__swbuf_r+0x9c>)
 8006b76:	429c      	cmp	r4, r3
 8006b78:	d101      	bne.n	8006b7e <__swbuf_r+0x7a>
 8006b7a:	68ac      	ldr	r4, [r5, #8]
 8006b7c:	e7cf      	b.n	8006b1e <__swbuf_r+0x1a>
 8006b7e:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <__swbuf_r+0xa0>)
 8006b80:	429c      	cmp	r4, r3
 8006b82:	bf08      	it	eq
 8006b84:	68ec      	ldreq	r4, [r5, #12]
 8006b86:	e7ca      	b.n	8006b1e <__swbuf_r+0x1a>
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 f80c 	bl	8006ba8 <__swsetup_r>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d0cb      	beq.n	8006b2c <__swbuf_r+0x28>
 8006b94:	f04f 37ff 	mov.w	r7, #4294967295
 8006b98:	e7ea      	b.n	8006b70 <__swbuf_r+0x6c>
 8006b9a:	bf00      	nop
 8006b9c:	08008e60 	.word	0x08008e60
 8006ba0:	08008e80 	.word	0x08008e80
 8006ba4:	08008e40 	.word	0x08008e40

08006ba8 <__swsetup_r>:
 8006ba8:	4b32      	ldr	r3, [pc, #200]	; (8006c74 <__swsetup_r+0xcc>)
 8006baa:	b570      	push	{r4, r5, r6, lr}
 8006bac:	681d      	ldr	r5, [r3, #0]
 8006bae:	4606      	mov	r6, r0
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	b125      	cbz	r5, 8006bbe <__swsetup_r+0x16>
 8006bb4:	69ab      	ldr	r3, [r5, #24]
 8006bb6:	b913      	cbnz	r3, 8006bbe <__swsetup_r+0x16>
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f000 fff9 	bl	8007bb0 <__sinit>
 8006bbe:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <__swsetup_r+0xd0>)
 8006bc0:	429c      	cmp	r4, r3
 8006bc2:	d10f      	bne.n	8006be4 <__swsetup_r+0x3c>
 8006bc4:	686c      	ldr	r4, [r5, #4]
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bcc:	0719      	lsls	r1, r3, #28
 8006bce:	d42c      	bmi.n	8006c2a <__swsetup_r+0x82>
 8006bd0:	06dd      	lsls	r5, r3, #27
 8006bd2:	d411      	bmi.n	8006bf8 <__swsetup_r+0x50>
 8006bd4:	2309      	movs	r3, #9
 8006bd6:	6033      	str	r3, [r6, #0]
 8006bd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bdc:	81a3      	strh	r3, [r4, #12]
 8006bde:	f04f 30ff 	mov.w	r0, #4294967295
 8006be2:	e03e      	b.n	8006c62 <__swsetup_r+0xba>
 8006be4:	4b25      	ldr	r3, [pc, #148]	; (8006c7c <__swsetup_r+0xd4>)
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d101      	bne.n	8006bee <__swsetup_r+0x46>
 8006bea:	68ac      	ldr	r4, [r5, #8]
 8006bec:	e7eb      	b.n	8006bc6 <__swsetup_r+0x1e>
 8006bee:	4b24      	ldr	r3, [pc, #144]	; (8006c80 <__swsetup_r+0xd8>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	bf08      	it	eq
 8006bf4:	68ec      	ldreq	r4, [r5, #12]
 8006bf6:	e7e6      	b.n	8006bc6 <__swsetup_r+0x1e>
 8006bf8:	0758      	lsls	r0, r3, #29
 8006bfa:	d512      	bpl.n	8006c22 <__swsetup_r+0x7a>
 8006bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bfe:	b141      	cbz	r1, 8006c12 <__swsetup_r+0x6a>
 8006c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c04:	4299      	cmp	r1, r3
 8006c06:	d002      	beq.n	8006c0e <__swsetup_r+0x66>
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f001 fc8b 	bl	8008524 <_free_r>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6363      	str	r3, [r4, #52]	; 0x34
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6063      	str	r3, [r4, #4]
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f043 0308 	orr.w	r3, r3, #8
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	b94b      	cbnz	r3, 8006c42 <__swsetup_r+0x9a>
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c38:	d003      	beq.n	8006c42 <__swsetup_r+0x9a>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f001 f881 	bl	8007d44 <__smakebuf_r>
 8006c42:	89a0      	ldrh	r0, [r4, #12]
 8006c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c48:	f010 0301 	ands.w	r3, r0, #1
 8006c4c:	d00a      	beq.n	8006c64 <__swsetup_r+0xbc>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60a3      	str	r3, [r4, #8]
 8006c52:	6963      	ldr	r3, [r4, #20]
 8006c54:	425b      	negs	r3, r3
 8006c56:	61a3      	str	r3, [r4, #24]
 8006c58:	6923      	ldr	r3, [r4, #16]
 8006c5a:	b943      	cbnz	r3, 8006c6e <__swsetup_r+0xc6>
 8006c5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c60:	d1ba      	bne.n	8006bd8 <__swsetup_r+0x30>
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	0781      	lsls	r1, r0, #30
 8006c66:	bf58      	it	pl
 8006c68:	6963      	ldrpl	r3, [r4, #20]
 8006c6a:	60a3      	str	r3, [r4, #8]
 8006c6c:	e7f4      	b.n	8006c58 <__swsetup_r+0xb0>
 8006c6e:	2000      	movs	r0, #0
 8006c70:	e7f7      	b.n	8006c62 <__swsetup_r+0xba>
 8006c72:	bf00      	nop
 8006c74:	2000000c 	.word	0x2000000c
 8006c78:	08008e60 	.word	0x08008e60
 8006c7c:	08008e80 	.word	0x08008e80
 8006c80:	08008e40 	.word	0x08008e40

08006c84 <quorem>:
 8006c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	6903      	ldr	r3, [r0, #16]
 8006c8a:	690c      	ldr	r4, [r1, #16]
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	4607      	mov	r7, r0
 8006c90:	f2c0 8081 	blt.w	8006d96 <quorem+0x112>
 8006c94:	3c01      	subs	r4, #1
 8006c96:	f101 0814 	add.w	r8, r1, #20
 8006c9a:	f100 0514 	add.w	r5, r0, #20
 8006c9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ca2:	9301      	str	r3, [sp, #4]
 8006ca4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ca8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cac:	3301      	adds	r3, #1
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006cb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cbc:	d331      	bcc.n	8006d22 <quorem+0x9e>
 8006cbe:	f04f 0e00 	mov.w	lr, #0
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	46ac      	mov	ip, r5
 8006cc6:	46f2      	mov	sl, lr
 8006cc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ccc:	b293      	uxth	r3, r2
 8006cce:	fb06 e303 	mla	r3, r6, r3, lr
 8006cd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	ebaa 0303 	sub.w	r3, sl, r3
 8006cdc:	f8dc a000 	ldr.w	sl, [ip]
 8006ce0:	0c12      	lsrs	r2, r2, #16
 8006ce2:	fa13 f38a 	uxtah	r3, r3, sl
 8006ce6:	fb06 e202 	mla	r2, r6, r2, lr
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	9b00      	ldr	r3, [sp, #0]
 8006cee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cf2:	b292      	uxth	r2, r2
 8006cf4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006cf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cfc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d00:	4581      	cmp	r9, r0
 8006d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d06:	f84c 3b04 	str.w	r3, [ip], #4
 8006d0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d0e:	d2db      	bcs.n	8006cc8 <quorem+0x44>
 8006d10:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d14:	b92b      	cbnz	r3, 8006d22 <quorem+0x9e>
 8006d16:	9b01      	ldr	r3, [sp, #4]
 8006d18:	3b04      	subs	r3, #4
 8006d1a:	429d      	cmp	r5, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	d32e      	bcc.n	8006d7e <quorem+0xfa>
 8006d20:	613c      	str	r4, [r7, #16]
 8006d22:	4638      	mov	r0, r7
 8006d24:	f001 fae6 	bl	80082f4 <__mcmp>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	db24      	blt.n	8006d76 <quorem+0xf2>
 8006d2c:	3601      	adds	r6, #1
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f04f 0c00 	mov.w	ip, #0
 8006d34:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d38:	f8d0 e000 	ldr.w	lr, [r0]
 8006d3c:	b293      	uxth	r3, r2
 8006d3e:	ebac 0303 	sub.w	r3, ip, r3
 8006d42:	0c12      	lsrs	r2, r2, #16
 8006d44:	fa13 f38e 	uxtah	r3, r3, lr
 8006d48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d56:	45c1      	cmp	r9, r8
 8006d58:	f840 3b04 	str.w	r3, [r0], #4
 8006d5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d60:	d2e8      	bcs.n	8006d34 <quorem+0xb0>
 8006d62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d6a:	b922      	cbnz	r2, 8006d76 <quorem+0xf2>
 8006d6c:	3b04      	subs	r3, #4
 8006d6e:	429d      	cmp	r5, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	d30a      	bcc.n	8006d8a <quorem+0x106>
 8006d74:	613c      	str	r4, [r7, #16]
 8006d76:	4630      	mov	r0, r6
 8006d78:	b003      	add	sp, #12
 8006d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	3b04      	subs	r3, #4
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	d1cc      	bne.n	8006d20 <quorem+0x9c>
 8006d86:	3c01      	subs	r4, #1
 8006d88:	e7c7      	b.n	8006d1a <quorem+0x96>
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	3b04      	subs	r3, #4
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	d1f0      	bne.n	8006d74 <quorem+0xf0>
 8006d92:	3c01      	subs	r4, #1
 8006d94:	e7eb      	b.n	8006d6e <quorem+0xea>
 8006d96:	2000      	movs	r0, #0
 8006d98:	e7ee      	b.n	8006d78 <quorem+0xf4>
 8006d9a:	0000      	movs	r0, r0
 8006d9c:	0000      	movs	r0, r0
	...

08006da0 <_dtoa_r>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	ed2d 8b04 	vpush	{d8-d9}
 8006da8:	ec57 6b10 	vmov	r6, r7, d0
 8006dac:	b093      	sub	sp, #76	; 0x4c
 8006dae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006db0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006db4:	9106      	str	r1, [sp, #24]
 8006db6:	ee10 aa10 	vmov	sl, s0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8006dc0:	46bb      	mov	fp, r7
 8006dc2:	b975      	cbnz	r5, 8006de2 <_dtoa_r+0x42>
 8006dc4:	2010      	movs	r0, #16
 8006dc6:	f000 fffd 	bl	8007dc4 <malloc>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	6260      	str	r0, [r4, #36]	; 0x24
 8006dce:	b920      	cbnz	r0, 8006dda <_dtoa_r+0x3a>
 8006dd0:	4ba7      	ldr	r3, [pc, #668]	; (8007070 <_dtoa_r+0x2d0>)
 8006dd2:	21ea      	movs	r1, #234	; 0xea
 8006dd4:	48a7      	ldr	r0, [pc, #668]	; (8007074 <_dtoa_r+0x2d4>)
 8006dd6:	f001 fe45 	bl	8008a64 <__assert_func>
 8006dda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006dde:	6005      	str	r5, [r0, #0]
 8006de0:	60c5      	str	r5, [r0, #12]
 8006de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006de4:	6819      	ldr	r1, [r3, #0]
 8006de6:	b151      	cbz	r1, 8006dfe <_dtoa_r+0x5e>
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	604a      	str	r2, [r1, #4]
 8006dec:	2301      	movs	r3, #1
 8006dee:	4093      	lsls	r3, r2
 8006df0:	608b      	str	r3, [r1, #8]
 8006df2:	4620      	mov	r0, r4
 8006df4:	f001 f83c 	bl	8007e70 <_Bfree>
 8006df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	1e3b      	subs	r3, r7, #0
 8006e00:	bfaa      	itet	ge
 8006e02:	2300      	movge	r3, #0
 8006e04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006e08:	f8c8 3000 	strge.w	r3, [r8]
 8006e0c:	4b9a      	ldr	r3, [pc, #616]	; (8007078 <_dtoa_r+0x2d8>)
 8006e0e:	bfbc      	itt	lt
 8006e10:	2201      	movlt	r2, #1
 8006e12:	f8c8 2000 	strlt.w	r2, [r8]
 8006e16:	ea33 030b 	bics.w	r3, r3, fp
 8006e1a:	d11b      	bne.n	8006e54 <_dtoa_r+0xb4>
 8006e1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e28:	4333      	orrs	r3, r6
 8006e2a:	f000 8592 	beq.w	8007952 <_dtoa_r+0xbb2>
 8006e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e30:	b963      	cbnz	r3, 8006e4c <_dtoa_r+0xac>
 8006e32:	4b92      	ldr	r3, [pc, #584]	; (800707c <_dtoa_r+0x2dc>)
 8006e34:	e022      	b.n	8006e7c <_dtoa_r+0xdc>
 8006e36:	4b92      	ldr	r3, [pc, #584]	; (8007080 <_dtoa_r+0x2e0>)
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	9801      	ldr	r0, [sp, #4]
 8006e42:	b013      	add	sp, #76	; 0x4c
 8006e44:	ecbd 8b04 	vpop	{d8-d9}
 8006e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4c:	4b8b      	ldr	r3, [pc, #556]	; (800707c <_dtoa_r+0x2dc>)
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	3303      	adds	r3, #3
 8006e52:	e7f3      	b.n	8006e3c <_dtoa_r+0x9c>
 8006e54:	2200      	movs	r2, #0
 8006e56:	2300      	movs	r3, #0
 8006e58:	4650      	mov	r0, sl
 8006e5a:	4659      	mov	r1, fp
 8006e5c:	f7f9 fe34 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e60:	ec4b ab19 	vmov	d9, sl, fp
 8006e64:	4680      	mov	r8, r0
 8006e66:	b158      	cbz	r0, 8006e80 <_dtoa_r+0xe0>
 8006e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 856b 	beq.w	800794c <_dtoa_r+0xbac>
 8006e76:	4883      	ldr	r0, [pc, #524]	; (8007084 <_dtoa_r+0x2e4>)
 8006e78:	6018      	str	r0, [r3, #0]
 8006e7a:	1e43      	subs	r3, r0, #1
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	e7df      	b.n	8006e40 <_dtoa_r+0xa0>
 8006e80:	ec4b ab10 	vmov	d0, sl, fp
 8006e84:	aa10      	add	r2, sp, #64	; 0x40
 8006e86:	a911      	add	r1, sp, #68	; 0x44
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f001 fad9 	bl	8008440 <__d2b>
 8006e8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006e92:	ee08 0a10 	vmov	s16, r0
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	f000 8084 	beq.w	8006fa4 <_dtoa_r+0x204>
 8006e9c:	ee19 3a90 	vmov	r3, s19
 8006ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ea4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006ea8:	4656      	mov	r6, sl
 8006eaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006eae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006eb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006eb6:	4b74      	ldr	r3, [pc, #464]	; (8007088 <_dtoa_r+0x2e8>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4630      	mov	r0, r6
 8006ebc:	4639      	mov	r1, r7
 8006ebe:	f7f9 f9e3 	bl	8000288 <__aeabi_dsub>
 8006ec2:	a365      	add	r3, pc, #404	; (adr r3, 8007058 <_dtoa_r+0x2b8>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f7f9 fb96 	bl	80005f8 <__aeabi_dmul>
 8006ecc:	a364      	add	r3, pc, #400	; (adr r3, 8007060 <_dtoa_r+0x2c0>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f7f9 f9db 	bl	800028c <__adddf3>
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	4628      	mov	r0, r5
 8006eda:	460f      	mov	r7, r1
 8006edc:	f7f9 fb22 	bl	8000524 <__aeabi_i2d>
 8006ee0:	a361      	add	r3, pc, #388	; (adr r3, 8007068 <_dtoa_r+0x2c8>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	f7f9 fb87 	bl	80005f8 <__aeabi_dmul>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4630      	mov	r0, r6
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	f7f9 f9cb 	bl	800028c <__adddf3>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	f7f9 fe2d 	bl	8000b58 <__aeabi_d2iz>
 8006efe:	2200      	movs	r2, #0
 8006f00:	9000      	str	r0, [sp, #0]
 8006f02:	2300      	movs	r3, #0
 8006f04:	4630      	mov	r0, r6
 8006f06:	4639      	mov	r1, r7
 8006f08:	f7f9 fde8 	bl	8000adc <__aeabi_dcmplt>
 8006f0c:	b150      	cbz	r0, 8006f24 <_dtoa_r+0x184>
 8006f0e:	9800      	ldr	r0, [sp, #0]
 8006f10:	f7f9 fb08 	bl	8000524 <__aeabi_i2d>
 8006f14:	4632      	mov	r2, r6
 8006f16:	463b      	mov	r3, r7
 8006f18:	f7f9 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f1c:	b910      	cbnz	r0, 8006f24 <_dtoa_r+0x184>
 8006f1e:	9b00      	ldr	r3, [sp, #0]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	9b00      	ldr	r3, [sp, #0]
 8006f26:	2b16      	cmp	r3, #22
 8006f28:	d85a      	bhi.n	8006fe0 <_dtoa_r+0x240>
 8006f2a:	9a00      	ldr	r2, [sp, #0]
 8006f2c:	4b57      	ldr	r3, [pc, #348]	; (800708c <_dtoa_r+0x2ec>)
 8006f2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	ec51 0b19 	vmov	r0, r1, d9
 8006f3a:	f7f9 fdcf 	bl	8000adc <__aeabi_dcmplt>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d050      	beq.n	8006fe4 <_dtoa_r+0x244>
 8006f42:	9b00      	ldr	r3, [sp, #0]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f4e:	1b5d      	subs	r5, r3, r5
 8006f50:	1e6b      	subs	r3, r5, #1
 8006f52:	9305      	str	r3, [sp, #20]
 8006f54:	bf45      	ittet	mi
 8006f56:	f1c5 0301 	rsbmi	r3, r5, #1
 8006f5a:	9304      	strmi	r3, [sp, #16]
 8006f5c:	2300      	movpl	r3, #0
 8006f5e:	2300      	movmi	r3, #0
 8006f60:	bf4c      	ite	mi
 8006f62:	9305      	strmi	r3, [sp, #20]
 8006f64:	9304      	strpl	r3, [sp, #16]
 8006f66:	9b00      	ldr	r3, [sp, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	db3d      	blt.n	8006fe8 <_dtoa_r+0x248>
 8006f6c:	9b05      	ldr	r3, [sp, #20]
 8006f6e:	9a00      	ldr	r2, [sp, #0]
 8006f70:	920a      	str	r2, [sp, #40]	; 0x28
 8006f72:	4413      	add	r3, r2
 8006f74:	9305      	str	r3, [sp, #20]
 8006f76:	2300      	movs	r3, #0
 8006f78:	9307      	str	r3, [sp, #28]
 8006f7a:	9b06      	ldr	r3, [sp, #24]
 8006f7c:	2b09      	cmp	r3, #9
 8006f7e:	f200 8089 	bhi.w	8007094 <_dtoa_r+0x2f4>
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	bfc4      	itt	gt
 8006f86:	3b04      	subgt	r3, #4
 8006f88:	9306      	strgt	r3, [sp, #24]
 8006f8a:	9b06      	ldr	r3, [sp, #24]
 8006f8c:	f1a3 0302 	sub.w	r3, r3, #2
 8006f90:	bfcc      	ite	gt
 8006f92:	2500      	movgt	r5, #0
 8006f94:	2501      	movle	r5, #1
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	f200 8087 	bhi.w	80070aa <_dtoa_r+0x30a>
 8006f9c:	e8df f003 	tbb	[pc, r3]
 8006fa0:	59383a2d 	.word	0x59383a2d
 8006fa4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006fa8:	441d      	add	r5, r3
 8006faa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	bfc1      	itttt	gt
 8006fb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006fba:	fa0b f303 	lslgt.w	r3, fp, r3
 8006fbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006fc2:	bfda      	itte	le
 8006fc4:	f1c3 0320 	rsble	r3, r3, #32
 8006fc8:	fa06 f003 	lslle.w	r0, r6, r3
 8006fcc:	4318      	orrgt	r0, r3
 8006fce:	f7f9 fa99 	bl	8000504 <__aeabi_ui2d>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006fda:	3d01      	subs	r5, #1
 8006fdc:	930e      	str	r3, [sp, #56]	; 0x38
 8006fde:	e76a      	b.n	8006eb6 <_dtoa_r+0x116>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e7b2      	b.n	8006f4a <_dtoa_r+0x1aa>
 8006fe4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fe6:	e7b1      	b.n	8006f4c <_dtoa_r+0x1ac>
 8006fe8:	9b04      	ldr	r3, [sp, #16]
 8006fea:	9a00      	ldr	r2, [sp, #0]
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	9304      	str	r3, [sp, #16]
 8006ff0:	4253      	negs	r3, r2
 8006ff2:	9307      	str	r3, [sp, #28]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ff8:	e7bf      	b.n	8006f7a <_dtoa_r+0x1da>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9308      	str	r3, [sp, #32]
 8006ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007000:	2b00      	cmp	r3, #0
 8007002:	dc55      	bgt.n	80070b0 <_dtoa_r+0x310>
 8007004:	2301      	movs	r3, #1
 8007006:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800700a:	461a      	mov	r2, r3
 800700c:	9209      	str	r2, [sp, #36]	; 0x24
 800700e:	e00c      	b.n	800702a <_dtoa_r+0x28a>
 8007010:	2301      	movs	r3, #1
 8007012:	e7f3      	b.n	8006ffc <_dtoa_r+0x25c>
 8007014:	2300      	movs	r3, #0
 8007016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007018:	9308      	str	r3, [sp, #32]
 800701a:	9b00      	ldr	r3, [sp, #0]
 800701c:	4413      	add	r3, r2
 800701e:	9302      	str	r3, [sp, #8]
 8007020:	3301      	adds	r3, #1
 8007022:	2b01      	cmp	r3, #1
 8007024:	9303      	str	r3, [sp, #12]
 8007026:	bfb8      	it	lt
 8007028:	2301      	movlt	r3, #1
 800702a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800702c:	2200      	movs	r2, #0
 800702e:	6042      	str	r2, [r0, #4]
 8007030:	2204      	movs	r2, #4
 8007032:	f102 0614 	add.w	r6, r2, #20
 8007036:	429e      	cmp	r6, r3
 8007038:	6841      	ldr	r1, [r0, #4]
 800703a:	d93d      	bls.n	80070b8 <_dtoa_r+0x318>
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fed7 	bl	8007df0 <_Balloc>
 8007042:	9001      	str	r0, [sp, #4]
 8007044:	2800      	cmp	r0, #0
 8007046:	d13b      	bne.n	80070c0 <_dtoa_r+0x320>
 8007048:	4b11      	ldr	r3, [pc, #68]	; (8007090 <_dtoa_r+0x2f0>)
 800704a:	4602      	mov	r2, r0
 800704c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007050:	e6c0      	b.n	8006dd4 <_dtoa_r+0x34>
 8007052:	2301      	movs	r3, #1
 8007054:	e7df      	b.n	8007016 <_dtoa_r+0x276>
 8007056:	bf00      	nop
 8007058:	636f4361 	.word	0x636f4361
 800705c:	3fd287a7 	.word	0x3fd287a7
 8007060:	8b60c8b3 	.word	0x8b60c8b3
 8007064:	3fc68a28 	.word	0x3fc68a28
 8007068:	509f79fb 	.word	0x509f79fb
 800706c:	3fd34413 	.word	0x3fd34413
 8007070:	08008dbd 	.word	0x08008dbd
 8007074:	08008dd4 	.word	0x08008dd4
 8007078:	7ff00000 	.word	0x7ff00000
 800707c:	08008db9 	.word	0x08008db9
 8007080:	08008db0 	.word	0x08008db0
 8007084:	08008d8d 	.word	0x08008d8d
 8007088:	3ff80000 	.word	0x3ff80000
 800708c:	08008f28 	.word	0x08008f28
 8007090:	08008e2f 	.word	0x08008e2f
 8007094:	2501      	movs	r5, #1
 8007096:	2300      	movs	r3, #0
 8007098:	9306      	str	r3, [sp, #24]
 800709a:	9508      	str	r5, [sp, #32]
 800709c:	f04f 33ff 	mov.w	r3, #4294967295
 80070a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070a4:	2200      	movs	r2, #0
 80070a6:	2312      	movs	r3, #18
 80070a8:	e7b0      	b.n	800700c <_dtoa_r+0x26c>
 80070aa:	2301      	movs	r3, #1
 80070ac:	9308      	str	r3, [sp, #32]
 80070ae:	e7f5      	b.n	800709c <_dtoa_r+0x2fc>
 80070b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070b6:	e7b8      	b.n	800702a <_dtoa_r+0x28a>
 80070b8:	3101      	adds	r1, #1
 80070ba:	6041      	str	r1, [r0, #4]
 80070bc:	0052      	lsls	r2, r2, #1
 80070be:	e7b8      	b.n	8007032 <_dtoa_r+0x292>
 80070c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c2:	9a01      	ldr	r2, [sp, #4]
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	9b03      	ldr	r3, [sp, #12]
 80070c8:	2b0e      	cmp	r3, #14
 80070ca:	f200 809d 	bhi.w	8007208 <_dtoa_r+0x468>
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	f000 809a 	beq.w	8007208 <_dtoa_r+0x468>
 80070d4:	9b00      	ldr	r3, [sp, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	dd32      	ble.n	8007140 <_dtoa_r+0x3a0>
 80070da:	4ab7      	ldr	r2, [pc, #732]	; (80073b8 <_dtoa_r+0x618>)
 80070dc:	f003 030f 	and.w	r3, r3, #15
 80070e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070e8:	9b00      	ldr	r3, [sp, #0]
 80070ea:	05d8      	lsls	r0, r3, #23
 80070ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80070f0:	d516      	bpl.n	8007120 <_dtoa_r+0x380>
 80070f2:	4bb2      	ldr	r3, [pc, #712]	; (80073bc <_dtoa_r+0x61c>)
 80070f4:	ec51 0b19 	vmov	r0, r1, d9
 80070f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070fc:	f7f9 fba6 	bl	800084c <__aeabi_ddiv>
 8007100:	f007 070f 	and.w	r7, r7, #15
 8007104:	4682      	mov	sl, r0
 8007106:	468b      	mov	fp, r1
 8007108:	2503      	movs	r5, #3
 800710a:	4eac      	ldr	r6, [pc, #688]	; (80073bc <_dtoa_r+0x61c>)
 800710c:	b957      	cbnz	r7, 8007124 <_dtoa_r+0x384>
 800710e:	4642      	mov	r2, r8
 8007110:	464b      	mov	r3, r9
 8007112:	4650      	mov	r0, sl
 8007114:	4659      	mov	r1, fp
 8007116:	f7f9 fb99 	bl	800084c <__aeabi_ddiv>
 800711a:	4682      	mov	sl, r0
 800711c:	468b      	mov	fp, r1
 800711e:	e028      	b.n	8007172 <_dtoa_r+0x3d2>
 8007120:	2502      	movs	r5, #2
 8007122:	e7f2      	b.n	800710a <_dtoa_r+0x36a>
 8007124:	07f9      	lsls	r1, r7, #31
 8007126:	d508      	bpl.n	800713a <_dtoa_r+0x39a>
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007130:	f7f9 fa62 	bl	80005f8 <__aeabi_dmul>
 8007134:	3501      	adds	r5, #1
 8007136:	4680      	mov	r8, r0
 8007138:	4689      	mov	r9, r1
 800713a:	107f      	asrs	r7, r7, #1
 800713c:	3608      	adds	r6, #8
 800713e:	e7e5      	b.n	800710c <_dtoa_r+0x36c>
 8007140:	f000 809b 	beq.w	800727a <_dtoa_r+0x4da>
 8007144:	9b00      	ldr	r3, [sp, #0]
 8007146:	4f9d      	ldr	r7, [pc, #628]	; (80073bc <_dtoa_r+0x61c>)
 8007148:	425e      	negs	r6, r3
 800714a:	4b9b      	ldr	r3, [pc, #620]	; (80073b8 <_dtoa_r+0x618>)
 800714c:	f006 020f 	and.w	r2, r6, #15
 8007150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	ec51 0b19 	vmov	r0, r1, d9
 800715c:	f7f9 fa4c 	bl	80005f8 <__aeabi_dmul>
 8007160:	1136      	asrs	r6, r6, #4
 8007162:	4682      	mov	sl, r0
 8007164:	468b      	mov	fp, r1
 8007166:	2300      	movs	r3, #0
 8007168:	2502      	movs	r5, #2
 800716a:	2e00      	cmp	r6, #0
 800716c:	d17a      	bne.n	8007264 <_dtoa_r+0x4c4>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1d3      	bne.n	800711a <_dtoa_r+0x37a>
 8007172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8082 	beq.w	800727e <_dtoa_r+0x4de>
 800717a:	4b91      	ldr	r3, [pc, #580]	; (80073c0 <_dtoa_r+0x620>)
 800717c:	2200      	movs	r2, #0
 800717e:	4650      	mov	r0, sl
 8007180:	4659      	mov	r1, fp
 8007182:	f7f9 fcab 	bl	8000adc <__aeabi_dcmplt>
 8007186:	2800      	cmp	r0, #0
 8007188:	d079      	beq.n	800727e <_dtoa_r+0x4de>
 800718a:	9b03      	ldr	r3, [sp, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d076      	beq.n	800727e <_dtoa_r+0x4de>
 8007190:	9b02      	ldr	r3, [sp, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	dd36      	ble.n	8007204 <_dtoa_r+0x464>
 8007196:	9b00      	ldr	r3, [sp, #0]
 8007198:	4650      	mov	r0, sl
 800719a:	4659      	mov	r1, fp
 800719c:	1e5f      	subs	r7, r3, #1
 800719e:	2200      	movs	r2, #0
 80071a0:	4b88      	ldr	r3, [pc, #544]	; (80073c4 <_dtoa_r+0x624>)
 80071a2:	f7f9 fa29 	bl	80005f8 <__aeabi_dmul>
 80071a6:	9e02      	ldr	r6, [sp, #8]
 80071a8:	4682      	mov	sl, r0
 80071aa:	468b      	mov	fp, r1
 80071ac:	3501      	adds	r5, #1
 80071ae:	4628      	mov	r0, r5
 80071b0:	f7f9 f9b8 	bl	8000524 <__aeabi_i2d>
 80071b4:	4652      	mov	r2, sl
 80071b6:	465b      	mov	r3, fp
 80071b8:	f7f9 fa1e 	bl	80005f8 <__aeabi_dmul>
 80071bc:	4b82      	ldr	r3, [pc, #520]	; (80073c8 <_dtoa_r+0x628>)
 80071be:	2200      	movs	r2, #0
 80071c0:	f7f9 f864 	bl	800028c <__adddf3>
 80071c4:	46d0      	mov	r8, sl
 80071c6:	46d9      	mov	r9, fp
 80071c8:	4682      	mov	sl, r0
 80071ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80071ce:	2e00      	cmp	r6, #0
 80071d0:	d158      	bne.n	8007284 <_dtoa_r+0x4e4>
 80071d2:	4b7e      	ldr	r3, [pc, #504]	; (80073cc <_dtoa_r+0x62c>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	4640      	mov	r0, r8
 80071d8:	4649      	mov	r1, r9
 80071da:	f7f9 f855 	bl	8000288 <__aeabi_dsub>
 80071de:	4652      	mov	r2, sl
 80071e0:	465b      	mov	r3, fp
 80071e2:	4680      	mov	r8, r0
 80071e4:	4689      	mov	r9, r1
 80071e6:	f7f9 fc97 	bl	8000b18 <__aeabi_dcmpgt>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f040 8295 	bne.w	800771a <_dtoa_r+0x97a>
 80071f0:	4652      	mov	r2, sl
 80071f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071f6:	4640      	mov	r0, r8
 80071f8:	4649      	mov	r1, r9
 80071fa:	f7f9 fc6f 	bl	8000adc <__aeabi_dcmplt>
 80071fe:	2800      	cmp	r0, #0
 8007200:	f040 8289 	bne.w	8007716 <_dtoa_r+0x976>
 8007204:	ec5b ab19 	vmov	sl, fp, d9
 8007208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800720a:	2b00      	cmp	r3, #0
 800720c:	f2c0 8148 	blt.w	80074a0 <_dtoa_r+0x700>
 8007210:	9a00      	ldr	r2, [sp, #0]
 8007212:	2a0e      	cmp	r2, #14
 8007214:	f300 8144 	bgt.w	80074a0 <_dtoa_r+0x700>
 8007218:	4b67      	ldr	r3, [pc, #412]	; (80073b8 <_dtoa_r+0x618>)
 800721a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800721e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007224:	2b00      	cmp	r3, #0
 8007226:	f280 80d5 	bge.w	80073d4 <_dtoa_r+0x634>
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f300 80d1 	bgt.w	80073d4 <_dtoa_r+0x634>
 8007232:	f040 826f 	bne.w	8007714 <_dtoa_r+0x974>
 8007236:	4b65      	ldr	r3, [pc, #404]	; (80073cc <_dtoa_r+0x62c>)
 8007238:	2200      	movs	r2, #0
 800723a:	4640      	mov	r0, r8
 800723c:	4649      	mov	r1, r9
 800723e:	f7f9 f9db 	bl	80005f8 <__aeabi_dmul>
 8007242:	4652      	mov	r2, sl
 8007244:	465b      	mov	r3, fp
 8007246:	f7f9 fc5d 	bl	8000b04 <__aeabi_dcmpge>
 800724a:	9e03      	ldr	r6, [sp, #12]
 800724c:	4637      	mov	r7, r6
 800724e:	2800      	cmp	r0, #0
 8007250:	f040 8245 	bne.w	80076de <_dtoa_r+0x93e>
 8007254:	9d01      	ldr	r5, [sp, #4]
 8007256:	2331      	movs	r3, #49	; 0x31
 8007258:	f805 3b01 	strb.w	r3, [r5], #1
 800725c:	9b00      	ldr	r3, [sp, #0]
 800725e:	3301      	adds	r3, #1
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	e240      	b.n	80076e6 <_dtoa_r+0x946>
 8007264:	07f2      	lsls	r2, r6, #31
 8007266:	d505      	bpl.n	8007274 <_dtoa_r+0x4d4>
 8007268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726c:	f7f9 f9c4 	bl	80005f8 <__aeabi_dmul>
 8007270:	3501      	adds	r5, #1
 8007272:	2301      	movs	r3, #1
 8007274:	1076      	asrs	r6, r6, #1
 8007276:	3708      	adds	r7, #8
 8007278:	e777      	b.n	800716a <_dtoa_r+0x3ca>
 800727a:	2502      	movs	r5, #2
 800727c:	e779      	b.n	8007172 <_dtoa_r+0x3d2>
 800727e:	9f00      	ldr	r7, [sp, #0]
 8007280:	9e03      	ldr	r6, [sp, #12]
 8007282:	e794      	b.n	80071ae <_dtoa_r+0x40e>
 8007284:	9901      	ldr	r1, [sp, #4]
 8007286:	4b4c      	ldr	r3, [pc, #304]	; (80073b8 <_dtoa_r+0x618>)
 8007288:	4431      	add	r1, r6
 800728a:	910d      	str	r1, [sp, #52]	; 0x34
 800728c:	9908      	ldr	r1, [sp, #32]
 800728e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007292:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007296:	2900      	cmp	r1, #0
 8007298:	d043      	beq.n	8007322 <_dtoa_r+0x582>
 800729a:	494d      	ldr	r1, [pc, #308]	; (80073d0 <_dtoa_r+0x630>)
 800729c:	2000      	movs	r0, #0
 800729e:	f7f9 fad5 	bl	800084c <__aeabi_ddiv>
 80072a2:	4652      	mov	r2, sl
 80072a4:	465b      	mov	r3, fp
 80072a6:	f7f8 ffef 	bl	8000288 <__aeabi_dsub>
 80072aa:	9d01      	ldr	r5, [sp, #4]
 80072ac:	4682      	mov	sl, r0
 80072ae:	468b      	mov	fp, r1
 80072b0:	4649      	mov	r1, r9
 80072b2:	4640      	mov	r0, r8
 80072b4:	f7f9 fc50 	bl	8000b58 <__aeabi_d2iz>
 80072b8:	4606      	mov	r6, r0
 80072ba:	f7f9 f933 	bl	8000524 <__aeabi_i2d>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4640      	mov	r0, r8
 80072c4:	4649      	mov	r1, r9
 80072c6:	f7f8 ffdf 	bl	8000288 <__aeabi_dsub>
 80072ca:	3630      	adds	r6, #48	; 0x30
 80072cc:	f805 6b01 	strb.w	r6, [r5], #1
 80072d0:	4652      	mov	r2, sl
 80072d2:	465b      	mov	r3, fp
 80072d4:	4680      	mov	r8, r0
 80072d6:	4689      	mov	r9, r1
 80072d8:	f7f9 fc00 	bl	8000adc <__aeabi_dcmplt>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d163      	bne.n	80073a8 <_dtoa_r+0x608>
 80072e0:	4642      	mov	r2, r8
 80072e2:	464b      	mov	r3, r9
 80072e4:	4936      	ldr	r1, [pc, #216]	; (80073c0 <_dtoa_r+0x620>)
 80072e6:	2000      	movs	r0, #0
 80072e8:	f7f8 ffce 	bl	8000288 <__aeabi_dsub>
 80072ec:	4652      	mov	r2, sl
 80072ee:	465b      	mov	r3, fp
 80072f0:	f7f9 fbf4 	bl	8000adc <__aeabi_dcmplt>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	f040 80b5 	bne.w	8007464 <_dtoa_r+0x6c4>
 80072fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072fc:	429d      	cmp	r5, r3
 80072fe:	d081      	beq.n	8007204 <_dtoa_r+0x464>
 8007300:	4b30      	ldr	r3, [pc, #192]	; (80073c4 <_dtoa_r+0x624>)
 8007302:	2200      	movs	r2, #0
 8007304:	4650      	mov	r0, sl
 8007306:	4659      	mov	r1, fp
 8007308:	f7f9 f976 	bl	80005f8 <__aeabi_dmul>
 800730c:	4b2d      	ldr	r3, [pc, #180]	; (80073c4 <_dtoa_r+0x624>)
 800730e:	4682      	mov	sl, r0
 8007310:	468b      	mov	fp, r1
 8007312:	4640      	mov	r0, r8
 8007314:	4649      	mov	r1, r9
 8007316:	2200      	movs	r2, #0
 8007318:	f7f9 f96e 	bl	80005f8 <__aeabi_dmul>
 800731c:	4680      	mov	r8, r0
 800731e:	4689      	mov	r9, r1
 8007320:	e7c6      	b.n	80072b0 <_dtoa_r+0x510>
 8007322:	4650      	mov	r0, sl
 8007324:	4659      	mov	r1, fp
 8007326:	f7f9 f967 	bl	80005f8 <__aeabi_dmul>
 800732a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800732c:	9d01      	ldr	r5, [sp, #4]
 800732e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007330:	4682      	mov	sl, r0
 8007332:	468b      	mov	fp, r1
 8007334:	4649      	mov	r1, r9
 8007336:	4640      	mov	r0, r8
 8007338:	f7f9 fc0e 	bl	8000b58 <__aeabi_d2iz>
 800733c:	4606      	mov	r6, r0
 800733e:	f7f9 f8f1 	bl	8000524 <__aeabi_i2d>
 8007342:	3630      	adds	r6, #48	; 0x30
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4640      	mov	r0, r8
 800734a:	4649      	mov	r1, r9
 800734c:	f7f8 ff9c 	bl	8000288 <__aeabi_dsub>
 8007350:	f805 6b01 	strb.w	r6, [r5], #1
 8007354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007356:	429d      	cmp	r5, r3
 8007358:	4680      	mov	r8, r0
 800735a:	4689      	mov	r9, r1
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	d124      	bne.n	80073ac <_dtoa_r+0x60c>
 8007362:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <_dtoa_r+0x630>)
 8007364:	4650      	mov	r0, sl
 8007366:	4659      	mov	r1, fp
 8007368:	f7f8 ff90 	bl	800028c <__adddf3>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4640      	mov	r0, r8
 8007372:	4649      	mov	r1, r9
 8007374:	f7f9 fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 8007378:	2800      	cmp	r0, #0
 800737a:	d173      	bne.n	8007464 <_dtoa_r+0x6c4>
 800737c:	4652      	mov	r2, sl
 800737e:	465b      	mov	r3, fp
 8007380:	4913      	ldr	r1, [pc, #76]	; (80073d0 <_dtoa_r+0x630>)
 8007382:	2000      	movs	r0, #0
 8007384:	f7f8 ff80 	bl	8000288 <__aeabi_dsub>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4640      	mov	r0, r8
 800738e:	4649      	mov	r1, r9
 8007390:	f7f9 fba4 	bl	8000adc <__aeabi_dcmplt>
 8007394:	2800      	cmp	r0, #0
 8007396:	f43f af35 	beq.w	8007204 <_dtoa_r+0x464>
 800739a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800739c:	1e6b      	subs	r3, r5, #1
 800739e:	930f      	str	r3, [sp, #60]	; 0x3c
 80073a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073a4:	2b30      	cmp	r3, #48	; 0x30
 80073a6:	d0f8      	beq.n	800739a <_dtoa_r+0x5fa>
 80073a8:	9700      	str	r7, [sp, #0]
 80073aa:	e049      	b.n	8007440 <_dtoa_r+0x6a0>
 80073ac:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <_dtoa_r+0x624>)
 80073ae:	f7f9 f923 	bl	80005f8 <__aeabi_dmul>
 80073b2:	4680      	mov	r8, r0
 80073b4:	4689      	mov	r9, r1
 80073b6:	e7bd      	b.n	8007334 <_dtoa_r+0x594>
 80073b8:	08008f28 	.word	0x08008f28
 80073bc:	08008f00 	.word	0x08008f00
 80073c0:	3ff00000 	.word	0x3ff00000
 80073c4:	40240000 	.word	0x40240000
 80073c8:	401c0000 	.word	0x401c0000
 80073cc:	40140000 	.word	0x40140000
 80073d0:	3fe00000 	.word	0x3fe00000
 80073d4:	9d01      	ldr	r5, [sp, #4]
 80073d6:	4656      	mov	r6, sl
 80073d8:	465f      	mov	r7, fp
 80073da:	4642      	mov	r2, r8
 80073dc:	464b      	mov	r3, r9
 80073de:	4630      	mov	r0, r6
 80073e0:	4639      	mov	r1, r7
 80073e2:	f7f9 fa33 	bl	800084c <__aeabi_ddiv>
 80073e6:	f7f9 fbb7 	bl	8000b58 <__aeabi_d2iz>
 80073ea:	4682      	mov	sl, r0
 80073ec:	f7f9 f89a 	bl	8000524 <__aeabi_i2d>
 80073f0:	4642      	mov	r2, r8
 80073f2:	464b      	mov	r3, r9
 80073f4:	f7f9 f900 	bl	80005f8 <__aeabi_dmul>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4630      	mov	r0, r6
 80073fe:	4639      	mov	r1, r7
 8007400:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007404:	f7f8 ff40 	bl	8000288 <__aeabi_dsub>
 8007408:	f805 6b01 	strb.w	r6, [r5], #1
 800740c:	9e01      	ldr	r6, [sp, #4]
 800740e:	9f03      	ldr	r7, [sp, #12]
 8007410:	1bae      	subs	r6, r5, r6
 8007412:	42b7      	cmp	r7, r6
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	d135      	bne.n	8007486 <_dtoa_r+0x6e6>
 800741a:	f7f8 ff37 	bl	800028c <__adddf3>
 800741e:	4642      	mov	r2, r8
 8007420:	464b      	mov	r3, r9
 8007422:	4606      	mov	r6, r0
 8007424:	460f      	mov	r7, r1
 8007426:	f7f9 fb77 	bl	8000b18 <__aeabi_dcmpgt>
 800742a:	b9d0      	cbnz	r0, 8007462 <_dtoa_r+0x6c2>
 800742c:	4642      	mov	r2, r8
 800742e:	464b      	mov	r3, r9
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f9 fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007438:	b110      	cbz	r0, 8007440 <_dtoa_r+0x6a0>
 800743a:	f01a 0f01 	tst.w	sl, #1
 800743e:	d110      	bne.n	8007462 <_dtoa_r+0x6c2>
 8007440:	4620      	mov	r0, r4
 8007442:	ee18 1a10 	vmov	r1, s16
 8007446:	f000 fd13 	bl	8007e70 <_Bfree>
 800744a:	2300      	movs	r3, #0
 800744c:	9800      	ldr	r0, [sp, #0]
 800744e:	702b      	strb	r3, [r5, #0]
 8007450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007452:	3001      	adds	r0, #1
 8007454:	6018      	str	r0, [r3, #0]
 8007456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007458:	2b00      	cmp	r3, #0
 800745a:	f43f acf1 	beq.w	8006e40 <_dtoa_r+0xa0>
 800745e:	601d      	str	r5, [r3, #0]
 8007460:	e4ee      	b.n	8006e40 <_dtoa_r+0xa0>
 8007462:	9f00      	ldr	r7, [sp, #0]
 8007464:	462b      	mov	r3, r5
 8007466:	461d      	mov	r5, r3
 8007468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800746c:	2a39      	cmp	r2, #57	; 0x39
 800746e:	d106      	bne.n	800747e <_dtoa_r+0x6de>
 8007470:	9a01      	ldr	r2, [sp, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d1f7      	bne.n	8007466 <_dtoa_r+0x6c6>
 8007476:	9901      	ldr	r1, [sp, #4]
 8007478:	2230      	movs	r2, #48	; 0x30
 800747a:	3701      	adds	r7, #1
 800747c:	700a      	strb	r2, [r1, #0]
 800747e:	781a      	ldrb	r2, [r3, #0]
 8007480:	3201      	adds	r2, #1
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	e790      	b.n	80073a8 <_dtoa_r+0x608>
 8007486:	4ba6      	ldr	r3, [pc, #664]	; (8007720 <_dtoa_r+0x980>)
 8007488:	2200      	movs	r2, #0
 800748a:	f7f9 f8b5 	bl	80005f8 <__aeabi_dmul>
 800748e:	2200      	movs	r2, #0
 8007490:	2300      	movs	r3, #0
 8007492:	4606      	mov	r6, r0
 8007494:	460f      	mov	r7, r1
 8007496:	f7f9 fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800749a:	2800      	cmp	r0, #0
 800749c:	d09d      	beq.n	80073da <_dtoa_r+0x63a>
 800749e:	e7cf      	b.n	8007440 <_dtoa_r+0x6a0>
 80074a0:	9a08      	ldr	r2, [sp, #32]
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	f000 80d7 	beq.w	8007656 <_dtoa_r+0x8b6>
 80074a8:	9a06      	ldr	r2, [sp, #24]
 80074aa:	2a01      	cmp	r2, #1
 80074ac:	f300 80ba 	bgt.w	8007624 <_dtoa_r+0x884>
 80074b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074b2:	2a00      	cmp	r2, #0
 80074b4:	f000 80b2 	beq.w	800761c <_dtoa_r+0x87c>
 80074b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074bc:	9e07      	ldr	r6, [sp, #28]
 80074be:	9d04      	ldr	r5, [sp, #16]
 80074c0:	9a04      	ldr	r2, [sp, #16]
 80074c2:	441a      	add	r2, r3
 80074c4:	9204      	str	r2, [sp, #16]
 80074c6:	9a05      	ldr	r2, [sp, #20]
 80074c8:	2101      	movs	r1, #1
 80074ca:	441a      	add	r2, r3
 80074cc:	4620      	mov	r0, r4
 80074ce:	9205      	str	r2, [sp, #20]
 80074d0:	f000 fd86 	bl	8007fe0 <__i2b>
 80074d4:	4607      	mov	r7, r0
 80074d6:	2d00      	cmp	r5, #0
 80074d8:	dd0c      	ble.n	80074f4 <_dtoa_r+0x754>
 80074da:	9b05      	ldr	r3, [sp, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dd09      	ble.n	80074f4 <_dtoa_r+0x754>
 80074e0:	42ab      	cmp	r3, r5
 80074e2:	9a04      	ldr	r2, [sp, #16]
 80074e4:	bfa8      	it	ge
 80074e6:	462b      	movge	r3, r5
 80074e8:	1ad2      	subs	r2, r2, r3
 80074ea:	9204      	str	r2, [sp, #16]
 80074ec:	9a05      	ldr	r2, [sp, #20]
 80074ee:	1aed      	subs	r5, r5, r3
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	9305      	str	r3, [sp, #20]
 80074f4:	9b07      	ldr	r3, [sp, #28]
 80074f6:	b31b      	cbz	r3, 8007540 <_dtoa_r+0x7a0>
 80074f8:	9b08      	ldr	r3, [sp, #32]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 80af 	beq.w	800765e <_dtoa_r+0x8be>
 8007500:	2e00      	cmp	r6, #0
 8007502:	dd13      	ble.n	800752c <_dtoa_r+0x78c>
 8007504:	4639      	mov	r1, r7
 8007506:	4632      	mov	r2, r6
 8007508:	4620      	mov	r0, r4
 800750a:	f000 fe29 	bl	8008160 <__pow5mult>
 800750e:	ee18 2a10 	vmov	r2, s16
 8007512:	4601      	mov	r1, r0
 8007514:	4607      	mov	r7, r0
 8007516:	4620      	mov	r0, r4
 8007518:	f000 fd78 	bl	800800c <__multiply>
 800751c:	ee18 1a10 	vmov	r1, s16
 8007520:	4680      	mov	r8, r0
 8007522:	4620      	mov	r0, r4
 8007524:	f000 fca4 	bl	8007e70 <_Bfree>
 8007528:	ee08 8a10 	vmov	s16, r8
 800752c:	9b07      	ldr	r3, [sp, #28]
 800752e:	1b9a      	subs	r2, r3, r6
 8007530:	d006      	beq.n	8007540 <_dtoa_r+0x7a0>
 8007532:	ee18 1a10 	vmov	r1, s16
 8007536:	4620      	mov	r0, r4
 8007538:	f000 fe12 	bl	8008160 <__pow5mult>
 800753c:	ee08 0a10 	vmov	s16, r0
 8007540:	2101      	movs	r1, #1
 8007542:	4620      	mov	r0, r4
 8007544:	f000 fd4c 	bl	8007fe0 <__i2b>
 8007548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754a:	2b00      	cmp	r3, #0
 800754c:	4606      	mov	r6, r0
 800754e:	f340 8088 	ble.w	8007662 <_dtoa_r+0x8c2>
 8007552:	461a      	mov	r2, r3
 8007554:	4601      	mov	r1, r0
 8007556:	4620      	mov	r0, r4
 8007558:	f000 fe02 	bl	8008160 <__pow5mult>
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	2b01      	cmp	r3, #1
 8007560:	4606      	mov	r6, r0
 8007562:	f340 8081 	ble.w	8007668 <_dtoa_r+0x8c8>
 8007566:	f04f 0800 	mov.w	r8, #0
 800756a:	6933      	ldr	r3, [r6, #16]
 800756c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007570:	6918      	ldr	r0, [r3, #16]
 8007572:	f000 fce5 	bl	8007f40 <__hi0bits>
 8007576:	f1c0 0020 	rsb	r0, r0, #32
 800757a:	9b05      	ldr	r3, [sp, #20]
 800757c:	4418      	add	r0, r3
 800757e:	f010 001f 	ands.w	r0, r0, #31
 8007582:	f000 8092 	beq.w	80076aa <_dtoa_r+0x90a>
 8007586:	f1c0 0320 	rsb	r3, r0, #32
 800758a:	2b04      	cmp	r3, #4
 800758c:	f340 808a 	ble.w	80076a4 <_dtoa_r+0x904>
 8007590:	f1c0 001c 	rsb	r0, r0, #28
 8007594:	9b04      	ldr	r3, [sp, #16]
 8007596:	4403      	add	r3, r0
 8007598:	9304      	str	r3, [sp, #16]
 800759a:	9b05      	ldr	r3, [sp, #20]
 800759c:	4403      	add	r3, r0
 800759e:	4405      	add	r5, r0
 80075a0:	9305      	str	r3, [sp, #20]
 80075a2:	9b04      	ldr	r3, [sp, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dd07      	ble.n	80075b8 <_dtoa_r+0x818>
 80075a8:	ee18 1a10 	vmov	r1, s16
 80075ac:	461a      	mov	r2, r3
 80075ae:	4620      	mov	r0, r4
 80075b0:	f000 fe30 	bl	8008214 <__lshift>
 80075b4:	ee08 0a10 	vmov	s16, r0
 80075b8:	9b05      	ldr	r3, [sp, #20]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	dd05      	ble.n	80075ca <_dtoa_r+0x82a>
 80075be:	4631      	mov	r1, r6
 80075c0:	461a      	mov	r2, r3
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 fe26 	bl	8008214 <__lshift>
 80075c8:	4606      	mov	r6, r0
 80075ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d06e      	beq.n	80076ae <_dtoa_r+0x90e>
 80075d0:	ee18 0a10 	vmov	r0, s16
 80075d4:	4631      	mov	r1, r6
 80075d6:	f000 fe8d 	bl	80082f4 <__mcmp>
 80075da:	2800      	cmp	r0, #0
 80075dc:	da67      	bge.n	80076ae <_dtoa_r+0x90e>
 80075de:	9b00      	ldr	r3, [sp, #0]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	ee18 1a10 	vmov	r1, s16
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	220a      	movs	r2, #10
 80075ea:	2300      	movs	r3, #0
 80075ec:	4620      	mov	r0, r4
 80075ee:	f000 fc61 	bl	8007eb4 <__multadd>
 80075f2:	9b08      	ldr	r3, [sp, #32]
 80075f4:	ee08 0a10 	vmov	s16, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 81b1 	beq.w	8007960 <_dtoa_r+0xbc0>
 80075fe:	2300      	movs	r3, #0
 8007600:	4639      	mov	r1, r7
 8007602:	220a      	movs	r2, #10
 8007604:	4620      	mov	r0, r4
 8007606:	f000 fc55 	bl	8007eb4 <__multadd>
 800760a:	9b02      	ldr	r3, [sp, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	4607      	mov	r7, r0
 8007610:	f300 808e 	bgt.w	8007730 <_dtoa_r+0x990>
 8007614:	9b06      	ldr	r3, [sp, #24]
 8007616:	2b02      	cmp	r3, #2
 8007618:	dc51      	bgt.n	80076be <_dtoa_r+0x91e>
 800761a:	e089      	b.n	8007730 <_dtoa_r+0x990>
 800761c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800761e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007622:	e74b      	b.n	80074bc <_dtoa_r+0x71c>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	1e5e      	subs	r6, r3, #1
 8007628:	9b07      	ldr	r3, [sp, #28]
 800762a:	42b3      	cmp	r3, r6
 800762c:	bfbf      	itttt	lt
 800762e:	9b07      	ldrlt	r3, [sp, #28]
 8007630:	9607      	strlt	r6, [sp, #28]
 8007632:	1af2      	sublt	r2, r6, r3
 8007634:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007636:	bfb6      	itet	lt
 8007638:	189b      	addlt	r3, r3, r2
 800763a:	1b9e      	subge	r6, r3, r6
 800763c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800763e:	9b03      	ldr	r3, [sp, #12]
 8007640:	bfb8      	it	lt
 8007642:	2600      	movlt	r6, #0
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfb7      	itett	lt
 8007648:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800764c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007650:	1a9d      	sublt	r5, r3, r2
 8007652:	2300      	movlt	r3, #0
 8007654:	e734      	b.n	80074c0 <_dtoa_r+0x720>
 8007656:	9e07      	ldr	r6, [sp, #28]
 8007658:	9d04      	ldr	r5, [sp, #16]
 800765a:	9f08      	ldr	r7, [sp, #32]
 800765c:	e73b      	b.n	80074d6 <_dtoa_r+0x736>
 800765e:	9a07      	ldr	r2, [sp, #28]
 8007660:	e767      	b.n	8007532 <_dtoa_r+0x792>
 8007662:	9b06      	ldr	r3, [sp, #24]
 8007664:	2b01      	cmp	r3, #1
 8007666:	dc18      	bgt.n	800769a <_dtoa_r+0x8fa>
 8007668:	f1ba 0f00 	cmp.w	sl, #0
 800766c:	d115      	bne.n	800769a <_dtoa_r+0x8fa>
 800766e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007672:	b993      	cbnz	r3, 800769a <_dtoa_r+0x8fa>
 8007674:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007678:	0d1b      	lsrs	r3, r3, #20
 800767a:	051b      	lsls	r3, r3, #20
 800767c:	b183      	cbz	r3, 80076a0 <_dtoa_r+0x900>
 800767e:	9b04      	ldr	r3, [sp, #16]
 8007680:	3301      	adds	r3, #1
 8007682:	9304      	str	r3, [sp, #16]
 8007684:	9b05      	ldr	r3, [sp, #20]
 8007686:	3301      	adds	r3, #1
 8007688:	9305      	str	r3, [sp, #20]
 800768a:	f04f 0801 	mov.w	r8, #1
 800768e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007690:	2b00      	cmp	r3, #0
 8007692:	f47f af6a 	bne.w	800756a <_dtoa_r+0x7ca>
 8007696:	2001      	movs	r0, #1
 8007698:	e76f      	b.n	800757a <_dtoa_r+0x7da>
 800769a:	f04f 0800 	mov.w	r8, #0
 800769e:	e7f6      	b.n	800768e <_dtoa_r+0x8ee>
 80076a0:	4698      	mov	r8, r3
 80076a2:	e7f4      	b.n	800768e <_dtoa_r+0x8ee>
 80076a4:	f43f af7d 	beq.w	80075a2 <_dtoa_r+0x802>
 80076a8:	4618      	mov	r0, r3
 80076aa:	301c      	adds	r0, #28
 80076ac:	e772      	b.n	8007594 <_dtoa_r+0x7f4>
 80076ae:	9b03      	ldr	r3, [sp, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	dc37      	bgt.n	8007724 <_dtoa_r+0x984>
 80076b4:	9b06      	ldr	r3, [sp, #24]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	dd34      	ble.n	8007724 <_dtoa_r+0x984>
 80076ba:	9b03      	ldr	r3, [sp, #12]
 80076bc:	9302      	str	r3, [sp, #8]
 80076be:	9b02      	ldr	r3, [sp, #8]
 80076c0:	b96b      	cbnz	r3, 80076de <_dtoa_r+0x93e>
 80076c2:	4631      	mov	r1, r6
 80076c4:	2205      	movs	r2, #5
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 fbf4 	bl	8007eb4 <__multadd>
 80076cc:	4601      	mov	r1, r0
 80076ce:	4606      	mov	r6, r0
 80076d0:	ee18 0a10 	vmov	r0, s16
 80076d4:	f000 fe0e 	bl	80082f4 <__mcmp>
 80076d8:	2800      	cmp	r0, #0
 80076da:	f73f adbb 	bgt.w	8007254 <_dtoa_r+0x4b4>
 80076de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e0:	9d01      	ldr	r5, [sp, #4]
 80076e2:	43db      	mvns	r3, r3
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	f04f 0800 	mov.w	r8, #0
 80076ea:	4631      	mov	r1, r6
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 fbbf 	bl	8007e70 <_Bfree>
 80076f2:	2f00      	cmp	r7, #0
 80076f4:	f43f aea4 	beq.w	8007440 <_dtoa_r+0x6a0>
 80076f8:	f1b8 0f00 	cmp.w	r8, #0
 80076fc:	d005      	beq.n	800770a <_dtoa_r+0x96a>
 80076fe:	45b8      	cmp	r8, r7
 8007700:	d003      	beq.n	800770a <_dtoa_r+0x96a>
 8007702:	4641      	mov	r1, r8
 8007704:	4620      	mov	r0, r4
 8007706:	f000 fbb3 	bl	8007e70 <_Bfree>
 800770a:	4639      	mov	r1, r7
 800770c:	4620      	mov	r0, r4
 800770e:	f000 fbaf 	bl	8007e70 <_Bfree>
 8007712:	e695      	b.n	8007440 <_dtoa_r+0x6a0>
 8007714:	2600      	movs	r6, #0
 8007716:	4637      	mov	r7, r6
 8007718:	e7e1      	b.n	80076de <_dtoa_r+0x93e>
 800771a:	9700      	str	r7, [sp, #0]
 800771c:	4637      	mov	r7, r6
 800771e:	e599      	b.n	8007254 <_dtoa_r+0x4b4>
 8007720:	40240000 	.word	0x40240000
 8007724:	9b08      	ldr	r3, [sp, #32]
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 80ca 	beq.w	80078c0 <_dtoa_r+0xb20>
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	9302      	str	r3, [sp, #8]
 8007730:	2d00      	cmp	r5, #0
 8007732:	dd05      	ble.n	8007740 <_dtoa_r+0x9a0>
 8007734:	4639      	mov	r1, r7
 8007736:	462a      	mov	r2, r5
 8007738:	4620      	mov	r0, r4
 800773a:	f000 fd6b 	bl	8008214 <__lshift>
 800773e:	4607      	mov	r7, r0
 8007740:	f1b8 0f00 	cmp.w	r8, #0
 8007744:	d05b      	beq.n	80077fe <_dtoa_r+0xa5e>
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	4620      	mov	r0, r4
 800774a:	f000 fb51 	bl	8007df0 <_Balloc>
 800774e:	4605      	mov	r5, r0
 8007750:	b928      	cbnz	r0, 800775e <_dtoa_r+0x9be>
 8007752:	4b87      	ldr	r3, [pc, #540]	; (8007970 <_dtoa_r+0xbd0>)
 8007754:	4602      	mov	r2, r0
 8007756:	f240 21ea 	movw	r1, #746	; 0x2ea
 800775a:	f7ff bb3b 	b.w	8006dd4 <_dtoa_r+0x34>
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	3202      	adds	r2, #2
 8007762:	0092      	lsls	r2, r2, #2
 8007764:	f107 010c 	add.w	r1, r7, #12
 8007768:	300c      	adds	r0, #12
 800776a:	f000 fb33 	bl	8007dd4 <memcpy>
 800776e:	2201      	movs	r2, #1
 8007770:	4629      	mov	r1, r5
 8007772:	4620      	mov	r0, r4
 8007774:	f000 fd4e 	bl	8008214 <__lshift>
 8007778:	9b01      	ldr	r3, [sp, #4]
 800777a:	f103 0901 	add.w	r9, r3, #1
 800777e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007782:	4413      	add	r3, r2
 8007784:	9305      	str	r3, [sp, #20]
 8007786:	f00a 0301 	and.w	r3, sl, #1
 800778a:	46b8      	mov	r8, r7
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	4607      	mov	r7, r0
 8007790:	4631      	mov	r1, r6
 8007792:	ee18 0a10 	vmov	r0, s16
 8007796:	f7ff fa75 	bl	8006c84 <quorem>
 800779a:	4641      	mov	r1, r8
 800779c:	9002      	str	r0, [sp, #8]
 800779e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80077a2:	ee18 0a10 	vmov	r0, s16
 80077a6:	f000 fda5 	bl	80082f4 <__mcmp>
 80077aa:	463a      	mov	r2, r7
 80077ac:	9003      	str	r0, [sp, #12]
 80077ae:	4631      	mov	r1, r6
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fdbb 	bl	800832c <__mdiff>
 80077b6:	68c2      	ldr	r2, [r0, #12]
 80077b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80077bc:	4605      	mov	r5, r0
 80077be:	bb02      	cbnz	r2, 8007802 <_dtoa_r+0xa62>
 80077c0:	4601      	mov	r1, r0
 80077c2:	ee18 0a10 	vmov	r0, s16
 80077c6:	f000 fd95 	bl	80082f4 <__mcmp>
 80077ca:	4602      	mov	r2, r0
 80077cc:	4629      	mov	r1, r5
 80077ce:	4620      	mov	r0, r4
 80077d0:	9207      	str	r2, [sp, #28]
 80077d2:	f000 fb4d 	bl	8007e70 <_Bfree>
 80077d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80077da:	ea43 0102 	orr.w	r1, r3, r2
 80077de:	9b04      	ldr	r3, [sp, #16]
 80077e0:	430b      	orrs	r3, r1
 80077e2:	464d      	mov	r5, r9
 80077e4:	d10f      	bne.n	8007806 <_dtoa_r+0xa66>
 80077e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077ea:	d02a      	beq.n	8007842 <_dtoa_r+0xaa2>
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	dd02      	ble.n	80077f8 <_dtoa_r+0xa58>
 80077f2:	9b02      	ldr	r3, [sp, #8]
 80077f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80077f8:	f88b a000 	strb.w	sl, [fp]
 80077fc:	e775      	b.n	80076ea <_dtoa_r+0x94a>
 80077fe:	4638      	mov	r0, r7
 8007800:	e7ba      	b.n	8007778 <_dtoa_r+0x9d8>
 8007802:	2201      	movs	r2, #1
 8007804:	e7e2      	b.n	80077cc <_dtoa_r+0xa2c>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	db04      	blt.n	8007816 <_dtoa_r+0xa76>
 800780c:	9906      	ldr	r1, [sp, #24]
 800780e:	430b      	orrs	r3, r1
 8007810:	9904      	ldr	r1, [sp, #16]
 8007812:	430b      	orrs	r3, r1
 8007814:	d122      	bne.n	800785c <_dtoa_r+0xabc>
 8007816:	2a00      	cmp	r2, #0
 8007818:	ddee      	ble.n	80077f8 <_dtoa_r+0xa58>
 800781a:	ee18 1a10 	vmov	r1, s16
 800781e:	2201      	movs	r2, #1
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fcf7 	bl	8008214 <__lshift>
 8007826:	4631      	mov	r1, r6
 8007828:	ee08 0a10 	vmov	s16, r0
 800782c:	f000 fd62 	bl	80082f4 <__mcmp>
 8007830:	2800      	cmp	r0, #0
 8007832:	dc03      	bgt.n	800783c <_dtoa_r+0xa9c>
 8007834:	d1e0      	bne.n	80077f8 <_dtoa_r+0xa58>
 8007836:	f01a 0f01 	tst.w	sl, #1
 800783a:	d0dd      	beq.n	80077f8 <_dtoa_r+0xa58>
 800783c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007840:	d1d7      	bne.n	80077f2 <_dtoa_r+0xa52>
 8007842:	2339      	movs	r3, #57	; 0x39
 8007844:	f88b 3000 	strb.w	r3, [fp]
 8007848:	462b      	mov	r3, r5
 800784a:	461d      	mov	r5, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007852:	2a39      	cmp	r2, #57	; 0x39
 8007854:	d071      	beq.n	800793a <_dtoa_r+0xb9a>
 8007856:	3201      	adds	r2, #1
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	e746      	b.n	80076ea <_dtoa_r+0x94a>
 800785c:	2a00      	cmp	r2, #0
 800785e:	dd07      	ble.n	8007870 <_dtoa_r+0xad0>
 8007860:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007864:	d0ed      	beq.n	8007842 <_dtoa_r+0xaa2>
 8007866:	f10a 0301 	add.w	r3, sl, #1
 800786a:	f88b 3000 	strb.w	r3, [fp]
 800786e:	e73c      	b.n	80076ea <_dtoa_r+0x94a>
 8007870:	9b05      	ldr	r3, [sp, #20]
 8007872:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007876:	4599      	cmp	r9, r3
 8007878:	d047      	beq.n	800790a <_dtoa_r+0xb6a>
 800787a:	ee18 1a10 	vmov	r1, s16
 800787e:	2300      	movs	r3, #0
 8007880:	220a      	movs	r2, #10
 8007882:	4620      	mov	r0, r4
 8007884:	f000 fb16 	bl	8007eb4 <__multadd>
 8007888:	45b8      	cmp	r8, r7
 800788a:	ee08 0a10 	vmov	s16, r0
 800788e:	f04f 0300 	mov.w	r3, #0
 8007892:	f04f 020a 	mov.w	r2, #10
 8007896:	4641      	mov	r1, r8
 8007898:	4620      	mov	r0, r4
 800789a:	d106      	bne.n	80078aa <_dtoa_r+0xb0a>
 800789c:	f000 fb0a 	bl	8007eb4 <__multadd>
 80078a0:	4680      	mov	r8, r0
 80078a2:	4607      	mov	r7, r0
 80078a4:	f109 0901 	add.w	r9, r9, #1
 80078a8:	e772      	b.n	8007790 <_dtoa_r+0x9f0>
 80078aa:	f000 fb03 	bl	8007eb4 <__multadd>
 80078ae:	4639      	mov	r1, r7
 80078b0:	4680      	mov	r8, r0
 80078b2:	2300      	movs	r3, #0
 80078b4:	220a      	movs	r2, #10
 80078b6:	4620      	mov	r0, r4
 80078b8:	f000 fafc 	bl	8007eb4 <__multadd>
 80078bc:	4607      	mov	r7, r0
 80078be:	e7f1      	b.n	80078a4 <_dtoa_r+0xb04>
 80078c0:	9b03      	ldr	r3, [sp, #12]
 80078c2:	9302      	str	r3, [sp, #8]
 80078c4:	9d01      	ldr	r5, [sp, #4]
 80078c6:	ee18 0a10 	vmov	r0, s16
 80078ca:	4631      	mov	r1, r6
 80078cc:	f7ff f9da 	bl	8006c84 <quorem>
 80078d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80078d4:	9b01      	ldr	r3, [sp, #4]
 80078d6:	f805 ab01 	strb.w	sl, [r5], #1
 80078da:	1aea      	subs	r2, r5, r3
 80078dc:	9b02      	ldr	r3, [sp, #8]
 80078de:	4293      	cmp	r3, r2
 80078e0:	dd09      	ble.n	80078f6 <_dtoa_r+0xb56>
 80078e2:	ee18 1a10 	vmov	r1, s16
 80078e6:	2300      	movs	r3, #0
 80078e8:	220a      	movs	r2, #10
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 fae2 	bl	8007eb4 <__multadd>
 80078f0:	ee08 0a10 	vmov	s16, r0
 80078f4:	e7e7      	b.n	80078c6 <_dtoa_r+0xb26>
 80078f6:	9b02      	ldr	r3, [sp, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bfc8      	it	gt
 80078fc:	461d      	movgt	r5, r3
 80078fe:	9b01      	ldr	r3, [sp, #4]
 8007900:	bfd8      	it	le
 8007902:	2501      	movle	r5, #1
 8007904:	441d      	add	r5, r3
 8007906:	f04f 0800 	mov.w	r8, #0
 800790a:	ee18 1a10 	vmov	r1, s16
 800790e:	2201      	movs	r2, #1
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fc7f 	bl	8008214 <__lshift>
 8007916:	4631      	mov	r1, r6
 8007918:	ee08 0a10 	vmov	s16, r0
 800791c:	f000 fcea 	bl	80082f4 <__mcmp>
 8007920:	2800      	cmp	r0, #0
 8007922:	dc91      	bgt.n	8007848 <_dtoa_r+0xaa8>
 8007924:	d102      	bne.n	800792c <_dtoa_r+0xb8c>
 8007926:	f01a 0f01 	tst.w	sl, #1
 800792a:	d18d      	bne.n	8007848 <_dtoa_r+0xaa8>
 800792c:	462b      	mov	r3, r5
 800792e:	461d      	mov	r5, r3
 8007930:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007934:	2a30      	cmp	r2, #48	; 0x30
 8007936:	d0fa      	beq.n	800792e <_dtoa_r+0xb8e>
 8007938:	e6d7      	b.n	80076ea <_dtoa_r+0x94a>
 800793a:	9a01      	ldr	r2, [sp, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d184      	bne.n	800784a <_dtoa_r+0xaaa>
 8007940:	9b00      	ldr	r3, [sp, #0]
 8007942:	3301      	adds	r3, #1
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	2331      	movs	r3, #49	; 0x31
 8007948:	7013      	strb	r3, [r2, #0]
 800794a:	e6ce      	b.n	80076ea <_dtoa_r+0x94a>
 800794c:	4b09      	ldr	r3, [pc, #36]	; (8007974 <_dtoa_r+0xbd4>)
 800794e:	f7ff ba95 	b.w	8006e7c <_dtoa_r+0xdc>
 8007952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007954:	2b00      	cmp	r3, #0
 8007956:	f47f aa6e 	bne.w	8006e36 <_dtoa_r+0x96>
 800795a:	4b07      	ldr	r3, [pc, #28]	; (8007978 <_dtoa_r+0xbd8>)
 800795c:	f7ff ba8e 	b.w	8006e7c <_dtoa_r+0xdc>
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	dcae      	bgt.n	80078c4 <_dtoa_r+0xb24>
 8007966:	9b06      	ldr	r3, [sp, #24]
 8007968:	2b02      	cmp	r3, #2
 800796a:	f73f aea8 	bgt.w	80076be <_dtoa_r+0x91e>
 800796e:	e7a9      	b.n	80078c4 <_dtoa_r+0xb24>
 8007970:	08008e2f 	.word	0x08008e2f
 8007974:	08008d8c 	.word	0x08008d8c
 8007978:	08008db0 	.word	0x08008db0

0800797c <__sflush_r>:
 800797c:	898a      	ldrh	r2, [r1, #12]
 800797e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007982:	4605      	mov	r5, r0
 8007984:	0710      	lsls	r0, r2, #28
 8007986:	460c      	mov	r4, r1
 8007988:	d458      	bmi.n	8007a3c <__sflush_r+0xc0>
 800798a:	684b      	ldr	r3, [r1, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	dc05      	bgt.n	800799c <__sflush_r+0x20>
 8007990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007992:	2b00      	cmp	r3, #0
 8007994:	dc02      	bgt.n	800799c <__sflush_r+0x20>
 8007996:	2000      	movs	r0, #0
 8007998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800799c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800799e:	2e00      	cmp	r6, #0
 80079a0:	d0f9      	beq.n	8007996 <__sflush_r+0x1a>
 80079a2:	2300      	movs	r3, #0
 80079a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079a8:	682f      	ldr	r7, [r5, #0]
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	d032      	beq.n	8007a14 <__sflush_r+0x98>
 80079ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	075a      	lsls	r2, r3, #29
 80079b4:	d505      	bpl.n	80079c2 <__sflush_r+0x46>
 80079b6:	6863      	ldr	r3, [r4, #4]
 80079b8:	1ac0      	subs	r0, r0, r3
 80079ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079bc:	b10b      	cbz	r3, 80079c2 <__sflush_r+0x46>
 80079be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079c0:	1ac0      	subs	r0, r0, r3
 80079c2:	2300      	movs	r3, #0
 80079c4:	4602      	mov	r2, r0
 80079c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079c8:	6a21      	ldr	r1, [r4, #32]
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b0      	blx	r6
 80079ce:	1c43      	adds	r3, r0, #1
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	d106      	bne.n	80079e2 <__sflush_r+0x66>
 80079d4:	6829      	ldr	r1, [r5, #0]
 80079d6:	291d      	cmp	r1, #29
 80079d8:	d82c      	bhi.n	8007a34 <__sflush_r+0xb8>
 80079da:	4a2a      	ldr	r2, [pc, #168]	; (8007a84 <__sflush_r+0x108>)
 80079dc:	40ca      	lsrs	r2, r1
 80079de:	07d6      	lsls	r6, r2, #31
 80079e0:	d528      	bpl.n	8007a34 <__sflush_r+0xb8>
 80079e2:	2200      	movs	r2, #0
 80079e4:	6062      	str	r2, [r4, #4]
 80079e6:	04d9      	lsls	r1, r3, #19
 80079e8:	6922      	ldr	r2, [r4, #16]
 80079ea:	6022      	str	r2, [r4, #0]
 80079ec:	d504      	bpl.n	80079f8 <__sflush_r+0x7c>
 80079ee:	1c42      	adds	r2, r0, #1
 80079f0:	d101      	bne.n	80079f6 <__sflush_r+0x7a>
 80079f2:	682b      	ldr	r3, [r5, #0]
 80079f4:	b903      	cbnz	r3, 80079f8 <__sflush_r+0x7c>
 80079f6:	6560      	str	r0, [r4, #84]	; 0x54
 80079f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079fa:	602f      	str	r7, [r5, #0]
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d0ca      	beq.n	8007996 <__sflush_r+0x1a>
 8007a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a04:	4299      	cmp	r1, r3
 8007a06:	d002      	beq.n	8007a0e <__sflush_r+0x92>
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f000 fd8b 	bl	8008524 <_free_r>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	6360      	str	r0, [r4, #52]	; 0x34
 8007a12:	e7c1      	b.n	8007998 <__sflush_r+0x1c>
 8007a14:	6a21      	ldr	r1, [r4, #32]
 8007a16:	2301      	movs	r3, #1
 8007a18:	4628      	mov	r0, r5
 8007a1a:	47b0      	blx	r6
 8007a1c:	1c41      	adds	r1, r0, #1
 8007a1e:	d1c7      	bne.n	80079b0 <__sflush_r+0x34>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0c4      	beq.n	80079b0 <__sflush_r+0x34>
 8007a26:	2b1d      	cmp	r3, #29
 8007a28:	d001      	beq.n	8007a2e <__sflush_r+0xb2>
 8007a2a:	2b16      	cmp	r3, #22
 8007a2c:	d101      	bne.n	8007a32 <__sflush_r+0xb6>
 8007a2e:	602f      	str	r7, [r5, #0]
 8007a30:	e7b1      	b.n	8007996 <__sflush_r+0x1a>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a38:	81a3      	strh	r3, [r4, #12]
 8007a3a:	e7ad      	b.n	8007998 <__sflush_r+0x1c>
 8007a3c:	690f      	ldr	r7, [r1, #16]
 8007a3e:	2f00      	cmp	r7, #0
 8007a40:	d0a9      	beq.n	8007996 <__sflush_r+0x1a>
 8007a42:	0793      	lsls	r3, r2, #30
 8007a44:	680e      	ldr	r6, [r1, #0]
 8007a46:	bf08      	it	eq
 8007a48:	694b      	ldreq	r3, [r1, #20]
 8007a4a:	600f      	str	r7, [r1, #0]
 8007a4c:	bf18      	it	ne
 8007a4e:	2300      	movne	r3, #0
 8007a50:	eba6 0807 	sub.w	r8, r6, r7
 8007a54:	608b      	str	r3, [r1, #8]
 8007a56:	f1b8 0f00 	cmp.w	r8, #0
 8007a5a:	dd9c      	ble.n	8007996 <__sflush_r+0x1a>
 8007a5c:	6a21      	ldr	r1, [r4, #32]
 8007a5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a60:	4643      	mov	r3, r8
 8007a62:	463a      	mov	r2, r7
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b0      	blx	r6
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	dc06      	bgt.n	8007a7a <__sflush_r+0xfe>
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a72:	81a3      	strh	r3, [r4, #12]
 8007a74:	f04f 30ff 	mov.w	r0, #4294967295
 8007a78:	e78e      	b.n	8007998 <__sflush_r+0x1c>
 8007a7a:	4407      	add	r7, r0
 8007a7c:	eba8 0800 	sub.w	r8, r8, r0
 8007a80:	e7e9      	b.n	8007a56 <__sflush_r+0xda>
 8007a82:	bf00      	nop
 8007a84:	20400001 	.word	0x20400001

08007a88 <_fflush_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	690b      	ldr	r3, [r1, #16]
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	b913      	cbnz	r3, 8007a98 <_fflush_r+0x10>
 8007a92:	2500      	movs	r5, #0
 8007a94:	4628      	mov	r0, r5
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	b118      	cbz	r0, 8007aa2 <_fflush_r+0x1a>
 8007a9a:	6983      	ldr	r3, [r0, #24]
 8007a9c:	b90b      	cbnz	r3, 8007aa2 <_fflush_r+0x1a>
 8007a9e:	f000 f887 	bl	8007bb0 <__sinit>
 8007aa2:	4b14      	ldr	r3, [pc, #80]	; (8007af4 <_fflush_r+0x6c>)
 8007aa4:	429c      	cmp	r4, r3
 8007aa6:	d11b      	bne.n	8007ae0 <_fflush_r+0x58>
 8007aa8:	686c      	ldr	r4, [r5, #4]
 8007aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0ef      	beq.n	8007a92 <_fflush_r+0xa>
 8007ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ab4:	07d0      	lsls	r0, r2, #31
 8007ab6:	d404      	bmi.n	8007ac2 <_fflush_r+0x3a>
 8007ab8:	0599      	lsls	r1, r3, #22
 8007aba:	d402      	bmi.n	8007ac2 <_fflush_r+0x3a>
 8007abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007abe:	f000 f91a 	bl	8007cf6 <__retarget_lock_acquire_recursive>
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	f7ff ff59 	bl	800797c <__sflush_r>
 8007aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007acc:	07da      	lsls	r2, r3, #31
 8007ace:	4605      	mov	r5, r0
 8007ad0:	d4e0      	bmi.n	8007a94 <_fflush_r+0xc>
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	059b      	lsls	r3, r3, #22
 8007ad6:	d4dd      	bmi.n	8007a94 <_fflush_r+0xc>
 8007ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ada:	f000 f90d 	bl	8007cf8 <__retarget_lock_release_recursive>
 8007ade:	e7d9      	b.n	8007a94 <_fflush_r+0xc>
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <_fflush_r+0x70>)
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d101      	bne.n	8007aea <_fflush_r+0x62>
 8007ae6:	68ac      	ldr	r4, [r5, #8]
 8007ae8:	e7df      	b.n	8007aaa <_fflush_r+0x22>
 8007aea:	4b04      	ldr	r3, [pc, #16]	; (8007afc <_fflush_r+0x74>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	bf08      	it	eq
 8007af0:	68ec      	ldreq	r4, [r5, #12]
 8007af2:	e7da      	b.n	8007aaa <_fflush_r+0x22>
 8007af4:	08008e60 	.word	0x08008e60
 8007af8:	08008e80 	.word	0x08008e80
 8007afc:	08008e40 	.word	0x08008e40

08007b00 <std>:
 8007b00:	2300      	movs	r3, #0
 8007b02:	b510      	push	{r4, lr}
 8007b04:	4604      	mov	r4, r0
 8007b06:	e9c0 3300 	strd	r3, r3, [r0]
 8007b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b0e:	6083      	str	r3, [r0, #8]
 8007b10:	8181      	strh	r1, [r0, #12]
 8007b12:	6643      	str	r3, [r0, #100]	; 0x64
 8007b14:	81c2      	strh	r2, [r0, #14]
 8007b16:	6183      	str	r3, [r0, #24]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	2208      	movs	r2, #8
 8007b1c:	305c      	adds	r0, #92	; 0x5c
 8007b1e:	f7fe faf1 	bl	8006104 <memset>
 8007b22:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <std+0x38>)
 8007b24:	6263      	str	r3, [r4, #36]	; 0x24
 8007b26:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <std+0x3c>)
 8007b28:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b2a:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <std+0x40>)
 8007b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b2e:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <std+0x44>)
 8007b30:	6224      	str	r4, [r4, #32]
 8007b32:	6323      	str	r3, [r4, #48]	; 0x30
 8007b34:	bd10      	pop	{r4, pc}
 8007b36:	bf00      	nop
 8007b38:	080089b9 	.word	0x080089b9
 8007b3c:	080089db 	.word	0x080089db
 8007b40:	08008a13 	.word	0x08008a13
 8007b44:	08008a37 	.word	0x08008a37

08007b48 <_cleanup_r>:
 8007b48:	4901      	ldr	r1, [pc, #4]	; (8007b50 <_cleanup_r+0x8>)
 8007b4a:	f000 b8af 	b.w	8007cac <_fwalk_reent>
 8007b4e:	bf00      	nop
 8007b50:	08007a89 	.word	0x08007a89

08007b54 <__sfmoreglue>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	2268      	movs	r2, #104	; 0x68
 8007b58:	1e4d      	subs	r5, r1, #1
 8007b5a:	4355      	muls	r5, r2
 8007b5c:	460e      	mov	r6, r1
 8007b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b62:	f000 fd4b 	bl	80085fc <_malloc_r>
 8007b66:	4604      	mov	r4, r0
 8007b68:	b140      	cbz	r0, 8007b7c <__sfmoreglue+0x28>
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b70:	300c      	adds	r0, #12
 8007b72:	60a0      	str	r0, [r4, #8]
 8007b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b78:	f7fe fac4 	bl	8006104 <memset>
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}

08007b80 <__sfp_lock_acquire>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__sfp_lock_acquire+0x8>)
 8007b82:	f000 b8b8 	b.w	8007cf6 <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	20000391 	.word	0x20000391

08007b8c <__sfp_lock_release>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__sfp_lock_release+0x8>)
 8007b8e:	f000 b8b3 	b.w	8007cf8 <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	20000391 	.word	0x20000391

08007b98 <__sinit_lock_acquire>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__sinit_lock_acquire+0x8>)
 8007b9a:	f000 b8ac 	b.w	8007cf6 <__retarget_lock_acquire_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	20000392 	.word	0x20000392

08007ba4 <__sinit_lock_release>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__sinit_lock_release+0x8>)
 8007ba6:	f000 b8a7 	b.w	8007cf8 <__retarget_lock_release_recursive>
 8007baa:	bf00      	nop
 8007bac:	20000392 	.word	0x20000392

08007bb0 <__sinit>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	f7ff fff0 	bl	8007b98 <__sinit_lock_acquire>
 8007bb8:	69a3      	ldr	r3, [r4, #24]
 8007bba:	b11b      	cbz	r3, 8007bc4 <__sinit+0x14>
 8007bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc0:	f7ff bff0 	b.w	8007ba4 <__sinit_lock_release>
 8007bc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8007bca:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <__sinit+0x68>)
 8007bcc:	4a13      	ldr	r2, [pc, #76]	; (8007c1c <__sinit+0x6c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	bf04      	itt	eq
 8007bd6:	2301      	moveq	r3, #1
 8007bd8:	61a3      	streq	r3, [r4, #24]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 f820 	bl	8007c20 <__sfp>
 8007be0:	6060      	str	r0, [r4, #4]
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 f81c 	bl	8007c20 <__sfp>
 8007be8:	60a0      	str	r0, [r4, #8]
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 f818 	bl	8007c20 <__sfp>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	60e0      	str	r0, [r4, #12]
 8007bf4:	2104      	movs	r1, #4
 8007bf6:	6860      	ldr	r0, [r4, #4]
 8007bf8:	f7ff ff82 	bl	8007b00 <std>
 8007bfc:	68a0      	ldr	r0, [r4, #8]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	2109      	movs	r1, #9
 8007c02:	f7ff ff7d 	bl	8007b00 <std>
 8007c06:	68e0      	ldr	r0, [r4, #12]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	2112      	movs	r1, #18
 8007c0c:	f7ff ff78 	bl	8007b00 <std>
 8007c10:	2301      	movs	r3, #1
 8007c12:	61a3      	str	r3, [r4, #24]
 8007c14:	e7d2      	b.n	8007bbc <__sinit+0xc>
 8007c16:	bf00      	nop
 8007c18:	08008d78 	.word	0x08008d78
 8007c1c:	08007b49 	.word	0x08007b49

08007c20 <__sfp>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	4607      	mov	r7, r0
 8007c24:	f7ff ffac 	bl	8007b80 <__sfp_lock_acquire>
 8007c28:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <__sfp+0x84>)
 8007c2a:	681e      	ldr	r6, [r3, #0]
 8007c2c:	69b3      	ldr	r3, [r6, #24]
 8007c2e:	b913      	cbnz	r3, 8007c36 <__sfp+0x16>
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff ffbd 	bl	8007bb0 <__sinit>
 8007c36:	3648      	adds	r6, #72	; 0x48
 8007c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	d503      	bpl.n	8007c48 <__sfp+0x28>
 8007c40:	6833      	ldr	r3, [r6, #0]
 8007c42:	b30b      	cbz	r3, 8007c88 <__sfp+0x68>
 8007c44:	6836      	ldr	r6, [r6, #0]
 8007c46:	e7f7      	b.n	8007c38 <__sfp+0x18>
 8007c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c4c:	b9d5      	cbnz	r5, 8007c84 <__sfp+0x64>
 8007c4e:	4b16      	ldr	r3, [pc, #88]	; (8007ca8 <__sfp+0x88>)
 8007c50:	60e3      	str	r3, [r4, #12]
 8007c52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c56:	6665      	str	r5, [r4, #100]	; 0x64
 8007c58:	f000 f84c 	bl	8007cf4 <__retarget_lock_init_recursive>
 8007c5c:	f7ff ff96 	bl	8007b8c <__sfp_lock_release>
 8007c60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c68:	6025      	str	r5, [r4, #0]
 8007c6a:	61a5      	str	r5, [r4, #24]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	4629      	mov	r1, r5
 8007c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c74:	f7fe fa46 	bl	8006104 <memset>
 8007c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c80:	4620      	mov	r0, r4
 8007c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c84:	3468      	adds	r4, #104	; 0x68
 8007c86:	e7d9      	b.n	8007c3c <__sfp+0x1c>
 8007c88:	2104      	movs	r1, #4
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	f7ff ff62 	bl	8007b54 <__sfmoreglue>
 8007c90:	4604      	mov	r4, r0
 8007c92:	6030      	str	r0, [r6, #0]
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d1d5      	bne.n	8007c44 <__sfp+0x24>
 8007c98:	f7ff ff78 	bl	8007b8c <__sfp_lock_release>
 8007c9c:	230c      	movs	r3, #12
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	e7ee      	b.n	8007c80 <__sfp+0x60>
 8007ca2:	bf00      	nop
 8007ca4:	08008d78 	.word	0x08008d78
 8007ca8:	ffff0001 	.word	0xffff0001

08007cac <_fwalk_reent>:
 8007cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	4688      	mov	r8, r1
 8007cb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cb8:	2700      	movs	r7, #0
 8007cba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cbe:	f1b9 0901 	subs.w	r9, r9, #1
 8007cc2:	d505      	bpl.n	8007cd0 <_fwalk_reent+0x24>
 8007cc4:	6824      	ldr	r4, [r4, #0]
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	d1f7      	bne.n	8007cba <_fwalk_reent+0xe>
 8007cca:	4638      	mov	r0, r7
 8007ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd0:	89ab      	ldrh	r3, [r5, #12]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d907      	bls.n	8007ce6 <_fwalk_reent+0x3a>
 8007cd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	d003      	beq.n	8007ce6 <_fwalk_reent+0x3a>
 8007cde:	4629      	mov	r1, r5
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	47c0      	blx	r8
 8007ce4:	4307      	orrs	r7, r0
 8007ce6:	3568      	adds	r5, #104	; 0x68
 8007ce8:	e7e9      	b.n	8007cbe <_fwalk_reent+0x12>
	...

08007cec <_localeconv_r>:
 8007cec:	4800      	ldr	r0, [pc, #0]	; (8007cf0 <_localeconv_r+0x4>)
 8007cee:	4770      	bx	lr
 8007cf0:	20000160 	.word	0x20000160

08007cf4 <__retarget_lock_init_recursive>:
 8007cf4:	4770      	bx	lr

08007cf6 <__retarget_lock_acquire_recursive>:
 8007cf6:	4770      	bx	lr

08007cf8 <__retarget_lock_release_recursive>:
 8007cf8:	4770      	bx	lr

08007cfa <__swhatbuf_r>:
 8007cfa:	b570      	push	{r4, r5, r6, lr}
 8007cfc:	460e      	mov	r6, r1
 8007cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d02:	2900      	cmp	r1, #0
 8007d04:	b096      	sub	sp, #88	; 0x58
 8007d06:	4614      	mov	r4, r2
 8007d08:	461d      	mov	r5, r3
 8007d0a:	da08      	bge.n	8007d1e <__swhatbuf_r+0x24>
 8007d0c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	602a      	str	r2, [r5, #0]
 8007d14:	061a      	lsls	r2, r3, #24
 8007d16:	d410      	bmi.n	8007d3a <__swhatbuf_r+0x40>
 8007d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1c:	e00e      	b.n	8007d3c <__swhatbuf_r+0x42>
 8007d1e:	466a      	mov	r2, sp
 8007d20:	f000 fee0 	bl	8008ae4 <_fstat_r>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	dbf1      	blt.n	8007d0c <__swhatbuf_r+0x12>
 8007d28:	9a01      	ldr	r2, [sp, #4]
 8007d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d32:	425a      	negs	r2, r3
 8007d34:	415a      	adcs	r2, r3
 8007d36:	602a      	str	r2, [r5, #0]
 8007d38:	e7ee      	b.n	8007d18 <__swhatbuf_r+0x1e>
 8007d3a:	2340      	movs	r3, #64	; 0x40
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	b016      	add	sp, #88	; 0x58
 8007d42:	bd70      	pop	{r4, r5, r6, pc}

08007d44 <__smakebuf_r>:
 8007d44:	898b      	ldrh	r3, [r1, #12]
 8007d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d48:	079d      	lsls	r5, r3, #30
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	d507      	bpl.n	8007d60 <__smakebuf_r+0x1c>
 8007d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	6123      	str	r3, [r4, #16]
 8007d58:	2301      	movs	r3, #1
 8007d5a:	6163      	str	r3, [r4, #20]
 8007d5c:	b002      	add	sp, #8
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	ab01      	add	r3, sp, #4
 8007d62:	466a      	mov	r2, sp
 8007d64:	f7ff ffc9 	bl	8007cfa <__swhatbuf_r>
 8007d68:	9900      	ldr	r1, [sp, #0]
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f000 fc45 	bl	80085fc <_malloc_r>
 8007d72:	b948      	cbnz	r0, 8007d88 <__smakebuf_r+0x44>
 8007d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d78:	059a      	lsls	r2, r3, #22
 8007d7a:	d4ef      	bmi.n	8007d5c <__smakebuf_r+0x18>
 8007d7c:	f023 0303 	bic.w	r3, r3, #3
 8007d80:	f043 0302 	orr.w	r3, r3, #2
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	e7e3      	b.n	8007d50 <__smakebuf_r+0xc>
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <__smakebuf_r+0x7c>)
 8007d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	6020      	str	r0, [r4, #0]
 8007d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	9b00      	ldr	r3, [sp, #0]
 8007d98:	6163      	str	r3, [r4, #20]
 8007d9a:	9b01      	ldr	r3, [sp, #4]
 8007d9c:	6120      	str	r0, [r4, #16]
 8007d9e:	b15b      	cbz	r3, 8007db8 <__smakebuf_r+0x74>
 8007da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007da4:	4630      	mov	r0, r6
 8007da6:	f000 feaf 	bl	8008b08 <_isatty_r>
 8007daa:	b128      	cbz	r0, 8007db8 <__smakebuf_r+0x74>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	89a0      	ldrh	r0, [r4, #12]
 8007dba:	4305      	orrs	r5, r0
 8007dbc:	81a5      	strh	r5, [r4, #12]
 8007dbe:	e7cd      	b.n	8007d5c <__smakebuf_r+0x18>
 8007dc0:	08007b49 	.word	0x08007b49

08007dc4 <malloc>:
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <malloc+0xc>)
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	f000 bc17 	b.w	80085fc <_malloc_r>
 8007dce:	bf00      	nop
 8007dd0:	2000000c 	.word	0x2000000c

08007dd4 <memcpy>:
 8007dd4:	440a      	add	r2, r1
 8007dd6:	4291      	cmp	r1, r2
 8007dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ddc:	d100      	bne.n	8007de0 <memcpy+0xc>
 8007dde:	4770      	bx	lr
 8007de0:	b510      	push	{r4, lr}
 8007de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007de6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dea:	4291      	cmp	r1, r2
 8007dec:	d1f9      	bne.n	8007de2 <memcpy+0xe>
 8007dee:	bd10      	pop	{r4, pc}

08007df0 <_Balloc>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007df4:	4604      	mov	r4, r0
 8007df6:	460d      	mov	r5, r1
 8007df8:	b976      	cbnz	r6, 8007e18 <_Balloc+0x28>
 8007dfa:	2010      	movs	r0, #16
 8007dfc:	f7ff ffe2 	bl	8007dc4 <malloc>
 8007e00:	4602      	mov	r2, r0
 8007e02:	6260      	str	r0, [r4, #36]	; 0x24
 8007e04:	b920      	cbnz	r0, 8007e10 <_Balloc+0x20>
 8007e06:	4b18      	ldr	r3, [pc, #96]	; (8007e68 <_Balloc+0x78>)
 8007e08:	4818      	ldr	r0, [pc, #96]	; (8007e6c <_Balloc+0x7c>)
 8007e0a:	2166      	movs	r1, #102	; 0x66
 8007e0c:	f000 fe2a 	bl	8008a64 <__assert_func>
 8007e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e14:	6006      	str	r6, [r0, #0]
 8007e16:	60c6      	str	r6, [r0, #12]
 8007e18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e1a:	68f3      	ldr	r3, [r6, #12]
 8007e1c:	b183      	cbz	r3, 8007e40 <_Balloc+0x50>
 8007e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e26:	b9b8      	cbnz	r0, 8007e58 <_Balloc+0x68>
 8007e28:	2101      	movs	r1, #1
 8007e2a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e2e:	1d72      	adds	r2, r6, #5
 8007e30:	0092      	lsls	r2, r2, #2
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fb60 	bl	80084f8 <_calloc_r>
 8007e38:	b160      	cbz	r0, 8007e54 <_Balloc+0x64>
 8007e3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e3e:	e00e      	b.n	8007e5e <_Balloc+0x6e>
 8007e40:	2221      	movs	r2, #33	; 0x21
 8007e42:	2104      	movs	r1, #4
 8007e44:	4620      	mov	r0, r4
 8007e46:	f000 fb57 	bl	80084f8 <_calloc_r>
 8007e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e4c:	60f0      	str	r0, [r6, #12]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e4      	bne.n	8007e1e <_Balloc+0x2e>
 8007e54:	2000      	movs	r0, #0
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	6802      	ldr	r2, [r0, #0]
 8007e5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e64:	e7f7      	b.n	8007e56 <_Balloc+0x66>
 8007e66:	bf00      	nop
 8007e68:	08008dbd 	.word	0x08008dbd
 8007e6c:	08008ea0 	.word	0x08008ea0

08007e70 <_Bfree>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e74:	4605      	mov	r5, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	b976      	cbnz	r6, 8007e98 <_Bfree+0x28>
 8007e7a:	2010      	movs	r0, #16
 8007e7c:	f7ff ffa2 	bl	8007dc4 <malloc>
 8007e80:	4602      	mov	r2, r0
 8007e82:	6268      	str	r0, [r5, #36]	; 0x24
 8007e84:	b920      	cbnz	r0, 8007e90 <_Bfree+0x20>
 8007e86:	4b09      	ldr	r3, [pc, #36]	; (8007eac <_Bfree+0x3c>)
 8007e88:	4809      	ldr	r0, [pc, #36]	; (8007eb0 <_Bfree+0x40>)
 8007e8a:	218a      	movs	r1, #138	; 0x8a
 8007e8c:	f000 fdea 	bl	8008a64 <__assert_func>
 8007e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e94:	6006      	str	r6, [r0, #0]
 8007e96:	60c6      	str	r6, [r0, #12]
 8007e98:	b13c      	cbz	r4, 8007eaa <_Bfree+0x3a>
 8007e9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e9c:	6862      	ldr	r2, [r4, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ea4:	6021      	str	r1, [r4, #0]
 8007ea6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}
 8007eac:	08008dbd 	.word	0x08008dbd
 8007eb0:	08008ea0 	.word	0x08008ea0

08007eb4 <__multadd>:
 8007eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb8:	690d      	ldr	r5, [r1, #16]
 8007eba:	4607      	mov	r7, r0
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	461e      	mov	r6, r3
 8007ec0:	f101 0c14 	add.w	ip, r1, #20
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	f8dc 3000 	ldr.w	r3, [ip]
 8007eca:	b299      	uxth	r1, r3
 8007ecc:	fb02 6101 	mla	r1, r2, r1, r6
 8007ed0:	0c1e      	lsrs	r6, r3, #16
 8007ed2:	0c0b      	lsrs	r3, r1, #16
 8007ed4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ed8:	b289      	uxth	r1, r1
 8007eda:	3001      	adds	r0, #1
 8007edc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ee0:	4285      	cmp	r5, r0
 8007ee2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ee6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007eea:	dcec      	bgt.n	8007ec6 <__multadd+0x12>
 8007eec:	b30e      	cbz	r6, 8007f32 <__multadd+0x7e>
 8007eee:	68a3      	ldr	r3, [r4, #8]
 8007ef0:	42ab      	cmp	r3, r5
 8007ef2:	dc19      	bgt.n	8007f28 <__multadd+0x74>
 8007ef4:	6861      	ldr	r1, [r4, #4]
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	3101      	adds	r1, #1
 8007efa:	f7ff ff79 	bl	8007df0 <_Balloc>
 8007efe:	4680      	mov	r8, r0
 8007f00:	b928      	cbnz	r0, 8007f0e <__multadd+0x5a>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <__multadd+0x84>)
 8007f06:	480d      	ldr	r0, [pc, #52]	; (8007f3c <__multadd+0x88>)
 8007f08:	21b5      	movs	r1, #181	; 0xb5
 8007f0a:	f000 fdab 	bl	8008a64 <__assert_func>
 8007f0e:	6922      	ldr	r2, [r4, #16]
 8007f10:	3202      	adds	r2, #2
 8007f12:	f104 010c 	add.w	r1, r4, #12
 8007f16:	0092      	lsls	r2, r2, #2
 8007f18:	300c      	adds	r0, #12
 8007f1a:	f7ff ff5b 	bl	8007dd4 <memcpy>
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff ffa5 	bl	8007e70 <_Bfree>
 8007f26:	4644      	mov	r4, r8
 8007f28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	615e      	str	r6, [r3, #20]
 8007f30:	6125      	str	r5, [r4, #16]
 8007f32:	4620      	mov	r0, r4
 8007f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f38:	08008e2f 	.word	0x08008e2f
 8007f3c:	08008ea0 	.word	0x08008ea0

08007f40 <__hi0bits>:
 8007f40:	0c03      	lsrs	r3, r0, #16
 8007f42:	041b      	lsls	r3, r3, #16
 8007f44:	b9d3      	cbnz	r3, 8007f7c <__hi0bits+0x3c>
 8007f46:	0400      	lsls	r0, r0, #16
 8007f48:	2310      	movs	r3, #16
 8007f4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f4e:	bf04      	itt	eq
 8007f50:	0200      	lsleq	r0, r0, #8
 8007f52:	3308      	addeq	r3, #8
 8007f54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f58:	bf04      	itt	eq
 8007f5a:	0100      	lsleq	r0, r0, #4
 8007f5c:	3304      	addeq	r3, #4
 8007f5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f62:	bf04      	itt	eq
 8007f64:	0080      	lsleq	r0, r0, #2
 8007f66:	3302      	addeq	r3, #2
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	db05      	blt.n	8007f78 <__hi0bits+0x38>
 8007f6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f70:	f103 0301 	add.w	r3, r3, #1
 8007f74:	bf08      	it	eq
 8007f76:	2320      	moveq	r3, #32
 8007f78:	4618      	mov	r0, r3
 8007f7a:	4770      	bx	lr
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	e7e4      	b.n	8007f4a <__hi0bits+0xa>

08007f80 <__lo0bits>:
 8007f80:	6803      	ldr	r3, [r0, #0]
 8007f82:	f013 0207 	ands.w	r2, r3, #7
 8007f86:	4601      	mov	r1, r0
 8007f88:	d00b      	beq.n	8007fa2 <__lo0bits+0x22>
 8007f8a:	07da      	lsls	r2, r3, #31
 8007f8c:	d423      	bmi.n	8007fd6 <__lo0bits+0x56>
 8007f8e:	0798      	lsls	r0, r3, #30
 8007f90:	bf49      	itett	mi
 8007f92:	085b      	lsrmi	r3, r3, #1
 8007f94:	089b      	lsrpl	r3, r3, #2
 8007f96:	2001      	movmi	r0, #1
 8007f98:	600b      	strmi	r3, [r1, #0]
 8007f9a:	bf5c      	itt	pl
 8007f9c:	600b      	strpl	r3, [r1, #0]
 8007f9e:	2002      	movpl	r0, #2
 8007fa0:	4770      	bx	lr
 8007fa2:	b298      	uxth	r0, r3
 8007fa4:	b9a8      	cbnz	r0, 8007fd2 <__lo0bits+0x52>
 8007fa6:	0c1b      	lsrs	r3, r3, #16
 8007fa8:	2010      	movs	r0, #16
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	b90a      	cbnz	r2, 8007fb2 <__lo0bits+0x32>
 8007fae:	3008      	adds	r0, #8
 8007fb0:	0a1b      	lsrs	r3, r3, #8
 8007fb2:	071a      	lsls	r2, r3, #28
 8007fb4:	bf04      	itt	eq
 8007fb6:	091b      	lsreq	r3, r3, #4
 8007fb8:	3004      	addeq	r0, #4
 8007fba:	079a      	lsls	r2, r3, #30
 8007fbc:	bf04      	itt	eq
 8007fbe:	089b      	lsreq	r3, r3, #2
 8007fc0:	3002      	addeq	r0, #2
 8007fc2:	07da      	lsls	r2, r3, #31
 8007fc4:	d403      	bmi.n	8007fce <__lo0bits+0x4e>
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	f100 0001 	add.w	r0, r0, #1
 8007fcc:	d005      	beq.n	8007fda <__lo0bits+0x5a>
 8007fce:	600b      	str	r3, [r1, #0]
 8007fd0:	4770      	bx	lr
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	e7e9      	b.n	8007faa <__lo0bits+0x2a>
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	4770      	bx	lr
 8007fda:	2020      	movs	r0, #32
 8007fdc:	4770      	bx	lr
	...

08007fe0 <__i2b>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	f7ff ff03 	bl	8007df0 <_Balloc>
 8007fea:	4602      	mov	r2, r0
 8007fec:	b928      	cbnz	r0, 8007ffa <__i2b+0x1a>
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <__i2b+0x24>)
 8007ff0:	4805      	ldr	r0, [pc, #20]	; (8008008 <__i2b+0x28>)
 8007ff2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ff6:	f000 fd35 	bl	8008a64 <__assert_func>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	6144      	str	r4, [r0, #20]
 8007ffe:	6103      	str	r3, [r0, #16]
 8008000:	bd10      	pop	{r4, pc}
 8008002:	bf00      	nop
 8008004:	08008e2f 	.word	0x08008e2f
 8008008:	08008ea0 	.word	0x08008ea0

0800800c <__multiply>:
 800800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	4691      	mov	r9, r2
 8008012:	690a      	ldr	r2, [r1, #16]
 8008014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008018:	429a      	cmp	r2, r3
 800801a:	bfb8      	it	lt
 800801c:	460b      	movlt	r3, r1
 800801e:	460c      	mov	r4, r1
 8008020:	bfbc      	itt	lt
 8008022:	464c      	movlt	r4, r9
 8008024:	4699      	movlt	r9, r3
 8008026:	6927      	ldr	r7, [r4, #16]
 8008028:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800802c:	68a3      	ldr	r3, [r4, #8]
 800802e:	6861      	ldr	r1, [r4, #4]
 8008030:	eb07 060a 	add.w	r6, r7, sl
 8008034:	42b3      	cmp	r3, r6
 8008036:	b085      	sub	sp, #20
 8008038:	bfb8      	it	lt
 800803a:	3101      	addlt	r1, #1
 800803c:	f7ff fed8 	bl	8007df0 <_Balloc>
 8008040:	b930      	cbnz	r0, 8008050 <__multiply+0x44>
 8008042:	4602      	mov	r2, r0
 8008044:	4b44      	ldr	r3, [pc, #272]	; (8008158 <__multiply+0x14c>)
 8008046:	4845      	ldr	r0, [pc, #276]	; (800815c <__multiply+0x150>)
 8008048:	f240 115d 	movw	r1, #349	; 0x15d
 800804c:	f000 fd0a 	bl	8008a64 <__assert_func>
 8008050:	f100 0514 	add.w	r5, r0, #20
 8008054:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008058:	462b      	mov	r3, r5
 800805a:	2200      	movs	r2, #0
 800805c:	4543      	cmp	r3, r8
 800805e:	d321      	bcc.n	80080a4 <__multiply+0x98>
 8008060:	f104 0314 	add.w	r3, r4, #20
 8008064:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008068:	f109 0314 	add.w	r3, r9, #20
 800806c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008070:	9202      	str	r2, [sp, #8]
 8008072:	1b3a      	subs	r2, r7, r4
 8008074:	3a15      	subs	r2, #21
 8008076:	f022 0203 	bic.w	r2, r2, #3
 800807a:	3204      	adds	r2, #4
 800807c:	f104 0115 	add.w	r1, r4, #21
 8008080:	428f      	cmp	r7, r1
 8008082:	bf38      	it	cc
 8008084:	2204      	movcc	r2, #4
 8008086:	9201      	str	r2, [sp, #4]
 8008088:	9a02      	ldr	r2, [sp, #8]
 800808a:	9303      	str	r3, [sp, #12]
 800808c:	429a      	cmp	r2, r3
 800808e:	d80c      	bhi.n	80080aa <__multiply+0x9e>
 8008090:	2e00      	cmp	r6, #0
 8008092:	dd03      	ble.n	800809c <__multiply+0x90>
 8008094:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008098:	2b00      	cmp	r3, #0
 800809a:	d05a      	beq.n	8008152 <__multiply+0x146>
 800809c:	6106      	str	r6, [r0, #16]
 800809e:	b005      	add	sp, #20
 80080a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a4:	f843 2b04 	str.w	r2, [r3], #4
 80080a8:	e7d8      	b.n	800805c <__multiply+0x50>
 80080aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80080ae:	f1ba 0f00 	cmp.w	sl, #0
 80080b2:	d024      	beq.n	80080fe <__multiply+0xf2>
 80080b4:	f104 0e14 	add.w	lr, r4, #20
 80080b8:	46a9      	mov	r9, r5
 80080ba:	f04f 0c00 	mov.w	ip, #0
 80080be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080c2:	f8d9 1000 	ldr.w	r1, [r9]
 80080c6:	fa1f fb82 	uxth.w	fp, r2
 80080ca:	b289      	uxth	r1, r1
 80080cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80080d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80080d4:	f8d9 2000 	ldr.w	r2, [r9]
 80080d8:	4461      	add	r1, ip
 80080da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080de:	fb0a c20b 	mla	r2, sl, fp, ip
 80080e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080e6:	b289      	uxth	r1, r1
 80080e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080ec:	4577      	cmp	r7, lr
 80080ee:	f849 1b04 	str.w	r1, [r9], #4
 80080f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080f6:	d8e2      	bhi.n	80080be <__multiply+0xb2>
 80080f8:	9a01      	ldr	r2, [sp, #4]
 80080fa:	f845 c002 	str.w	ip, [r5, r2]
 80080fe:	9a03      	ldr	r2, [sp, #12]
 8008100:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008104:	3304      	adds	r3, #4
 8008106:	f1b9 0f00 	cmp.w	r9, #0
 800810a:	d020      	beq.n	800814e <__multiply+0x142>
 800810c:	6829      	ldr	r1, [r5, #0]
 800810e:	f104 0c14 	add.w	ip, r4, #20
 8008112:	46ae      	mov	lr, r5
 8008114:	f04f 0a00 	mov.w	sl, #0
 8008118:	f8bc b000 	ldrh.w	fp, [ip]
 800811c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008120:	fb09 220b 	mla	r2, r9, fp, r2
 8008124:	4492      	add	sl, r2
 8008126:	b289      	uxth	r1, r1
 8008128:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800812c:	f84e 1b04 	str.w	r1, [lr], #4
 8008130:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008134:	f8be 1000 	ldrh.w	r1, [lr]
 8008138:	0c12      	lsrs	r2, r2, #16
 800813a:	fb09 1102 	mla	r1, r9, r2, r1
 800813e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008142:	4567      	cmp	r7, ip
 8008144:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008148:	d8e6      	bhi.n	8008118 <__multiply+0x10c>
 800814a:	9a01      	ldr	r2, [sp, #4]
 800814c:	50a9      	str	r1, [r5, r2]
 800814e:	3504      	adds	r5, #4
 8008150:	e79a      	b.n	8008088 <__multiply+0x7c>
 8008152:	3e01      	subs	r6, #1
 8008154:	e79c      	b.n	8008090 <__multiply+0x84>
 8008156:	bf00      	nop
 8008158:	08008e2f 	.word	0x08008e2f
 800815c:	08008ea0 	.word	0x08008ea0

08008160 <__pow5mult>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4615      	mov	r5, r2
 8008166:	f012 0203 	ands.w	r2, r2, #3
 800816a:	4606      	mov	r6, r0
 800816c:	460f      	mov	r7, r1
 800816e:	d007      	beq.n	8008180 <__pow5mult+0x20>
 8008170:	4c25      	ldr	r4, [pc, #148]	; (8008208 <__pow5mult+0xa8>)
 8008172:	3a01      	subs	r2, #1
 8008174:	2300      	movs	r3, #0
 8008176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800817a:	f7ff fe9b 	bl	8007eb4 <__multadd>
 800817e:	4607      	mov	r7, r0
 8008180:	10ad      	asrs	r5, r5, #2
 8008182:	d03d      	beq.n	8008200 <__pow5mult+0xa0>
 8008184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008186:	b97c      	cbnz	r4, 80081a8 <__pow5mult+0x48>
 8008188:	2010      	movs	r0, #16
 800818a:	f7ff fe1b 	bl	8007dc4 <malloc>
 800818e:	4602      	mov	r2, r0
 8008190:	6270      	str	r0, [r6, #36]	; 0x24
 8008192:	b928      	cbnz	r0, 80081a0 <__pow5mult+0x40>
 8008194:	4b1d      	ldr	r3, [pc, #116]	; (800820c <__pow5mult+0xac>)
 8008196:	481e      	ldr	r0, [pc, #120]	; (8008210 <__pow5mult+0xb0>)
 8008198:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800819c:	f000 fc62 	bl	8008a64 <__assert_func>
 80081a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081a4:	6004      	str	r4, [r0, #0]
 80081a6:	60c4      	str	r4, [r0, #12]
 80081a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081b0:	b94c      	cbnz	r4, 80081c6 <__pow5mult+0x66>
 80081b2:	f240 2171 	movw	r1, #625	; 0x271
 80081b6:	4630      	mov	r0, r6
 80081b8:	f7ff ff12 	bl	8007fe0 <__i2b>
 80081bc:	2300      	movs	r3, #0
 80081be:	f8c8 0008 	str.w	r0, [r8, #8]
 80081c2:	4604      	mov	r4, r0
 80081c4:	6003      	str	r3, [r0, #0]
 80081c6:	f04f 0900 	mov.w	r9, #0
 80081ca:	07eb      	lsls	r3, r5, #31
 80081cc:	d50a      	bpl.n	80081e4 <__pow5mult+0x84>
 80081ce:	4639      	mov	r1, r7
 80081d0:	4622      	mov	r2, r4
 80081d2:	4630      	mov	r0, r6
 80081d4:	f7ff ff1a 	bl	800800c <__multiply>
 80081d8:	4639      	mov	r1, r7
 80081da:	4680      	mov	r8, r0
 80081dc:	4630      	mov	r0, r6
 80081de:	f7ff fe47 	bl	8007e70 <_Bfree>
 80081e2:	4647      	mov	r7, r8
 80081e4:	106d      	asrs	r5, r5, #1
 80081e6:	d00b      	beq.n	8008200 <__pow5mult+0xa0>
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	b938      	cbnz	r0, 80081fc <__pow5mult+0x9c>
 80081ec:	4622      	mov	r2, r4
 80081ee:	4621      	mov	r1, r4
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7ff ff0b 	bl	800800c <__multiply>
 80081f6:	6020      	str	r0, [r4, #0]
 80081f8:	f8c0 9000 	str.w	r9, [r0]
 80081fc:	4604      	mov	r4, r0
 80081fe:	e7e4      	b.n	80081ca <__pow5mult+0x6a>
 8008200:	4638      	mov	r0, r7
 8008202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008206:	bf00      	nop
 8008208:	08008ff0 	.word	0x08008ff0
 800820c:	08008dbd 	.word	0x08008dbd
 8008210:	08008ea0 	.word	0x08008ea0

08008214 <__lshift>:
 8008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	460c      	mov	r4, r1
 800821a:	6849      	ldr	r1, [r1, #4]
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	4607      	mov	r7, r0
 8008226:	4691      	mov	r9, r2
 8008228:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800822c:	f108 0601 	add.w	r6, r8, #1
 8008230:	42b3      	cmp	r3, r6
 8008232:	db0b      	blt.n	800824c <__lshift+0x38>
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff fddb 	bl	8007df0 <_Balloc>
 800823a:	4605      	mov	r5, r0
 800823c:	b948      	cbnz	r0, 8008252 <__lshift+0x3e>
 800823e:	4602      	mov	r2, r0
 8008240:	4b2a      	ldr	r3, [pc, #168]	; (80082ec <__lshift+0xd8>)
 8008242:	482b      	ldr	r0, [pc, #172]	; (80082f0 <__lshift+0xdc>)
 8008244:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008248:	f000 fc0c 	bl	8008a64 <__assert_func>
 800824c:	3101      	adds	r1, #1
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	e7ee      	b.n	8008230 <__lshift+0x1c>
 8008252:	2300      	movs	r3, #0
 8008254:	f100 0114 	add.w	r1, r0, #20
 8008258:	f100 0210 	add.w	r2, r0, #16
 800825c:	4618      	mov	r0, r3
 800825e:	4553      	cmp	r3, sl
 8008260:	db37      	blt.n	80082d2 <__lshift+0xbe>
 8008262:	6920      	ldr	r0, [r4, #16]
 8008264:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008268:	f104 0314 	add.w	r3, r4, #20
 800826c:	f019 091f 	ands.w	r9, r9, #31
 8008270:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008274:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008278:	d02f      	beq.n	80082da <__lshift+0xc6>
 800827a:	f1c9 0e20 	rsb	lr, r9, #32
 800827e:	468a      	mov	sl, r1
 8008280:	f04f 0c00 	mov.w	ip, #0
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	fa02 f209 	lsl.w	r2, r2, r9
 800828a:	ea42 020c 	orr.w	r2, r2, ip
 800828e:	f84a 2b04 	str.w	r2, [sl], #4
 8008292:	f853 2b04 	ldr.w	r2, [r3], #4
 8008296:	4298      	cmp	r0, r3
 8008298:	fa22 fc0e 	lsr.w	ip, r2, lr
 800829c:	d8f2      	bhi.n	8008284 <__lshift+0x70>
 800829e:	1b03      	subs	r3, r0, r4
 80082a0:	3b15      	subs	r3, #21
 80082a2:	f023 0303 	bic.w	r3, r3, #3
 80082a6:	3304      	adds	r3, #4
 80082a8:	f104 0215 	add.w	r2, r4, #21
 80082ac:	4290      	cmp	r0, r2
 80082ae:	bf38      	it	cc
 80082b0:	2304      	movcc	r3, #4
 80082b2:	f841 c003 	str.w	ip, [r1, r3]
 80082b6:	f1bc 0f00 	cmp.w	ip, #0
 80082ba:	d001      	beq.n	80082c0 <__lshift+0xac>
 80082bc:	f108 0602 	add.w	r6, r8, #2
 80082c0:	3e01      	subs	r6, #1
 80082c2:	4638      	mov	r0, r7
 80082c4:	612e      	str	r6, [r5, #16]
 80082c6:	4621      	mov	r1, r4
 80082c8:	f7ff fdd2 	bl	8007e70 <_Bfree>
 80082cc:	4628      	mov	r0, r5
 80082ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80082d6:	3301      	adds	r3, #1
 80082d8:	e7c1      	b.n	800825e <__lshift+0x4a>
 80082da:	3904      	subs	r1, #4
 80082dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80082e4:	4298      	cmp	r0, r3
 80082e6:	d8f9      	bhi.n	80082dc <__lshift+0xc8>
 80082e8:	e7ea      	b.n	80082c0 <__lshift+0xac>
 80082ea:	bf00      	nop
 80082ec:	08008e2f 	.word	0x08008e2f
 80082f0:	08008ea0 	.word	0x08008ea0

080082f4 <__mcmp>:
 80082f4:	b530      	push	{r4, r5, lr}
 80082f6:	6902      	ldr	r2, [r0, #16]
 80082f8:	690c      	ldr	r4, [r1, #16]
 80082fa:	1b12      	subs	r2, r2, r4
 80082fc:	d10e      	bne.n	800831c <__mcmp+0x28>
 80082fe:	f100 0314 	add.w	r3, r0, #20
 8008302:	3114      	adds	r1, #20
 8008304:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008308:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800830c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008310:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008314:	42a5      	cmp	r5, r4
 8008316:	d003      	beq.n	8008320 <__mcmp+0x2c>
 8008318:	d305      	bcc.n	8008326 <__mcmp+0x32>
 800831a:	2201      	movs	r2, #1
 800831c:	4610      	mov	r0, r2
 800831e:	bd30      	pop	{r4, r5, pc}
 8008320:	4283      	cmp	r3, r0
 8008322:	d3f3      	bcc.n	800830c <__mcmp+0x18>
 8008324:	e7fa      	b.n	800831c <__mcmp+0x28>
 8008326:	f04f 32ff 	mov.w	r2, #4294967295
 800832a:	e7f7      	b.n	800831c <__mcmp+0x28>

0800832c <__mdiff>:
 800832c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	460c      	mov	r4, r1
 8008332:	4606      	mov	r6, r0
 8008334:	4611      	mov	r1, r2
 8008336:	4620      	mov	r0, r4
 8008338:	4690      	mov	r8, r2
 800833a:	f7ff ffdb 	bl	80082f4 <__mcmp>
 800833e:	1e05      	subs	r5, r0, #0
 8008340:	d110      	bne.n	8008364 <__mdiff+0x38>
 8008342:	4629      	mov	r1, r5
 8008344:	4630      	mov	r0, r6
 8008346:	f7ff fd53 	bl	8007df0 <_Balloc>
 800834a:	b930      	cbnz	r0, 800835a <__mdiff+0x2e>
 800834c:	4b3a      	ldr	r3, [pc, #232]	; (8008438 <__mdiff+0x10c>)
 800834e:	4602      	mov	r2, r0
 8008350:	f240 2132 	movw	r1, #562	; 0x232
 8008354:	4839      	ldr	r0, [pc, #228]	; (800843c <__mdiff+0x110>)
 8008356:	f000 fb85 	bl	8008a64 <__assert_func>
 800835a:	2301      	movs	r3, #1
 800835c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008364:	bfa4      	itt	ge
 8008366:	4643      	movge	r3, r8
 8008368:	46a0      	movge	r8, r4
 800836a:	4630      	mov	r0, r6
 800836c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008370:	bfa6      	itte	ge
 8008372:	461c      	movge	r4, r3
 8008374:	2500      	movge	r5, #0
 8008376:	2501      	movlt	r5, #1
 8008378:	f7ff fd3a 	bl	8007df0 <_Balloc>
 800837c:	b920      	cbnz	r0, 8008388 <__mdiff+0x5c>
 800837e:	4b2e      	ldr	r3, [pc, #184]	; (8008438 <__mdiff+0x10c>)
 8008380:	4602      	mov	r2, r0
 8008382:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008386:	e7e5      	b.n	8008354 <__mdiff+0x28>
 8008388:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800838c:	6926      	ldr	r6, [r4, #16]
 800838e:	60c5      	str	r5, [r0, #12]
 8008390:	f104 0914 	add.w	r9, r4, #20
 8008394:	f108 0514 	add.w	r5, r8, #20
 8008398:	f100 0e14 	add.w	lr, r0, #20
 800839c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80083a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80083a4:	f108 0210 	add.w	r2, r8, #16
 80083a8:	46f2      	mov	sl, lr
 80083aa:	2100      	movs	r1, #0
 80083ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80083b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083b4:	fa1f f883 	uxth.w	r8, r3
 80083b8:	fa11 f18b 	uxtah	r1, r1, fp
 80083bc:	0c1b      	lsrs	r3, r3, #16
 80083be:	eba1 0808 	sub.w	r8, r1, r8
 80083c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083ca:	fa1f f888 	uxth.w	r8, r8
 80083ce:	1419      	asrs	r1, r3, #16
 80083d0:	454e      	cmp	r6, r9
 80083d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083d6:	f84a 3b04 	str.w	r3, [sl], #4
 80083da:	d8e7      	bhi.n	80083ac <__mdiff+0x80>
 80083dc:	1b33      	subs	r3, r6, r4
 80083de:	3b15      	subs	r3, #21
 80083e0:	f023 0303 	bic.w	r3, r3, #3
 80083e4:	3304      	adds	r3, #4
 80083e6:	3415      	adds	r4, #21
 80083e8:	42a6      	cmp	r6, r4
 80083ea:	bf38      	it	cc
 80083ec:	2304      	movcc	r3, #4
 80083ee:	441d      	add	r5, r3
 80083f0:	4473      	add	r3, lr
 80083f2:	469e      	mov	lr, r3
 80083f4:	462e      	mov	r6, r5
 80083f6:	4566      	cmp	r6, ip
 80083f8:	d30e      	bcc.n	8008418 <__mdiff+0xec>
 80083fa:	f10c 0203 	add.w	r2, ip, #3
 80083fe:	1b52      	subs	r2, r2, r5
 8008400:	f022 0203 	bic.w	r2, r2, #3
 8008404:	3d03      	subs	r5, #3
 8008406:	45ac      	cmp	ip, r5
 8008408:	bf38      	it	cc
 800840a:	2200      	movcc	r2, #0
 800840c:	441a      	add	r2, r3
 800840e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008412:	b17b      	cbz	r3, 8008434 <__mdiff+0x108>
 8008414:	6107      	str	r7, [r0, #16]
 8008416:	e7a3      	b.n	8008360 <__mdiff+0x34>
 8008418:	f856 8b04 	ldr.w	r8, [r6], #4
 800841c:	fa11 f288 	uxtah	r2, r1, r8
 8008420:	1414      	asrs	r4, r2, #16
 8008422:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008426:	b292      	uxth	r2, r2
 8008428:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800842c:	f84e 2b04 	str.w	r2, [lr], #4
 8008430:	1421      	asrs	r1, r4, #16
 8008432:	e7e0      	b.n	80083f6 <__mdiff+0xca>
 8008434:	3f01      	subs	r7, #1
 8008436:	e7ea      	b.n	800840e <__mdiff+0xe2>
 8008438:	08008e2f 	.word	0x08008e2f
 800843c:	08008ea0 	.word	0x08008ea0

08008440 <__d2b>:
 8008440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008444:	4689      	mov	r9, r1
 8008446:	2101      	movs	r1, #1
 8008448:	ec57 6b10 	vmov	r6, r7, d0
 800844c:	4690      	mov	r8, r2
 800844e:	f7ff fccf 	bl	8007df0 <_Balloc>
 8008452:	4604      	mov	r4, r0
 8008454:	b930      	cbnz	r0, 8008464 <__d2b+0x24>
 8008456:	4602      	mov	r2, r0
 8008458:	4b25      	ldr	r3, [pc, #148]	; (80084f0 <__d2b+0xb0>)
 800845a:	4826      	ldr	r0, [pc, #152]	; (80084f4 <__d2b+0xb4>)
 800845c:	f240 310a 	movw	r1, #778	; 0x30a
 8008460:	f000 fb00 	bl	8008a64 <__assert_func>
 8008464:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008468:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800846c:	bb35      	cbnz	r5, 80084bc <__d2b+0x7c>
 800846e:	2e00      	cmp	r6, #0
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	d028      	beq.n	80084c6 <__d2b+0x86>
 8008474:	4668      	mov	r0, sp
 8008476:	9600      	str	r6, [sp, #0]
 8008478:	f7ff fd82 	bl	8007f80 <__lo0bits>
 800847c:	9900      	ldr	r1, [sp, #0]
 800847e:	b300      	cbz	r0, 80084c2 <__d2b+0x82>
 8008480:	9a01      	ldr	r2, [sp, #4]
 8008482:	f1c0 0320 	rsb	r3, r0, #32
 8008486:	fa02 f303 	lsl.w	r3, r2, r3
 800848a:	430b      	orrs	r3, r1
 800848c:	40c2      	lsrs	r2, r0
 800848e:	6163      	str	r3, [r4, #20]
 8008490:	9201      	str	r2, [sp, #4]
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	61a3      	str	r3, [r4, #24]
 8008496:	2b00      	cmp	r3, #0
 8008498:	bf14      	ite	ne
 800849a:	2202      	movne	r2, #2
 800849c:	2201      	moveq	r2, #1
 800849e:	6122      	str	r2, [r4, #16]
 80084a0:	b1d5      	cbz	r5, 80084d8 <__d2b+0x98>
 80084a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084a6:	4405      	add	r5, r0
 80084a8:	f8c9 5000 	str.w	r5, [r9]
 80084ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084b0:	f8c8 0000 	str.w	r0, [r8]
 80084b4:	4620      	mov	r0, r4
 80084b6:	b003      	add	sp, #12
 80084b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084c0:	e7d5      	b.n	800846e <__d2b+0x2e>
 80084c2:	6161      	str	r1, [r4, #20]
 80084c4:	e7e5      	b.n	8008492 <__d2b+0x52>
 80084c6:	a801      	add	r0, sp, #4
 80084c8:	f7ff fd5a 	bl	8007f80 <__lo0bits>
 80084cc:	9b01      	ldr	r3, [sp, #4]
 80084ce:	6163      	str	r3, [r4, #20]
 80084d0:	2201      	movs	r2, #1
 80084d2:	6122      	str	r2, [r4, #16]
 80084d4:	3020      	adds	r0, #32
 80084d6:	e7e3      	b.n	80084a0 <__d2b+0x60>
 80084d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084e0:	f8c9 0000 	str.w	r0, [r9]
 80084e4:	6918      	ldr	r0, [r3, #16]
 80084e6:	f7ff fd2b 	bl	8007f40 <__hi0bits>
 80084ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084ee:	e7df      	b.n	80084b0 <__d2b+0x70>
 80084f0:	08008e2f 	.word	0x08008e2f
 80084f4:	08008ea0 	.word	0x08008ea0

080084f8 <_calloc_r>:
 80084f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084fa:	fba1 2402 	umull	r2, r4, r1, r2
 80084fe:	b94c      	cbnz	r4, 8008514 <_calloc_r+0x1c>
 8008500:	4611      	mov	r1, r2
 8008502:	9201      	str	r2, [sp, #4]
 8008504:	f000 f87a 	bl	80085fc <_malloc_r>
 8008508:	9a01      	ldr	r2, [sp, #4]
 800850a:	4605      	mov	r5, r0
 800850c:	b930      	cbnz	r0, 800851c <_calloc_r+0x24>
 800850e:	4628      	mov	r0, r5
 8008510:	b003      	add	sp, #12
 8008512:	bd30      	pop	{r4, r5, pc}
 8008514:	220c      	movs	r2, #12
 8008516:	6002      	str	r2, [r0, #0]
 8008518:	2500      	movs	r5, #0
 800851a:	e7f8      	b.n	800850e <_calloc_r+0x16>
 800851c:	4621      	mov	r1, r4
 800851e:	f7fd fdf1 	bl	8006104 <memset>
 8008522:	e7f4      	b.n	800850e <_calloc_r+0x16>

08008524 <_free_r>:
 8008524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008526:	2900      	cmp	r1, #0
 8008528:	d044      	beq.n	80085b4 <_free_r+0x90>
 800852a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852e:	9001      	str	r0, [sp, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f1a1 0404 	sub.w	r4, r1, #4
 8008536:	bfb8      	it	lt
 8008538:	18e4      	addlt	r4, r4, r3
 800853a:	f000 fb19 	bl	8008b70 <__malloc_lock>
 800853e:	4a1e      	ldr	r2, [pc, #120]	; (80085b8 <_free_r+0x94>)
 8008540:	9801      	ldr	r0, [sp, #4]
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	b933      	cbnz	r3, 8008554 <_free_r+0x30>
 8008546:	6063      	str	r3, [r4, #4]
 8008548:	6014      	str	r4, [r2, #0]
 800854a:	b003      	add	sp, #12
 800854c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008550:	f000 bb14 	b.w	8008b7c <__malloc_unlock>
 8008554:	42a3      	cmp	r3, r4
 8008556:	d908      	bls.n	800856a <_free_r+0x46>
 8008558:	6825      	ldr	r5, [r4, #0]
 800855a:	1961      	adds	r1, r4, r5
 800855c:	428b      	cmp	r3, r1
 800855e:	bf01      	itttt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	1949      	addeq	r1, r1, r5
 8008566:	6021      	streq	r1, [r4, #0]
 8008568:	e7ed      	b.n	8008546 <_free_r+0x22>
 800856a:	461a      	mov	r2, r3
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b10b      	cbz	r3, 8008574 <_free_r+0x50>
 8008570:	42a3      	cmp	r3, r4
 8008572:	d9fa      	bls.n	800856a <_free_r+0x46>
 8008574:	6811      	ldr	r1, [r2, #0]
 8008576:	1855      	adds	r5, r2, r1
 8008578:	42a5      	cmp	r5, r4
 800857a:	d10b      	bne.n	8008594 <_free_r+0x70>
 800857c:	6824      	ldr	r4, [r4, #0]
 800857e:	4421      	add	r1, r4
 8008580:	1854      	adds	r4, r2, r1
 8008582:	42a3      	cmp	r3, r4
 8008584:	6011      	str	r1, [r2, #0]
 8008586:	d1e0      	bne.n	800854a <_free_r+0x26>
 8008588:	681c      	ldr	r4, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	6053      	str	r3, [r2, #4]
 800858e:	4421      	add	r1, r4
 8008590:	6011      	str	r1, [r2, #0]
 8008592:	e7da      	b.n	800854a <_free_r+0x26>
 8008594:	d902      	bls.n	800859c <_free_r+0x78>
 8008596:	230c      	movs	r3, #12
 8008598:	6003      	str	r3, [r0, #0]
 800859a:	e7d6      	b.n	800854a <_free_r+0x26>
 800859c:	6825      	ldr	r5, [r4, #0]
 800859e:	1961      	adds	r1, r4, r5
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf04      	itt	eq
 80085a4:	6819      	ldreq	r1, [r3, #0]
 80085a6:	685b      	ldreq	r3, [r3, #4]
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	bf04      	itt	eq
 80085ac:	1949      	addeq	r1, r1, r5
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	6054      	str	r4, [r2, #4]
 80085b2:	e7ca      	b.n	800854a <_free_r+0x26>
 80085b4:	b003      	add	sp, #12
 80085b6:	bd30      	pop	{r4, r5, pc}
 80085b8:	20000394 	.word	0x20000394

080085bc <sbrk_aligned>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	4e0e      	ldr	r6, [pc, #56]	; (80085f8 <sbrk_aligned+0x3c>)
 80085c0:	460c      	mov	r4, r1
 80085c2:	6831      	ldr	r1, [r6, #0]
 80085c4:	4605      	mov	r5, r0
 80085c6:	b911      	cbnz	r1, 80085ce <sbrk_aligned+0x12>
 80085c8:	f000 f9e6 	bl	8008998 <_sbrk_r>
 80085cc:	6030      	str	r0, [r6, #0]
 80085ce:	4621      	mov	r1, r4
 80085d0:	4628      	mov	r0, r5
 80085d2:	f000 f9e1 	bl	8008998 <_sbrk_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d00a      	beq.n	80085f0 <sbrk_aligned+0x34>
 80085da:	1cc4      	adds	r4, r0, #3
 80085dc:	f024 0403 	bic.w	r4, r4, #3
 80085e0:	42a0      	cmp	r0, r4
 80085e2:	d007      	beq.n	80085f4 <sbrk_aligned+0x38>
 80085e4:	1a21      	subs	r1, r4, r0
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 f9d6 	bl	8008998 <_sbrk_r>
 80085ec:	3001      	adds	r0, #1
 80085ee:	d101      	bne.n	80085f4 <sbrk_aligned+0x38>
 80085f0:	f04f 34ff 	mov.w	r4, #4294967295
 80085f4:	4620      	mov	r0, r4
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	20000398 	.word	0x20000398

080085fc <_malloc_r>:
 80085fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	1ccd      	adds	r5, r1, #3
 8008602:	f025 0503 	bic.w	r5, r5, #3
 8008606:	3508      	adds	r5, #8
 8008608:	2d0c      	cmp	r5, #12
 800860a:	bf38      	it	cc
 800860c:	250c      	movcc	r5, #12
 800860e:	2d00      	cmp	r5, #0
 8008610:	4607      	mov	r7, r0
 8008612:	db01      	blt.n	8008618 <_malloc_r+0x1c>
 8008614:	42a9      	cmp	r1, r5
 8008616:	d905      	bls.n	8008624 <_malloc_r+0x28>
 8008618:	230c      	movs	r3, #12
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	2600      	movs	r6, #0
 800861e:	4630      	mov	r0, r6
 8008620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008624:	4e2e      	ldr	r6, [pc, #184]	; (80086e0 <_malloc_r+0xe4>)
 8008626:	f000 faa3 	bl	8008b70 <__malloc_lock>
 800862a:	6833      	ldr	r3, [r6, #0]
 800862c:	461c      	mov	r4, r3
 800862e:	bb34      	cbnz	r4, 800867e <_malloc_r+0x82>
 8008630:	4629      	mov	r1, r5
 8008632:	4638      	mov	r0, r7
 8008634:	f7ff ffc2 	bl	80085bc <sbrk_aligned>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	4604      	mov	r4, r0
 800863c:	d14d      	bne.n	80086da <_malloc_r+0xde>
 800863e:	6834      	ldr	r4, [r6, #0]
 8008640:	4626      	mov	r6, r4
 8008642:	2e00      	cmp	r6, #0
 8008644:	d140      	bne.n	80086c8 <_malloc_r+0xcc>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	4631      	mov	r1, r6
 800864a:	4638      	mov	r0, r7
 800864c:	eb04 0803 	add.w	r8, r4, r3
 8008650:	f000 f9a2 	bl	8008998 <_sbrk_r>
 8008654:	4580      	cmp	r8, r0
 8008656:	d13a      	bne.n	80086ce <_malloc_r+0xd2>
 8008658:	6821      	ldr	r1, [r4, #0]
 800865a:	3503      	adds	r5, #3
 800865c:	1a6d      	subs	r5, r5, r1
 800865e:	f025 0503 	bic.w	r5, r5, #3
 8008662:	3508      	adds	r5, #8
 8008664:	2d0c      	cmp	r5, #12
 8008666:	bf38      	it	cc
 8008668:	250c      	movcc	r5, #12
 800866a:	4629      	mov	r1, r5
 800866c:	4638      	mov	r0, r7
 800866e:	f7ff ffa5 	bl	80085bc <sbrk_aligned>
 8008672:	3001      	adds	r0, #1
 8008674:	d02b      	beq.n	80086ce <_malloc_r+0xd2>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	442b      	add	r3, r5
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	e00e      	b.n	800869c <_malloc_r+0xa0>
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	1b52      	subs	r2, r2, r5
 8008682:	d41e      	bmi.n	80086c2 <_malloc_r+0xc6>
 8008684:	2a0b      	cmp	r2, #11
 8008686:	d916      	bls.n	80086b6 <_malloc_r+0xba>
 8008688:	1961      	adds	r1, r4, r5
 800868a:	42a3      	cmp	r3, r4
 800868c:	6025      	str	r5, [r4, #0]
 800868e:	bf18      	it	ne
 8008690:	6059      	strne	r1, [r3, #4]
 8008692:	6863      	ldr	r3, [r4, #4]
 8008694:	bf08      	it	eq
 8008696:	6031      	streq	r1, [r6, #0]
 8008698:	5162      	str	r2, [r4, r5]
 800869a:	604b      	str	r3, [r1, #4]
 800869c:	4638      	mov	r0, r7
 800869e:	f104 060b 	add.w	r6, r4, #11
 80086a2:	f000 fa6b 	bl	8008b7c <__malloc_unlock>
 80086a6:	f026 0607 	bic.w	r6, r6, #7
 80086aa:	1d23      	adds	r3, r4, #4
 80086ac:	1af2      	subs	r2, r6, r3
 80086ae:	d0b6      	beq.n	800861e <_malloc_r+0x22>
 80086b0:	1b9b      	subs	r3, r3, r6
 80086b2:	50a3      	str	r3, [r4, r2]
 80086b4:	e7b3      	b.n	800861e <_malloc_r+0x22>
 80086b6:	6862      	ldr	r2, [r4, #4]
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	bf0c      	ite	eq
 80086bc:	6032      	streq	r2, [r6, #0]
 80086be:	605a      	strne	r2, [r3, #4]
 80086c0:	e7ec      	b.n	800869c <_malloc_r+0xa0>
 80086c2:	4623      	mov	r3, r4
 80086c4:	6864      	ldr	r4, [r4, #4]
 80086c6:	e7b2      	b.n	800862e <_malloc_r+0x32>
 80086c8:	4634      	mov	r4, r6
 80086ca:	6876      	ldr	r6, [r6, #4]
 80086cc:	e7b9      	b.n	8008642 <_malloc_r+0x46>
 80086ce:	230c      	movs	r3, #12
 80086d0:	603b      	str	r3, [r7, #0]
 80086d2:	4638      	mov	r0, r7
 80086d4:	f000 fa52 	bl	8008b7c <__malloc_unlock>
 80086d8:	e7a1      	b.n	800861e <_malloc_r+0x22>
 80086da:	6025      	str	r5, [r4, #0]
 80086dc:	e7de      	b.n	800869c <_malloc_r+0xa0>
 80086de:	bf00      	nop
 80086e0:	20000394 	.word	0x20000394

080086e4 <__sfputc_r>:
 80086e4:	6893      	ldr	r3, [r2, #8]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	b410      	push	{r4}
 80086ec:	6093      	str	r3, [r2, #8]
 80086ee:	da08      	bge.n	8008702 <__sfputc_r+0x1e>
 80086f0:	6994      	ldr	r4, [r2, #24]
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	db01      	blt.n	80086fa <__sfputc_r+0x16>
 80086f6:	290a      	cmp	r1, #10
 80086f8:	d103      	bne.n	8008702 <__sfputc_r+0x1e>
 80086fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086fe:	f7fe ba01 	b.w	8006b04 <__swbuf_r>
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	1c58      	adds	r0, r3, #1
 8008706:	6010      	str	r0, [r2, #0]
 8008708:	7019      	strb	r1, [r3, #0]
 800870a:	4608      	mov	r0, r1
 800870c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008710:	4770      	bx	lr

08008712 <__sfputs_r>:
 8008712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	4614      	mov	r4, r2
 800871a:	18d5      	adds	r5, r2, r3
 800871c:	42ac      	cmp	r4, r5
 800871e:	d101      	bne.n	8008724 <__sfputs_r+0x12>
 8008720:	2000      	movs	r0, #0
 8008722:	e007      	b.n	8008734 <__sfputs_r+0x22>
 8008724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008728:	463a      	mov	r2, r7
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff ffda 	bl	80086e4 <__sfputc_r>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d1f3      	bne.n	800871c <__sfputs_r+0xa>
 8008734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008738 <_vfiprintf_r>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	460d      	mov	r5, r1
 800873e:	b09d      	sub	sp, #116	; 0x74
 8008740:	4614      	mov	r4, r2
 8008742:	4698      	mov	r8, r3
 8008744:	4606      	mov	r6, r0
 8008746:	b118      	cbz	r0, 8008750 <_vfiprintf_r+0x18>
 8008748:	6983      	ldr	r3, [r0, #24]
 800874a:	b90b      	cbnz	r3, 8008750 <_vfiprintf_r+0x18>
 800874c:	f7ff fa30 	bl	8007bb0 <__sinit>
 8008750:	4b89      	ldr	r3, [pc, #548]	; (8008978 <_vfiprintf_r+0x240>)
 8008752:	429d      	cmp	r5, r3
 8008754:	d11b      	bne.n	800878e <_vfiprintf_r+0x56>
 8008756:	6875      	ldr	r5, [r6, #4]
 8008758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800875a:	07d9      	lsls	r1, r3, #31
 800875c:	d405      	bmi.n	800876a <_vfiprintf_r+0x32>
 800875e:	89ab      	ldrh	r3, [r5, #12]
 8008760:	059a      	lsls	r2, r3, #22
 8008762:	d402      	bmi.n	800876a <_vfiprintf_r+0x32>
 8008764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008766:	f7ff fac6 	bl	8007cf6 <__retarget_lock_acquire_recursive>
 800876a:	89ab      	ldrh	r3, [r5, #12]
 800876c:	071b      	lsls	r3, r3, #28
 800876e:	d501      	bpl.n	8008774 <_vfiprintf_r+0x3c>
 8008770:	692b      	ldr	r3, [r5, #16]
 8008772:	b9eb      	cbnz	r3, 80087b0 <_vfiprintf_r+0x78>
 8008774:	4629      	mov	r1, r5
 8008776:	4630      	mov	r0, r6
 8008778:	f7fe fa16 	bl	8006ba8 <__swsetup_r>
 800877c:	b1c0      	cbz	r0, 80087b0 <_vfiprintf_r+0x78>
 800877e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008780:	07dc      	lsls	r4, r3, #31
 8008782:	d50e      	bpl.n	80087a2 <_vfiprintf_r+0x6a>
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	b01d      	add	sp, #116	; 0x74
 800878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878e:	4b7b      	ldr	r3, [pc, #492]	; (800897c <_vfiprintf_r+0x244>)
 8008790:	429d      	cmp	r5, r3
 8008792:	d101      	bne.n	8008798 <_vfiprintf_r+0x60>
 8008794:	68b5      	ldr	r5, [r6, #8]
 8008796:	e7df      	b.n	8008758 <_vfiprintf_r+0x20>
 8008798:	4b79      	ldr	r3, [pc, #484]	; (8008980 <_vfiprintf_r+0x248>)
 800879a:	429d      	cmp	r5, r3
 800879c:	bf08      	it	eq
 800879e:	68f5      	ldreq	r5, [r6, #12]
 80087a0:	e7da      	b.n	8008758 <_vfiprintf_r+0x20>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	0598      	lsls	r0, r3, #22
 80087a6:	d4ed      	bmi.n	8008784 <_vfiprintf_r+0x4c>
 80087a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087aa:	f7ff faa5 	bl	8007cf8 <__retarget_lock_release_recursive>
 80087ae:	e7e9      	b.n	8008784 <_vfiprintf_r+0x4c>
 80087b0:	2300      	movs	r3, #0
 80087b2:	9309      	str	r3, [sp, #36]	; 0x24
 80087b4:	2320      	movs	r3, #32
 80087b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80087be:	2330      	movs	r3, #48	; 0x30
 80087c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008984 <_vfiprintf_r+0x24c>
 80087c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087c8:	f04f 0901 	mov.w	r9, #1
 80087cc:	4623      	mov	r3, r4
 80087ce:	469a      	mov	sl, r3
 80087d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d4:	b10a      	cbz	r2, 80087da <_vfiprintf_r+0xa2>
 80087d6:	2a25      	cmp	r2, #37	; 0x25
 80087d8:	d1f9      	bne.n	80087ce <_vfiprintf_r+0x96>
 80087da:	ebba 0b04 	subs.w	fp, sl, r4
 80087de:	d00b      	beq.n	80087f8 <_vfiprintf_r+0xc0>
 80087e0:	465b      	mov	r3, fp
 80087e2:	4622      	mov	r2, r4
 80087e4:	4629      	mov	r1, r5
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7ff ff93 	bl	8008712 <__sfputs_r>
 80087ec:	3001      	adds	r0, #1
 80087ee:	f000 80aa 	beq.w	8008946 <_vfiprintf_r+0x20e>
 80087f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087f4:	445a      	add	r2, fp
 80087f6:	9209      	str	r2, [sp, #36]	; 0x24
 80087f8:	f89a 3000 	ldrb.w	r3, [sl]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80a2 	beq.w	8008946 <_vfiprintf_r+0x20e>
 8008802:	2300      	movs	r3, #0
 8008804:	f04f 32ff 	mov.w	r2, #4294967295
 8008808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800880c:	f10a 0a01 	add.w	sl, sl, #1
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	9307      	str	r3, [sp, #28]
 8008814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008818:	931a      	str	r3, [sp, #104]	; 0x68
 800881a:	4654      	mov	r4, sl
 800881c:	2205      	movs	r2, #5
 800881e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008822:	4858      	ldr	r0, [pc, #352]	; (8008984 <_vfiprintf_r+0x24c>)
 8008824:	f7f7 fcdc 	bl	80001e0 <memchr>
 8008828:	9a04      	ldr	r2, [sp, #16]
 800882a:	b9d8      	cbnz	r0, 8008864 <_vfiprintf_r+0x12c>
 800882c:	06d1      	lsls	r1, r2, #27
 800882e:	bf44      	itt	mi
 8008830:	2320      	movmi	r3, #32
 8008832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008836:	0713      	lsls	r3, r2, #28
 8008838:	bf44      	itt	mi
 800883a:	232b      	movmi	r3, #43	; 0x2b
 800883c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008840:	f89a 3000 	ldrb.w	r3, [sl]
 8008844:	2b2a      	cmp	r3, #42	; 0x2a
 8008846:	d015      	beq.n	8008874 <_vfiprintf_r+0x13c>
 8008848:	9a07      	ldr	r2, [sp, #28]
 800884a:	4654      	mov	r4, sl
 800884c:	2000      	movs	r0, #0
 800884e:	f04f 0c0a 	mov.w	ip, #10
 8008852:	4621      	mov	r1, r4
 8008854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008858:	3b30      	subs	r3, #48	; 0x30
 800885a:	2b09      	cmp	r3, #9
 800885c:	d94e      	bls.n	80088fc <_vfiprintf_r+0x1c4>
 800885e:	b1b0      	cbz	r0, 800888e <_vfiprintf_r+0x156>
 8008860:	9207      	str	r2, [sp, #28]
 8008862:	e014      	b.n	800888e <_vfiprintf_r+0x156>
 8008864:	eba0 0308 	sub.w	r3, r0, r8
 8008868:	fa09 f303 	lsl.w	r3, r9, r3
 800886c:	4313      	orrs	r3, r2
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	46a2      	mov	sl, r4
 8008872:	e7d2      	b.n	800881a <_vfiprintf_r+0xe2>
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	1d19      	adds	r1, r3, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	9103      	str	r1, [sp, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfbb      	ittet	lt
 8008880:	425b      	neglt	r3, r3
 8008882:	f042 0202 	orrlt.w	r2, r2, #2
 8008886:	9307      	strge	r3, [sp, #28]
 8008888:	9307      	strlt	r3, [sp, #28]
 800888a:	bfb8      	it	lt
 800888c:	9204      	strlt	r2, [sp, #16]
 800888e:	7823      	ldrb	r3, [r4, #0]
 8008890:	2b2e      	cmp	r3, #46	; 0x2e
 8008892:	d10c      	bne.n	80088ae <_vfiprintf_r+0x176>
 8008894:	7863      	ldrb	r3, [r4, #1]
 8008896:	2b2a      	cmp	r3, #42	; 0x2a
 8008898:	d135      	bne.n	8008906 <_vfiprintf_r+0x1ce>
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	1d1a      	adds	r2, r3, #4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	9203      	str	r2, [sp, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bfb8      	it	lt
 80088a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80088aa:	3402      	adds	r4, #2
 80088ac:	9305      	str	r3, [sp, #20]
 80088ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008994 <_vfiprintf_r+0x25c>
 80088b2:	7821      	ldrb	r1, [r4, #0]
 80088b4:	2203      	movs	r2, #3
 80088b6:	4650      	mov	r0, sl
 80088b8:	f7f7 fc92 	bl	80001e0 <memchr>
 80088bc:	b140      	cbz	r0, 80088d0 <_vfiprintf_r+0x198>
 80088be:	2340      	movs	r3, #64	; 0x40
 80088c0:	eba0 000a 	sub.w	r0, r0, sl
 80088c4:	fa03 f000 	lsl.w	r0, r3, r0
 80088c8:	9b04      	ldr	r3, [sp, #16]
 80088ca:	4303      	orrs	r3, r0
 80088cc:	3401      	adds	r4, #1
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d4:	482c      	ldr	r0, [pc, #176]	; (8008988 <_vfiprintf_r+0x250>)
 80088d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088da:	2206      	movs	r2, #6
 80088dc:	f7f7 fc80 	bl	80001e0 <memchr>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d03f      	beq.n	8008964 <_vfiprintf_r+0x22c>
 80088e4:	4b29      	ldr	r3, [pc, #164]	; (800898c <_vfiprintf_r+0x254>)
 80088e6:	bb1b      	cbnz	r3, 8008930 <_vfiprintf_r+0x1f8>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	3307      	adds	r3, #7
 80088ec:	f023 0307 	bic.w	r3, r3, #7
 80088f0:	3308      	adds	r3, #8
 80088f2:	9303      	str	r3, [sp, #12]
 80088f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f6:	443b      	add	r3, r7
 80088f8:	9309      	str	r3, [sp, #36]	; 0x24
 80088fa:	e767      	b.n	80087cc <_vfiprintf_r+0x94>
 80088fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008900:	460c      	mov	r4, r1
 8008902:	2001      	movs	r0, #1
 8008904:	e7a5      	b.n	8008852 <_vfiprintf_r+0x11a>
 8008906:	2300      	movs	r3, #0
 8008908:	3401      	adds	r4, #1
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	4619      	mov	r1, r3
 800890e:	f04f 0c0a 	mov.w	ip, #10
 8008912:	4620      	mov	r0, r4
 8008914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008918:	3a30      	subs	r2, #48	; 0x30
 800891a:	2a09      	cmp	r2, #9
 800891c:	d903      	bls.n	8008926 <_vfiprintf_r+0x1ee>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0c5      	beq.n	80088ae <_vfiprintf_r+0x176>
 8008922:	9105      	str	r1, [sp, #20]
 8008924:	e7c3      	b.n	80088ae <_vfiprintf_r+0x176>
 8008926:	fb0c 2101 	mla	r1, ip, r1, r2
 800892a:	4604      	mov	r4, r0
 800892c:	2301      	movs	r3, #1
 800892e:	e7f0      	b.n	8008912 <_vfiprintf_r+0x1da>
 8008930:	ab03      	add	r3, sp, #12
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	462a      	mov	r2, r5
 8008936:	4b16      	ldr	r3, [pc, #88]	; (8008990 <_vfiprintf_r+0x258>)
 8008938:	a904      	add	r1, sp, #16
 800893a:	4630      	mov	r0, r6
 800893c:	f7fd fc8a 	bl	8006254 <_printf_float>
 8008940:	4607      	mov	r7, r0
 8008942:	1c78      	adds	r0, r7, #1
 8008944:	d1d6      	bne.n	80088f4 <_vfiprintf_r+0x1bc>
 8008946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008948:	07d9      	lsls	r1, r3, #31
 800894a:	d405      	bmi.n	8008958 <_vfiprintf_r+0x220>
 800894c:	89ab      	ldrh	r3, [r5, #12]
 800894e:	059a      	lsls	r2, r3, #22
 8008950:	d402      	bmi.n	8008958 <_vfiprintf_r+0x220>
 8008952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008954:	f7ff f9d0 	bl	8007cf8 <__retarget_lock_release_recursive>
 8008958:	89ab      	ldrh	r3, [r5, #12]
 800895a:	065b      	lsls	r3, r3, #25
 800895c:	f53f af12 	bmi.w	8008784 <_vfiprintf_r+0x4c>
 8008960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008962:	e711      	b.n	8008788 <_vfiprintf_r+0x50>
 8008964:	ab03      	add	r3, sp, #12
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	462a      	mov	r2, r5
 800896a:	4b09      	ldr	r3, [pc, #36]	; (8008990 <_vfiprintf_r+0x258>)
 800896c:	a904      	add	r1, sp, #16
 800896e:	4630      	mov	r0, r6
 8008970:	f7fd ff14 	bl	800679c <_printf_i>
 8008974:	e7e4      	b.n	8008940 <_vfiprintf_r+0x208>
 8008976:	bf00      	nop
 8008978:	08008e60 	.word	0x08008e60
 800897c:	08008e80 	.word	0x08008e80
 8008980:	08008e40 	.word	0x08008e40
 8008984:	08008ffc 	.word	0x08008ffc
 8008988:	08009006 	.word	0x08009006
 800898c:	08006255 	.word	0x08006255
 8008990:	08008713 	.word	0x08008713
 8008994:	08009002 	.word	0x08009002

08008998 <_sbrk_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d06      	ldr	r5, [pc, #24]	; (80089b4 <_sbrk_r+0x1c>)
 800899c:	2300      	movs	r3, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	f7f9 f8e4 	bl	8001b70 <_sbrk>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_sbrk_r+0x1a>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_sbrk_r+0x1a>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	2000039c 	.word	0x2000039c

080089b8 <__sread>:
 80089b8:	b510      	push	{r4, lr}
 80089ba:	460c      	mov	r4, r1
 80089bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c0:	f000 f8e2 	bl	8008b88 <_read_r>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	bfab      	itete	ge
 80089c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ca:	89a3      	ldrhlt	r3, [r4, #12]
 80089cc:	181b      	addge	r3, r3, r0
 80089ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089d2:	bfac      	ite	ge
 80089d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089d6:	81a3      	strhlt	r3, [r4, #12]
 80089d8:	bd10      	pop	{r4, pc}

080089da <__swrite>:
 80089da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089de:	461f      	mov	r7, r3
 80089e0:	898b      	ldrh	r3, [r1, #12]
 80089e2:	05db      	lsls	r3, r3, #23
 80089e4:	4605      	mov	r5, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	4616      	mov	r6, r2
 80089ea:	d505      	bpl.n	80089f8 <__swrite+0x1e>
 80089ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f0:	2302      	movs	r3, #2
 80089f2:	2200      	movs	r2, #0
 80089f4:	f000 f898 	bl	8008b28 <_lseek_r>
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	4632      	mov	r2, r6
 8008a06:	463b      	mov	r3, r7
 8008a08:	4628      	mov	r0, r5
 8008a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0e:	f000 b817 	b.w	8008a40 <_write_r>

08008a12 <__sseek>:
 8008a12:	b510      	push	{r4, lr}
 8008a14:	460c      	mov	r4, r1
 8008a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1a:	f000 f885 	bl	8008b28 <_lseek_r>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	bf15      	itete	ne
 8008a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a2e:	81a3      	strheq	r3, [r4, #12]
 8008a30:	bf18      	it	ne
 8008a32:	81a3      	strhne	r3, [r4, #12]
 8008a34:	bd10      	pop	{r4, pc}

08008a36 <__sclose>:
 8008a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a3a:	f000 b831 	b.w	8008aa0 <_close_r>
	...

08008a40 <_write_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4d07      	ldr	r5, [pc, #28]	; (8008a60 <_write_r+0x20>)
 8008a44:	4604      	mov	r4, r0
 8008a46:	4608      	mov	r0, r1
 8008a48:	4611      	mov	r1, r2
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	602a      	str	r2, [r5, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f7f9 f83d 	bl	8001ace <_write>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_write_r+0x1e>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_write_r+0x1e>
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	2000039c 	.word	0x2000039c

08008a64 <__assert_func>:
 8008a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a66:	4614      	mov	r4, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <__assert_func+0x2c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4605      	mov	r5, r0
 8008a70:	68d8      	ldr	r0, [r3, #12]
 8008a72:	b14c      	cbz	r4, 8008a88 <__assert_func+0x24>
 8008a74:	4b07      	ldr	r3, [pc, #28]	; (8008a94 <__assert_func+0x30>)
 8008a76:	9100      	str	r1, [sp, #0]
 8008a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a7c:	4906      	ldr	r1, [pc, #24]	; (8008a98 <__assert_func+0x34>)
 8008a7e:	462b      	mov	r3, r5
 8008a80:	f000 f81e 	bl	8008ac0 <fiprintf>
 8008a84:	f000 f89f 	bl	8008bc6 <abort>
 8008a88:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <__assert_func+0x38>)
 8008a8a:	461c      	mov	r4, r3
 8008a8c:	e7f3      	b.n	8008a76 <__assert_func+0x12>
 8008a8e:	bf00      	nop
 8008a90:	2000000c 	.word	0x2000000c
 8008a94:	0800900d 	.word	0x0800900d
 8008a98:	0800901a 	.word	0x0800901a
 8008a9c:	08009048 	.word	0x08009048

08008aa0 <_close_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d06      	ldr	r5, [pc, #24]	; (8008abc <_close_r+0x1c>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	602b      	str	r3, [r5, #0]
 8008aac:	f7f9 f82b 	bl	8001b06 <_close>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_close_r+0x1a>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_close_r+0x1a>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	2000039c 	.word	0x2000039c

08008ac0 <fiprintf>:
 8008ac0:	b40e      	push	{r1, r2, r3}
 8008ac2:	b503      	push	{r0, r1, lr}
 8008ac4:	4601      	mov	r1, r0
 8008ac6:	ab03      	add	r3, sp, #12
 8008ac8:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <fiprintf+0x20>)
 8008aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ace:	6800      	ldr	r0, [r0, #0]
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	f7ff fe31 	bl	8008738 <_vfiprintf_r>
 8008ad6:	b002      	add	sp, #8
 8008ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008adc:	b003      	add	sp, #12
 8008ade:	4770      	bx	lr
 8008ae0:	2000000c 	.word	0x2000000c

08008ae4 <_fstat_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d07      	ldr	r5, [pc, #28]	; (8008b04 <_fstat_r+0x20>)
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	4611      	mov	r1, r2
 8008af0:	602b      	str	r3, [r5, #0]
 8008af2:	f7f9 f814 	bl	8001b1e <_fstat>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d102      	bne.n	8008b00 <_fstat_r+0x1c>
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	b103      	cbz	r3, 8008b00 <_fstat_r+0x1c>
 8008afe:	6023      	str	r3, [r4, #0]
 8008b00:	bd38      	pop	{r3, r4, r5, pc}
 8008b02:	bf00      	nop
 8008b04:	2000039c 	.word	0x2000039c

08008b08 <_isatty_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d06      	ldr	r5, [pc, #24]	; (8008b24 <_isatty_r+0x1c>)
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	f7f9 f813 	bl	8001b3e <_isatty>
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	d102      	bne.n	8008b22 <_isatty_r+0x1a>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	b103      	cbz	r3, 8008b22 <_isatty_r+0x1a>
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	2000039c 	.word	0x2000039c

08008b28 <_lseek_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d07      	ldr	r5, [pc, #28]	; (8008b48 <_lseek_r+0x20>)
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	4608      	mov	r0, r1
 8008b30:	4611      	mov	r1, r2
 8008b32:	2200      	movs	r2, #0
 8008b34:	602a      	str	r2, [r5, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	f7f9 f80c 	bl	8001b54 <_lseek>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_lseek_r+0x1e>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_lseek_r+0x1e>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	2000039c 	.word	0x2000039c

08008b4c <__ascii_mbtowc>:
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	b901      	cbnz	r1, 8008b52 <__ascii_mbtowc+0x6>
 8008b50:	a901      	add	r1, sp, #4
 8008b52:	b142      	cbz	r2, 8008b66 <__ascii_mbtowc+0x1a>
 8008b54:	b14b      	cbz	r3, 8008b6a <__ascii_mbtowc+0x1e>
 8008b56:	7813      	ldrb	r3, [r2, #0]
 8008b58:	600b      	str	r3, [r1, #0]
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	1e10      	subs	r0, r2, #0
 8008b5e:	bf18      	it	ne
 8008b60:	2001      	movne	r0, #1
 8008b62:	b002      	add	sp, #8
 8008b64:	4770      	bx	lr
 8008b66:	4610      	mov	r0, r2
 8008b68:	e7fb      	b.n	8008b62 <__ascii_mbtowc+0x16>
 8008b6a:	f06f 0001 	mvn.w	r0, #1
 8008b6e:	e7f8      	b.n	8008b62 <__ascii_mbtowc+0x16>

08008b70 <__malloc_lock>:
 8008b70:	4801      	ldr	r0, [pc, #4]	; (8008b78 <__malloc_lock+0x8>)
 8008b72:	f7ff b8c0 	b.w	8007cf6 <__retarget_lock_acquire_recursive>
 8008b76:	bf00      	nop
 8008b78:	20000390 	.word	0x20000390

08008b7c <__malloc_unlock>:
 8008b7c:	4801      	ldr	r0, [pc, #4]	; (8008b84 <__malloc_unlock+0x8>)
 8008b7e:	f7ff b8bb 	b.w	8007cf8 <__retarget_lock_release_recursive>
 8008b82:	bf00      	nop
 8008b84:	20000390 	.word	0x20000390

08008b88 <_read_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4d07      	ldr	r5, [pc, #28]	; (8008ba8 <_read_r+0x20>)
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	602a      	str	r2, [r5, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7f8 ff7c 	bl	8001a94 <_read>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_read_r+0x1e>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_read_r+0x1e>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	2000039c 	.word	0x2000039c

08008bac <__ascii_wctomb>:
 8008bac:	b149      	cbz	r1, 8008bc2 <__ascii_wctomb+0x16>
 8008bae:	2aff      	cmp	r2, #255	; 0xff
 8008bb0:	bf85      	ittet	hi
 8008bb2:	238a      	movhi	r3, #138	; 0x8a
 8008bb4:	6003      	strhi	r3, [r0, #0]
 8008bb6:	700a      	strbls	r2, [r1, #0]
 8008bb8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008bbc:	bf98      	it	ls
 8008bbe:	2001      	movls	r0, #1
 8008bc0:	4770      	bx	lr
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	4770      	bx	lr

08008bc6 <abort>:
 8008bc6:	b508      	push	{r3, lr}
 8008bc8:	2006      	movs	r0, #6
 8008bca:	f000 f82b 	bl	8008c24 <raise>
 8008bce:	2001      	movs	r0, #1
 8008bd0:	f7f8 ff56 	bl	8001a80 <_exit>

08008bd4 <_raise_r>:
 8008bd4:	291f      	cmp	r1, #31
 8008bd6:	b538      	push	{r3, r4, r5, lr}
 8008bd8:	4604      	mov	r4, r0
 8008bda:	460d      	mov	r5, r1
 8008bdc:	d904      	bls.n	8008be8 <_raise_r+0x14>
 8008bde:	2316      	movs	r3, #22
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	f04f 30ff 	mov.w	r0, #4294967295
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bea:	b112      	cbz	r2, 8008bf2 <_raise_r+0x1e>
 8008bec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bf0:	b94b      	cbnz	r3, 8008c06 <_raise_r+0x32>
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 f830 	bl	8008c58 <_getpid_r>
 8008bf8:	462a      	mov	r2, r5
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c02:	f000 b817 	b.w	8008c34 <_kill_r>
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d00a      	beq.n	8008c20 <_raise_r+0x4c>
 8008c0a:	1c59      	adds	r1, r3, #1
 8008c0c:	d103      	bne.n	8008c16 <_raise_r+0x42>
 8008c0e:	2316      	movs	r3, #22
 8008c10:	6003      	str	r3, [r0, #0]
 8008c12:	2001      	movs	r0, #1
 8008c14:	e7e7      	b.n	8008be6 <_raise_r+0x12>
 8008c16:	2400      	movs	r4, #0
 8008c18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	4798      	blx	r3
 8008c20:	2000      	movs	r0, #0
 8008c22:	e7e0      	b.n	8008be6 <_raise_r+0x12>

08008c24 <raise>:
 8008c24:	4b02      	ldr	r3, [pc, #8]	; (8008c30 <raise+0xc>)
 8008c26:	4601      	mov	r1, r0
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	f7ff bfd3 	b.w	8008bd4 <_raise_r>
 8008c2e:	bf00      	nop
 8008c30:	2000000c 	.word	0x2000000c

08008c34 <_kill_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4d07      	ldr	r5, [pc, #28]	; (8008c54 <_kill_r+0x20>)
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	4611      	mov	r1, r2
 8008c40:	602b      	str	r3, [r5, #0]
 8008c42:	f7f8 ff0d 	bl	8001a60 <_kill>
 8008c46:	1c43      	adds	r3, r0, #1
 8008c48:	d102      	bne.n	8008c50 <_kill_r+0x1c>
 8008c4a:	682b      	ldr	r3, [r5, #0]
 8008c4c:	b103      	cbz	r3, 8008c50 <_kill_r+0x1c>
 8008c4e:	6023      	str	r3, [r4, #0]
 8008c50:	bd38      	pop	{r3, r4, r5, pc}
 8008c52:	bf00      	nop
 8008c54:	2000039c 	.word	0x2000039c

08008c58 <_getpid_r>:
 8008c58:	f7f8 befa 	b.w	8001a50 <_getpid>

08008c5c <_init>:
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	bf00      	nop
 8008c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c62:	bc08      	pop	{r3}
 8008c64:	469e      	mov	lr, r3
 8008c66:	4770      	bx	lr

08008c68 <_fini>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	bf00      	nop
 8008c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6e:	bc08      	pop	{r3}
 8008c70:	469e      	mov	lr, r3
 8008c72:	4770      	bx	lr
